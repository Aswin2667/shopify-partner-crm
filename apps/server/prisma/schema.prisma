generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(uuid())
  email                String               @unique
  authenticationMethod AuthenticationMethod
  name                 String?
  avatarUrl            String?
  createdAt            BigInt
  updatedAt            BigInt
  deletedAt            BigInt
  LeadActivity         LeadActivity[]
  orgMembers           OrgMember[]
  orgMemberInvites     OrgMemberInvite[]
  templates            Template[]
}

model OrgMemberInvite {
  id             String        @id @default(uuid())
  token          String        @unique
  email          String
  role           OrgMemberRole @default(MEMBER)
  organizationId String
  inviterId      String
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  inviter        User          @relation(fields: [inviterId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, email])
}

model Organization {
  id           String            @id @default(uuid())
  name         String
  logo         String?
  description  String?
  createdAt    BigInt
  updatedAt    BigInt
  deletedAt    BigInt
  integrations Integration[]
  members      OrgMember[]
  invites      OrgMemberInvite[]
  Projects     Projects[]
}

model OrgMember {
  id             String        @id @default(uuid())
  organizationId String
  userId         String
  role           OrgMemberRole @default(MEMBER)
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
}

model Projects {
  id             String         @id @default(uuid())
  slug           String         @unique
  name           String
  organizationId String
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt?
  version        AppVersion     @default(V2)
  integrationId  String?
  data           Json
  type           String
  leadProjects   LeadProjects[]
  integration    Integration?   @relation(fields: [integrationId], references: [id])
  organization   Organization   @relation(fields: [organizationId], references: [id])
}

model LeadNotes {
  id        String @id @default(uuid())
  leadId    String
  data      String
  createdAt BigInt
  updatedAt BigInt
  deletedAt BigInt
  lead      Lead   @relation(fields: [leadId], references: [id])

  LeadActivity LeadActivity[]
}

model Lead {
  id             String         @id @default(uuid())
  shopifyDomain  String         @unique
  shopifyStoreId String         @unique
  leadSource     String?
  shopDetails    Json?
  industry       String?
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  attachments    Attachment[]
  contacts       Contact[]
  leadActivities LeadActivity[]
  leadNotes      LeadNotes[]
  Projects       LeadProjects[]
}

model LeadProjects {
  id        String   @id @default(uuid())
  leadId    String
  projectId String
  createdAt BigInt
  updatedAt BigInt
  deletedAt BigInt
  status    String?
  lead      Lead     @relation(fields: [leadId], references: [id])
  project   Projects @relation(fields: [projectId], references: [id])

  @@unique([projectId, leadId])
}

model Contact {
  id             String  @id @default(uuid())
  firstName      String?
  lastName       String?
  primaryEmail   String?
  secondaryEmail String?
  primaryPhNo    String?
  secondaryPhNo  String?
  industry       String?
  type           String?
  leadId         String?
  lastContacted  BigInt?
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  lead           Lead?   @relation(fields: [leadId], references: [id])
}

model Attachment {
  id             String @id @default(uuid())
  attachmentUrl  String
  attachmentType String
  eTag           String
  attachmentName String
  leadId         String
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  lead           Lead   @relation(fields: [leadId], references: [id])
}

model LeadActivity {
  id        String           @id @default(uuid())
  leadId    String
  data      Json
  updatedAt BigInt
  createdAt BigInt
  deletedAt BigInt
  userId    String
  noteId    String?
  type      LeadActivityType
  lead      Lead             @relation(fields: [leadId], references: [id])
  user      User             @relation(fields: [userId], references: [id])
  note      LeadNotes?        @relation(fields: [noteId],references: [id])

  @@index([leadId, userId])
}

model Email {
  id             String  @id @default(uuid())
  subject        String?
  messageId      String
  hasAttachments Boolean
  unsubscribed   Boolean
  failed         Boolean
  skipped        Boolean
  opened         Boolean
  sent           Boolean
  time           BigInt
  cc             String?
  bcc            String?
  from           String
  to             String
  deletedAt      BigInt
  userId         String
}

model Integration {
  id             String       @id @default(uuid())
  organizationId String
  data           Json
  description    String?
  type           String?
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  Projects       Projects[]
}

model Template {
  id        String @id @default(uuid())
  html      String
  createdAt BigInt
  updatedAt BigInt
  deletedAt BigInt
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}

enum LeadActivityType {
  LEAD_CREATED
  LEAD_UPDATED
  NOTE_CREATED
  NOTE_UPDATED
  NOTE_DELETED
  EMAIL
  CALL
  TASK
  MEETING
  STATUS_CHANGE
}

enum AuthenticationMethod {
  GOOGLE
  MAGIC_LINK
}

enum OrgMemberRole {
  ADMIN
  MEMBER
}

enum AppVersion {
  V2
  V3
}
