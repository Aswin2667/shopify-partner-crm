generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model User {
  id                    String            @id @default(uuid())
  email                 String            @unique
  authenticationMethod  AuthenticationMethod
  name                  String?
  avatarUrl             String?
  createdAt             BigInt            @default(autoincrement())
  updatedAt             BigInt            @default(autoincrement())
  deletedAt             BigInt
  orgMemberInvites      OrgMemberInvite[]
  orgMembers            OrgMember[]
  templates             Template[]
}

model OrgMemberInvite {
  id             String        @id @default(uuid())
  token          String        @unique
  email          String
  role           OrgMemberRole @default(MEMBER)
  organization   Organization  @relation(fields: [organizationId], references: [id])
  organizationId String
  inviter        User          @relation(fields: [inviterId], references: [id])
  inviterId      String
  createdAt      BigInt        @default(autoincrement())
  updatedAt      BigInt        @default(autoincrement())
  deletedAt      BigInt

  @@unique([organizationId, email])
}

model Organization {
  id          String          @id @default(uuid())
  name        String
  logo        String?
  description String?
  createdAt   BigInt          @default(autoincrement())
  updatedAt   BigInt          @default(autoincrement())
  deletedAt   BigInt
  Projects        Projects[]
  members     OrgMember[]
  invites     OrgMemberInvite[]
  integrations Integration[]
}

model OrgMember {
  id             String         @id @default(uuid())
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User           @relation(fields: [userId], references: [id])
  userId         String
  role           OrgMemberRole  @default(MEMBER)
  createdAt      BigInt         @default(autoincrement())
  updatedAt      BigInt         @default(autoincrement())
  deletedAt      BigInt

  @@unique([organizationId, userId])
}

model Projects {
  id              String        @id @default(uuid())
  slug            String        @unique
  name            String
  type            String
  data            Json
  organization    Organization  @relation(fields: [organizationId], references: [id])
  organizationId  String
  createdAt       BigInt        @default(autoincrement())
  updatedAt       BigInt        @default(autoincrement())
  deletedAt       BigInt?
  version         AppVersion    @default(V2)
  leadProjects        LeadProjects[]
  integrationId   String?
  integration     Integration?  @relation(fields: [integrationId], references: [id])
}

model LeadNotes {
  id          String @id @default(uuid())
  leadId      String
  lead        Lead   @relation(fields: [leadId], references: [id])
  data        String
  createdAt   BigInt @default(autoincrement())
  updatedAt   BigInt @default(autoincrement())
  deletedAt   BigInt
}

model Lead {
  id              String        @id @default(uuid())
  shopifyDomain   String        @unique
  shopifyStoreId  String        @unique
  Projects            LeadProjects[]
  leadSource      String?
  shopDetails     Json?
  industry        String?
  createdAt       BigInt        @default(autoincrement())
  updatedAt       BigInt        @default(autoincrement())
  deletedAt       BigInt
  leadActivities  LeadActivity[]
  leadNotes       LeadNotes[]
  contacts        Contact[]
  attachments     Attachment[]
}

model LeadProjects {
  id         String @id @default(uuid())
  leadId     String
  projectId      String
  lead       Lead   @relation(fields: [leadId], references: [id])
  project        Projects   @relation(fields: [projectId], references: [id])
  createdAt  BigInt @default(autoincrement())
  updatedAt  BigInt @default(autoincrement())
  deletedAt  BigInt
  status     String?

  @@unique([projectId, leadId])
}

model Contact {
  id             String   @id @default(uuid())
  firstName      String?
  lastName       String?
  primaryEmail   String?
  secondaryEmail String?
  primaryPhNo    String?
  secondaryPhNo  String?
  industry       String?
  type           String?
  leadId         String?
  lead           Lead?    @relation(fields: [leadId], references: [id])
  lastContacted  BigInt?

  createdAt BigInt @default(autoincrement())
  updatedAt BigInt @default(autoincrement())
  deletedAt BigInt
}

model Attachment {
  id            String @id @default(uuid())
  attachmentUrl String
  attachmentType String
  eTag          String
  attachmentName String
  leadId        String
  lead          Lead   @relation(fields: [leadId], references: [id])
  createdAt     BigInt @default(autoincrement())
  updatedAt     BigInt @default(autoincrement())
  deletedAt     BigInt
}

model LeadActivity {
  id        String @id @default(uuid())
  leadId    String
  lead      Lead   @relation(fields: [leadId], references: [id])
  type      String
  data      Json
  createdAt BigInt @default(autoincrement())
  updatedAt BigInt @default(autoincrement())
  deletedAt BigInt
}

model Email {
  id              String  @id @default(uuid())
  subject         String?
  messageId       String
  hasAttachments  Boolean
  unsubscribed    Boolean
  failed          Boolean
  skipped         Boolean
  opened          Boolean
  sent            Boolean
  time            BigInt
  cc              String?
  bcc             String?
  from            String
  to              String
  deletedAt       BigInt
  userId          String

}

model Integration {
  id             String        @id @default(uuid())
  organizationId String
  organization   Organization  @relation(fields: [organizationId], references: [id])
  name           String
  type           String?
  data           Json
  description    String?
  createdAt      BigInt        @default(autoincrement())
  updatedAt      BigInt        @default(autoincrement())
  deletedAt      BigInt
  Projects           Projects[]
}

model Template {
  id        String @id @default(uuid())
  html      String
  createdAt BigInt  @default(autoincrement())
  updatedAt BigInt  @default(autoincrement())
  deletedAt BigInt
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}

enum AuthenticationMethod {
  GOOGLE
  MAGIC_LINK
}

enum OrgMemberRole {
  ADMIN
  MEMBER
}

enum AppVersion {
  V2
  V3
}
