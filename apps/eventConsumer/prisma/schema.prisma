generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(uuid())
  email                String               @unique
  authenticationMethod AuthenticationMethod
  name                 String?
  avatarUrl            String?
  createdAt            BigInt
  updatedAt            BigInt
  deletedAt            BigInt
  LeadActivity         LeadActivity[]
  orgMembers           OrgMember[]
  orgMemberInvites     OrgMemberInvite[]
  templates            Template[]
}

model OrgMemberInvite {
  id             String        @id @default(uuid())
  token          String        @unique
  email          String
  role           OrgMemberRole @default(MEMBER)
  organizationId String
  inviterId      String
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  inviter        User          @relation(fields: [inviterId], references: [id])
  organization   Organization  @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, email])
}

model Organization {
  id          String          @id @default(uuid())
  name        String
  logo        String?
  description String?
  createdAt   BigInt          @default(autoincrement())
  updatedAt   BigInt          @default(autoincrement())
  deletedAt   BigInt
  Project        Project[]
  members     OrgMember[]
  invites     OrgMemberInvite[]
  integrations Integration[]
}

model OrgMember {
  id             String        @id @default(uuid())
  organizationId String
  userId         String
  role           OrgMemberRole @default(MEMBER)
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  organization   Organization  @relation(fields: [organizationId], references: [id])
  user           User          @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
}

model Project {
  id              String        @id @default(uuid())
  name            String
  type            String
  data            Json
  organization    Organization  @relation(fields: [organizationId], references: [id])
  organizationId  String
  createdAt       BigInt        @default(autoincrement())
  updatedAt       BigInt        @default(autoincrement())
  deletedAt       BigInt?
  leadProject        LeadProject[]
  integrationId   String?
  integration     Integration?  @relation(fields: [integrationId], references: [id])
}

model LeadNotes {
  id        String @id @default(uuid())
  leadId    String
  data      String
  createdAt BigInt
  updatedAt BigInt
  deletedAt BigInt
  lead      Lead   @relation(fields: [leadId], references: [id])

  LeadActivity LeadActivity[]
}

model Lead {
  id              String        @id @default(uuid())
  shopifyDomain   String        @unique
  shopifyStoreId  String        @unique
  status           leadStatus   @default(POTENTIAL)
  Project            LeadProject[]
  leadSource      String?
  shopDetails     Json?
  industry        String?
  createdAt       BigInt        @default(autoincrement())
  updatedAt       BigInt        @default(autoincrement())
  deletedAt       BigInt
  leadActivities  LeadActivity[]
  leadNotes       LeadNotes[]
  contacts        Contact[]
  attachments     Attachment[]
}

enum leadStatus {
POTENTIAL
CUSTOMER
INTERESTED
NOT_INTERESTED
BAD_FIT
QUALIFIED
CANCELED
}
model LeadProject {
  id         String @id @default(uuid())
  leadId     String
  projectId      String
  lead       Lead   @relation(fields: [leadId], references: [id])
  project        Project   @relation(fields: [projectId], references: [id])
  createdAt  BigInt @default(autoincrement())
  updatedAt  BigInt @default(autoincrement())
  deletedAt  BigInt
  status     String?

    @@unique([projectId, leadId])

}

model Contact {
  id             String  @id @default(uuid())
  firstName      String?
  lastName       String?
  primaryEmail   String?
  secondaryEmail String?
  primaryPhNo    String?
  secondaryPhNo  String?
  industry       String?
  type           String?
  leadId         String?
  lastContacted  BigInt?
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  lead           Lead?   @relation(fields: [leadId], references: [id])
}

model Attachment {
  id             String @id @default(uuid())
  attachmentUrl  String
  attachmentType String
  eTag           String
  attachmentName String
  leadId         String
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
  lead           Lead   @relation(fields: [leadId], references: [id])
}

model LeadActivity {
  id        String           @id @default(uuid())
  leadId    String
  data      Json
  updatedAt BigInt
  createdAt BigInt
  deletedAt BigInt
  userId    String?
  noteId    String?
  type      String
  lead      Lead             @relation(fields: [leadId], references: [id])
  user      User?             @relation(fields: [userId], references: [id])
  note      LeadNotes?        @relation(fields: [noteId],references: [id])

  @@index([leadId, userId])
}

model Email {
  id             String  @id @default(uuid())
  subject        String?
  messageId      String
  hasAttachments Boolean
  unsubscribed   Boolean
  failed         Boolean
  skipped        Boolean
  opened         Boolean
  sent           Boolean
  time           BigInt
  cc             String?
  bcc            String?
  from           String
  to             String
  deletedAt      BigInt
  userId         String
}

model Integration {
  id             String       @id @default(uuid())
  organizationId String
  data           Json
  description    String?
  type           String?
  createdAt      BigInt
  updatedAt      BigInt
  deletedAt      BigInt
   Project           Project[]
   name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
 }

model Template {
  id        String @id @default(uuid())
  html      String
  createdAt BigInt
  updatedAt BigInt
  deletedAt BigInt
  userId    String
  user      User   @relation(fields: [userId], references: [id])
}

enum LeadActivityType {
  LEAD_CREATED
  LEAD_UPDATED
  NOTE_CREATED
  NOTE_UPDATED
  NOTE_DELETED
  EMAIL
  CALL
  TASK
  MEETING
  STATUS_CHANGE
}

enum AuthenticationMethod {
  GOOGLE
  MAGIC_LINK
}

enum OrgMemberRole {
  ADMIN
  MEMBER
}

enum AppVersion {
  V2
  V3
}
