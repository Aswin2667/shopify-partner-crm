import { Injectable } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import axios from 'axios';
import { PrismaService } from './prisma.service';
import {DateHelper} from '@org/utils'
@Injectable()
export class AppService {
  private readonly SHOPIFY_GRAPHQL_URL = 'https://partners.shopify.com/3767841/api/2024-10/graphql.json';
  private readonly ACCESS_TOKEN = 'prtapi_c37b0344cace141df5c89f694f4c15aa';
  private readonly APP_ID = 'gid://partners/App/146380521473';

  constructor(private readonly prismaService: PrismaService) {}

  @Cron(CronExpression.EVERY_5_SECONDS)
  async handleCron() {
    await this.fetchAndStoreData();
  }

  private async fetchAndStoreData() {
    const query = `
      query appInstallsAndUninstalls {
        app(id: "${this.APP_ID}") {
          id
          events(
            first: 100
            types: [RELATIONSHIP_INSTALLED, RELATIONSHIP_UNINSTALLED]
          ) {
            edges {
              node {
                ...installs
              }
              cursor
            }
            pageInfo {
              hasNextPage
            }
          }
        }
      }

      fragment installs on AppEvent {
        ... on RelationshipInstalled {
          shop {
            id
            myshopifyDomain
          }
          occurredAt
          type
        }
        ... on RelationshipUninstalled {
          type
          shop {
            id
            myshopifyDomain
          }
          reason
        }
      }
    `;

    try {
      let hasNextPage = true;
      let cursor = null;

      while (hasNextPage) {
        const response = await axios.post(
          this.SHOPIFY_GRAPHQL_URL,
          { query: query},
          { headers: { 'Content-Type': 'application/json', 'X-Shopify-Access-Token': this.ACCESS_TOKEN } },
        );

        const events = response.data.data?.app?.events?.edges || [];
        const pageInfo = response.data.data?.app?.events?.pageInfo || {};

        for (const edge of events) {
          const store = edge.node.shop;
          const storeType = edge.node.type; // Installed or Uninstalled

          const lead = await this.prismaService.lead.create({
            data: {
              shopifyDomain: store.myshopifyDomain,
              shopifyStoreId: store.id,
              leadSource: "by Ads",
              createdAt: DateHelper.getCurrentUnixTime(),
              updatedAt: 0,
              deletedAt: 0,
            }
          })

          console.log(lead)
          
        }

        hasNextPage = pageInfo.hasNextPage;
        cursor = events.length ? events[events.length - 1].cursor : null;
      }
    } catch (error) {
      console.error('Failed to fetch and store data:', error.message);
    }
  }
}







import { Injectable } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import axios from 'axios';

@Injectable()
export class AppService {
  private readonly SHOPIFY_GRAPHQL_URL = 'https://partners.shopify.com/3767841/api/2024-10/graphql.json';
  private readonly ACCESS_TOKEN = 'prtapi_c37b0344cace141df5c89f694f4c15aa';
  private readonly APP_ID = 'gid://partners/App/146380521473';

  private lastCursor: string | null = null;

  @Cron(CronExpression.EVERY_10_SECONDS)
  async handleCron() {
    await this.fetchAndLogStore();
  }

  private async fetchAndLogStore() {
    const query = `
      query appInstallsAndUninstalls {
        app(id: "${this.APP_ID}") {
          id
          events(
            first: 1
            types: [RELATIONSHIP_INSTALLED]
            after: ${this.lastCursor ? `"${this.lastCursor}"` : 'null'}
          ) {
            edges {
              node {
                ...installs
              }
              cursor
            }
          }
        }
      }

      fragment installs on AppEvent {
        ... on RelationshipInstalled {
          shop {
            id
            myshopifyDomain
          }
          occurredAt
          type
        }
      }
    `;

    try {
      const response = await axios.post(
        this.SHOPIFY_GRAPHQL_URL,
        { query },
        { headers: { 'Content-Type': 'application/json', 'X-Shopify-Access-Token': this.ACCESS_TOKEN } },
      );

      let events = response.data.data?.app?.events?.edges || [];

      // Sort events by occurredAt in ascending order
      events = events.sort((a, b) => new Date(a.node.occurredAt).getTime() - new Date(b.node.occurredAt).getTime());

      if (events.length > 0) {
        // Log each store in the sorted order
        for (const event of events) {
          const store = event.node.shop;
          // console.log(`Store ID: ${store.id}, Domain: ${store.myshopifyDomain}`);
          console.log(store);

          // Update the cursor to fetch the next batch in subsequent calls
          this.lastCursor = event.cursor;
        }
      } else {
        console.log('No new install events found');
      }
    } catch (error) {
      console.error('Failed to fetch and log store data:', error.message);
    }
  }
}
