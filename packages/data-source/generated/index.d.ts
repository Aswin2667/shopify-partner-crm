
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model OrgMemberInvite
 * 
 */
export type OrgMemberInvite = $Result.DefaultSelection<Prisma.$OrgMemberInvitePayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model OrgMember
 * 
 */
export type OrgMember = $Result.DefaultSelection<Prisma.$OrgMemberPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model LeadNotes
 * 
 */
export type LeadNotes = $Result.DefaultSelection<Prisma.$LeadNotesPayload>
/**
 * Model Lead
 * 
 */
export type Lead = $Result.DefaultSelection<Prisma.$LeadPayload>
/**
 * Model LeadProject
 * 
 */
export type LeadProject = $Result.DefaultSelection<Prisma.$LeadProjectPayload>
/**
 * Model Contact
 * 
 */
export type Contact = $Result.DefaultSelection<Prisma.$ContactPayload>
/**
 * Model Attachment
 * 
 */
export type Attachment = $Result.DefaultSelection<Prisma.$AttachmentPayload>
/**
 * Model LeadActivity
 * 
 */
export type LeadActivity = $Result.DefaultSelection<Prisma.$LeadActivityPayload>
/**
 * Model Email
 * 
 */
export type Email = $Result.DefaultSelection<Prisma.$EmailPayload>
/**
 * Model EmailQueue
 * 
 */
export type EmailQueue = $Result.DefaultSelection<Prisma.$EmailQueuePayload>
/**
 * Model Integration
 * 
 */
export type Integration = $Result.DefaultSelection<Prisma.$IntegrationPayload>
/**
 * Model MailServiceFromEmail
 * 
 */
export type MailServiceFromEmail = $Result.DefaultSelection<Prisma.$MailServiceFromEmailPayload>
/**
 * Model UnsubscribeLink
 * 
 */
export type UnsubscribeLink = $Result.DefaultSelection<Prisma.$UnsubscribeLinkPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Webhook
 * 
 */
export type Webhook = $Result.DefaultSelection<Prisma.$WebhookPayload>
/**
 * Model Template
 * 
 */
export type Template = $Result.DefaultSelection<Prisma.$TemplatePayload>
/**
 * Model LeadStatus
 * 
 */
export type LeadStatus = $Result.DefaultSelection<Prisma.$LeadStatusPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const AuthenticationMethod: {
  GOOGLE: 'GOOGLE',
  MAGIC_LINK: 'MAGIC_LINK'
};

export type AuthenticationMethod = (typeof AuthenticationMethod)[keyof typeof AuthenticationMethod]


export const OrgMemberRole: {
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

export type OrgMemberRole = (typeof OrgMemberRole)[keyof typeof OrgMemberRole]


export const LeadActivityType: {
  LEAD_CREATED: 'LEAD_CREATED',
  LEAD_UPDATED: 'LEAD_UPDATED',
  NOTE_CREATED: 'NOTE_CREATED',
  NOTE_UPDATED: 'NOTE_UPDATED',
  NOTE_DELETED: 'NOTE_DELETED',
  EMAIL: 'EMAIL',
  CALL: 'CALL',
  TASK: 'TASK',
  MEETING: 'MEETING',
  STATUS_CHANGE: 'STATUS_CHANGE',
  RELATIONSHIP_INSTALLED: 'RELATIONSHIP_INSTALLED',
  RELATIONSHIP_UNINSTALLED: 'RELATIONSHIP_UNINSTALLED',
  CREDIT_APPLIED: 'CREDIT_APPLIED',
  CREDIT_FAILED: 'CREDIT_FAILED',
  CREDIT_PENDING: 'CREDIT_PENDING',
  ONE_TIME_CHARGE_ACCEPTED: 'ONE_TIME_CHARGE_ACCEPTED',
  ONE_TIME_CHARGE_ACTIVATED: 'ONE_TIME_CHARGE_ACTIVATED',
  ONE_TIME_CHARGE_DECLINED: 'ONE_TIME_CHARGE_DECLINED',
  ONE_TIME_CHARGE_EXPIRED: 'ONE_TIME_CHARGE_EXPIRED',
  RELATIONSHIP_REACTIVATED: 'RELATIONSHIP_REACTIVATED',
  RELATIONSHIP_DEACTIVATED: 'RELATIONSHIP_DEACTIVATED',
  SUBSCRIPTION_APPROACHING_CAPPED_AMOUNT: 'SUBSCRIPTION_APPROACHING_CAPPED_AMOUNT',
  SUBSCRIPTION_CAPPED_AMOUNT_UPDATED: 'SUBSCRIPTION_CAPPED_AMOUNT_UPDATED',
  SUBSCRIPTION_CHARGE_ACCEPTED: 'SUBSCRIPTION_CHARGE_ACCEPTED',
  SUBSCRIPTION_CHARGE_ACTIVATED: 'SUBSCRIPTION_CHARGE_ACTIVATED',
  SUBSCRIPTION_CHARGE_CANCELED: 'SUBSCRIPTION_CHARGE_CANCELED',
  SUBSCRIPTION_CHARGE_DECLINED: 'SUBSCRIPTION_CHARGE_DECLINED',
  SUBSCRIPTION_CHARGE_EXPIRED: 'SUBSCRIPTION_CHARGE_EXPIRED',
  SUBSCRIPTION_CHARGE_FROZEN: 'SUBSCRIPTION_CHARGE_FROZEN',
  SUBSCRIPTION_CHARGE_UNFROZEN: 'SUBSCRIPTION_CHARGE_UNFROZEN'
};

export type LeadActivityType = (typeof LeadActivityType)[keyof typeof LeadActivityType]


export const EmailStatus: {
  SEND: 'SEND',
  SCHEDULE: 'SCHEDULE',
  FAILED: 'FAILED'
};

export type EmailStatus = (typeof EmailStatus)[keyof typeof EmailStatus]


export const IntegrationType: {
  GMAIL: 'GMAIL',
  SHOPIFY: 'SHOPIFY',
  MAIL_GUN: 'MAIL_GUN',
  SEND_GRID: 'SEND_GRID'
};

export type IntegrationType = (typeof IntegrationType)[keyof typeof IntegrationType]


export const QueueStatus: {
  PENDING: 'PENDING',
  SENT: 'SENT',
  FAILED: 'FAILED'
};

export type QueueStatus = (typeof QueueStatus)[keyof typeof QueueStatus]


export const IntegrationCategory: {
  ECOMMERCE: 'ECOMMERCE',
  MAIL_SERVICE: 'MAIL_SERVICE',
  OTHER: 'OTHER'
};

export type IntegrationCategory = (typeof IntegrationCategory)[keyof typeof IntegrationCategory]


export const IntegrationSharingType: {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE'
};

export type IntegrationSharingType = (typeof IntegrationSharingType)[keyof typeof IntegrationSharingType]


export const JobStatus: {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type JobStatus = (typeof JobStatus)[keyof typeof JobStatus]


export const TaskStatus: {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const WebhookType: {
  GMAIL_NEW_EMAIL: 'GMAIL_NEW_EMAIL',
  MAILGUN_EVENT: 'MAILGUN_EVENT',
  SENDGRID_EVENT: 'SENDGRID_EVENT'
};

export type WebhookType = (typeof WebhookType)[keyof typeof WebhookType]

}

export type AuthenticationMethod = $Enums.AuthenticationMethod

export const AuthenticationMethod: typeof $Enums.AuthenticationMethod

export type OrgMemberRole = $Enums.OrgMemberRole

export const OrgMemberRole: typeof $Enums.OrgMemberRole

export type LeadActivityType = $Enums.LeadActivityType

export const LeadActivityType: typeof $Enums.LeadActivityType

export type EmailStatus = $Enums.EmailStatus

export const EmailStatus: typeof $Enums.EmailStatus

export type IntegrationType = $Enums.IntegrationType

export const IntegrationType: typeof $Enums.IntegrationType

export type QueueStatus = $Enums.QueueStatus

export const QueueStatus: typeof $Enums.QueueStatus

export type IntegrationCategory = $Enums.IntegrationCategory

export const IntegrationCategory: typeof $Enums.IntegrationCategory

export type IntegrationSharingType = $Enums.IntegrationSharingType

export const IntegrationSharingType: typeof $Enums.IntegrationSharingType

export type JobStatus = $Enums.JobStatus

export const JobStatus: typeof $Enums.JobStatus

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type WebhookType = $Enums.WebhookType

export const WebhookType: typeof $Enums.WebhookType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.orgMemberInvite`: Exposes CRUD operations for the **OrgMemberInvite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrgMemberInvites
    * const orgMemberInvites = await prisma.orgMemberInvite.findMany()
    * ```
    */
  get orgMemberInvite(): Prisma.OrgMemberInviteDelegate<ExtArgs>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs>;

  /**
   * `prisma.orgMember`: Exposes CRUD operations for the **OrgMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrgMembers
    * const orgMembers = await prisma.orgMember.findMany()
    * ```
    */
  get orgMember(): Prisma.OrgMemberDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.leadNotes`: Exposes CRUD operations for the **LeadNotes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeadNotes
    * const leadNotes = await prisma.leadNotes.findMany()
    * ```
    */
  get leadNotes(): Prisma.LeadNotesDelegate<ExtArgs>;

  /**
   * `prisma.lead`: Exposes CRUD operations for the **Lead** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leads
    * const leads = await prisma.lead.findMany()
    * ```
    */
  get lead(): Prisma.LeadDelegate<ExtArgs>;

  /**
   * `prisma.leadProject`: Exposes CRUD operations for the **LeadProject** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeadProjects
    * const leadProjects = await prisma.leadProject.findMany()
    * ```
    */
  get leadProject(): Prisma.LeadProjectDelegate<ExtArgs>;

  /**
   * `prisma.contact`: Exposes CRUD operations for the **Contact** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contacts
    * const contacts = await prisma.contact.findMany()
    * ```
    */
  get contact(): Prisma.ContactDelegate<ExtArgs>;

  /**
   * `prisma.attachment`: Exposes CRUD operations for the **Attachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attachments
    * const attachments = await prisma.attachment.findMany()
    * ```
    */
  get attachment(): Prisma.AttachmentDelegate<ExtArgs>;

  /**
   * `prisma.leadActivity`: Exposes CRUD operations for the **LeadActivity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeadActivities
    * const leadActivities = await prisma.leadActivity.findMany()
    * ```
    */
  get leadActivity(): Prisma.LeadActivityDelegate<ExtArgs>;

  /**
   * `prisma.email`: Exposes CRUD operations for the **Email** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Emails
    * const emails = await prisma.email.findMany()
    * ```
    */
  get email(): Prisma.EmailDelegate<ExtArgs>;

  /**
   * `prisma.emailQueue`: Exposes CRUD operations for the **EmailQueue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EmailQueues
    * const emailQueues = await prisma.emailQueue.findMany()
    * ```
    */
  get emailQueue(): Prisma.EmailQueueDelegate<ExtArgs>;

  /**
   * `prisma.integration`: Exposes CRUD operations for the **Integration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Integrations
    * const integrations = await prisma.integration.findMany()
    * ```
    */
  get integration(): Prisma.IntegrationDelegate<ExtArgs>;

  /**
   * `prisma.mailServiceFromEmail`: Exposes CRUD operations for the **MailServiceFromEmail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MailServiceFromEmails
    * const mailServiceFromEmails = await prisma.mailServiceFromEmail.findMany()
    * ```
    */
  get mailServiceFromEmail(): Prisma.MailServiceFromEmailDelegate<ExtArgs>;

  /**
   * `prisma.unsubscribeLink`: Exposes CRUD operations for the **UnsubscribeLink** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UnsubscribeLinks
    * const unsubscribeLinks = await prisma.unsubscribeLink.findMany()
    * ```
    */
  get unsubscribeLink(): Prisma.UnsubscribeLinkDelegate<ExtArgs>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.webhook`: Exposes CRUD operations for the **Webhook** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Webhooks
    * const webhooks = await prisma.webhook.findMany()
    * ```
    */
  get webhook(): Prisma.WebhookDelegate<ExtArgs>;

  /**
   * `prisma.template`: Exposes CRUD operations for the **Template** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Templates
    * const templates = await prisma.template.findMany()
    * ```
    */
  get template(): Prisma.TemplateDelegate<ExtArgs>;

  /**
   * `prisma.leadStatus`: Exposes CRUD operations for the **LeadStatus** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LeadStatuses
    * const leadStatuses = await prisma.leadStatus.findMany()
    * ```
    */
  get leadStatus(): Prisma.LeadStatusDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.18.0
   * Query Engine version: 4c784e32044a8a016d99474bd02a3b6123742169
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    OrgMemberInvite: 'OrgMemberInvite',
    Organization: 'Organization',
    OrgMember: 'OrgMember',
    Project: 'Project',
    LeadNotes: 'LeadNotes',
    Lead: 'Lead',
    LeadProject: 'LeadProject',
    Contact: 'Contact',
    Attachment: 'Attachment',
    LeadActivity: 'LeadActivity',
    Email: 'Email',
    EmailQueue: 'EmailQueue',
    Integration: 'Integration',
    MailServiceFromEmail: 'MailServiceFromEmail',
    UnsubscribeLink: 'UnsubscribeLink',
    Job: 'Job',
    Task: 'Task',
    Webhook: 'Webhook',
    Template: 'Template',
    LeadStatus: 'LeadStatus'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "orgMemberInvite" | "organization" | "orgMember" | "project" | "leadNotes" | "lead" | "leadProject" | "contact" | "attachment" | "leadActivity" | "email" | "emailQueue" | "integration" | "mailServiceFromEmail" | "unsubscribeLink" | "job" | "task" | "webhook" | "template" | "leadStatus"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      OrgMemberInvite: {
        payload: Prisma.$OrgMemberInvitePayload<ExtArgs>
        fields: Prisma.OrgMemberInviteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrgMemberInviteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrgMemberInviteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload>
          }
          findFirst: {
            args: Prisma.OrgMemberInviteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrgMemberInviteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload>
          }
          findMany: {
            args: Prisma.OrgMemberInviteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload>[]
          }
          create: {
            args: Prisma.OrgMemberInviteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload>
          }
          createMany: {
            args: Prisma.OrgMemberInviteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrgMemberInviteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload>[]
          }
          delete: {
            args: Prisma.OrgMemberInviteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload>
          }
          update: {
            args: Prisma.OrgMemberInviteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload>
          }
          deleteMany: {
            args: Prisma.OrgMemberInviteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrgMemberInviteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrgMemberInviteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberInvitePayload>
          }
          aggregate: {
            args: Prisma.OrgMemberInviteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrgMemberInvite>
          }
          groupBy: {
            args: Prisma.OrgMemberInviteGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrgMemberInviteGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrgMemberInviteCountArgs<ExtArgs>
            result: $Utils.Optional<OrgMemberInviteCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      OrgMember: {
        payload: Prisma.$OrgMemberPayload<ExtArgs>
        fields: Prisma.OrgMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrgMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrgMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload>
          }
          findFirst: {
            args: Prisma.OrgMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrgMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload>
          }
          findMany: {
            args: Prisma.OrgMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload>[]
          }
          create: {
            args: Prisma.OrgMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload>
          }
          createMany: {
            args: Prisma.OrgMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrgMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload>[]
          }
          delete: {
            args: Prisma.OrgMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload>
          }
          update: {
            args: Prisma.OrgMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload>
          }
          deleteMany: {
            args: Prisma.OrgMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrgMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OrgMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrgMemberPayload>
          }
          aggregate: {
            args: Prisma.OrgMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrgMember>
          }
          groupBy: {
            args: Prisma.OrgMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrgMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrgMemberCountArgs<ExtArgs>
            result: $Utils.Optional<OrgMemberCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      LeadNotes: {
        payload: Prisma.$LeadNotesPayload<ExtArgs>
        fields: Prisma.LeadNotesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadNotesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadNotesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload>
          }
          findFirst: {
            args: Prisma.LeadNotesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadNotesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload>
          }
          findMany: {
            args: Prisma.LeadNotesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload>[]
          }
          create: {
            args: Prisma.LeadNotesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload>
          }
          createMany: {
            args: Prisma.LeadNotesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadNotesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload>[]
          }
          delete: {
            args: Prisma.LeadNotesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload>
          }
          update: {
            args: Prisma.LeadNotesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload>
          }
          deleteMany: {
            args: Prisma.LeadNotesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadNotesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeadNotesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadNotesPayload>
          }
          aggregate: {
            args: Prisma.LeadNotesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeadNotes>
          }
          groupBy: {
            args: Prisma.LeadNotesGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadNotesGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadNotesCountArgs<ExtArgs>
            result: $Utils.Optional<LeadNotesCountAggregateOutputType> | number
          }
        }
      }
      Lead: {
        payload: Prisma.$LeadPayload<ExtArgs>
        fields: Prisma.LeadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          findFirst: {
            args: Prisma.LeadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          findMany: {
            args: Prisma.LeadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          create: {
            args: Prisma.LeadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          createMany: {
            args: Prisma.LeadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>[]
          }
          delete: {
            args: Prisma.LeadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          update: {
            args: Prisma.LeadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          deleteMany: {
            args: Prisma.LeadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadPayload>
          }
          aggregate: {
            args: Prisma.LeadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLead>
          }
          groupBy: {
            args: Prisma.LeadGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadCountArgs<ExtArgs>
            result: $Utils.Optional<LeadCountAggregateOutputType> | number
          }
        }
      }
      LeadProject: {
        payload: Prisma.$LeadProjectPayload<ExtArgs>
        fields: Prisma.LeadProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload>
          }
          findFirst: {
            args: Prisma.LeadProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload>
          }
          findMany: {
            args: Prisma.LeadProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload>[]
          }
          create: {
            args: Prisma.LeadProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload>
          }
          createMany: {
            args: Prisma.LeadProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload>[]
          }
          delete: {
            args: Prisma.LeadProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload>
          }
          update: {
            args: Prisma.LeadProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload>
          }
          deleteMany: {
            args: Prisma.LeadProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeadProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadProjectPayload>
          }
          aggregate: {
            args: Prisma.LeadProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeadProject>
          }
          groupBy: {
            args: Prisma.LeadProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadProjectCountArgs<ExtArgs>
            result: $Utils.Optional<LeadProjectCountAggregateOutputType> | number
          }
        }
      }
      Contact: {
        payload: Prisma.$ContactPayload<ExtArgs>
        fields: Prisma.ContactFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ContactFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ContactFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findFirst: {
            args: Prisma.ContactFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ContactFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          findMany: {
            args: Prisma.ContactFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          create: {
            args: Prisma.ContactCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          createMany: {
            args: Prisma.ContactCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ContactCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>[]
          }
          delete: {
            args: Prisma.ContactDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          update: {
            args: Prisma.ContactUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          deleteMany: {
            args: Prisma.ContactDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ContactUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ContactUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ContactPayload>
          }
          aggregate: {
            args: Prisma.ContactAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateContact>
          }
          groupBy: {
            args: Prisma.ContactGroupByArgs<ExtArgs>
            result: $Utils.Optional<ContactGroupByOutputType>[]
          }
          count: {
            args: Prisma.ContactCountArgs<ExtArgs>
            result: $Utils.Optional<ContactCountAggregateOutputType> | number
          }
        }
      }
      Attachment: {
        payload: Prisma.$AttachmentPayload<ExtArgs>
        fields: Prisma.AttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AttachmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AttachmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findFirst: {
            args: Prisma.AttachmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AttachmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          findMany: {
            args: Prisma.AttachmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          create: {
            args: Prisma.AttachmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          createMany: {
            args: Prisma.AttachmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AttachmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>[]
          }
          delete: {
            args: Prisma.AttachmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          update: {
            args: Prisma.AttachmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          deleteMany: {
            args: Prisma.AttachmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AttachmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AttachmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AttachmentPayload>
          }
          aggregate: {
            args: Prisma.AttachmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttachment>
          }
          groupBy: {
            args: Prisma.AttachmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.AttachmentCountArgs<ExtArgs>
            result: $Utils.Optional<AttachmentCountAggregateOutputType> | number
          }
        }
      }
      LeadActivity: {
        payload: Prisma.$LeadActivityPayload<ExtArgs>
        fields: Prisma.LeadActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadActivityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadActivityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload>
          }
          findFirst: {
            args: Prisma.LeadActivityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadActivityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload>
          }
          findMany: {
            args: Prisma.LeadActivityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload>[]
          }
          create: {
            args: Prisma.LeadActivityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload>
          }
          createMany: {
            args: Prisma.LeadActivityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadActivityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload>[]
          }
          delete: {
            args: Prisma.LeadActivityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload>
          }
          update: {
            args: Prisma.LeadActivityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload>
          }
          deleteMany: {
            args: Prisma.LeadActivityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadActivityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeadActivityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadActivityPayload>
          }
          aggregate: {
            args: Prisma.LeadActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeadActivity>
          }
          groupBy: {
            args: Prisma.LeadActivityGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadActivityCountArgs<ExtArgs>
            result: $Utils.Optional<LeadActivityCountAggregateOutputType> | number
          }
        }
      }
      Email: {
        payload: Prisma.$EmailPayload<ExtArgs>
        fields: Prisma.EmailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          findFirst: {
            args: Prisma.EmailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          findMany: {
            args: Prisma.EmailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>[]
          }
          create: {
            args: Prisma.EmailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          createMany: {
            args: Prisma.EmailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>[]
          }
          delete: {
            args: Prisma.EmailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          update: {
            args: Prisma.EmailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          deleteMany: {
            args: Prisma.EmailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailPayload>
          }
          aggregate: {
            args: Prisma.EmailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmail>
          }
          groupBy: {
            args: Prisma.EmailGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailCountArgs<ExtArgs>
            result: $Utils.Optional<EmailCountAggregateOutputType> | number
          }
        }
      }
      EmailQueue: {
        payload: Prisma.$EmailQueuePayload<ExtArgs>
        fields: Prisma.EmailQueueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EmailQueueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EmailQueueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload>
          }
          findFirst: {
            args: Prisma.EmailQueueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EmailQueueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload>
          }
          findMany: {
            args: Prisma.EmailQueueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload>[]
          }
          create: {
            args: Prisma.EmailQueueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload>
          }
          createMany: {
            args: Prisma.EmailQueueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EmailQueueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload>[]
          }
          delete: {
            args: Prisma.EmailQueueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload>
          }
          update: {
            args: Prisma.EmailQueueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload>
          }
          deleteMany: {
            args: Prisma.EmailQueueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EmailQueueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EmailQueueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EmailQueuePayload>
          }
          aggregate: {
            args: Prisma.EmailQueueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEmailQueue>
          }
          groupBy: {
            args: Prisma.EmailQueueGroupByArgs<ExtArgs>
            result: $Utils.Optional<EmailQueueGroupByOutputType>[]
          }
          count: {
            args: Prisma.EmailQueueCountArgs<ExtArgs>
            result: $Utils.Optional<EmailQueueCountAggregateOutputType> | number
          }
        }
      }
      Integration: {
        payload: Prisma.$IntegrationPayload<ExtArgs>
        fields: Prisma.IntegrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntegrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntegrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          findFirst: {
            args: Prisma.IntegrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntegrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          findMany: {
            args: Prisma.IntegrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>[]
          }
          create: {
            args: Prisma.IntegrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          createMany: {
            args: Prisma.IntegrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IntegrationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>[]
          }
          delete: {
            args: Prisma.IntegrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          update: {
            args: Prisma.IntegrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          deleteMany: {
            args: Prisma.IntegrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntegrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.IntegrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntegrationPayload>
          }
          aggregate: {
            args: Prisma.IntegrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntegration>
          }
          groupBy: {
            args: Prisma.IntegrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntegrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntegrationCountArgs<ExtArgs>
            result: $Utils.Optional<IntegrationCountAggregateOutputType> | number
          }
        }
      }
      MailServiceFromEmail: {
        payload: Prisma.$MailServiceFromEmailPayload<ExtArgs>
        fields: Prisma.MailServiceFromEmailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MailServiceFromEmailFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MailServiceFromEmailFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload>
          }
          findFirst: {
            args: Prisma.MailServiceFromEmailFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MailServiceFromEmailFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload>
          }
          findMany: {
            args: Prisma.MailServiceFromEmailFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload>[]
          }
          create: {
            args: Prisma.MailServiceFromEmailCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload>
          }
          createMany: {
            args: Prisma.MailServiceFromEmailCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MailServiceFromEmailCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload>[]
          }
          delete: {
            args: Prisma.MailServiceFromEmailDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload>
          }
          update: {
            args: Prisma.MailServiceFromEmailUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload>
          }
          deleteMany: {
            args: Prisma.MailServiceFromEmailDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MailServiceFromEmailUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MailServiceFromEmailUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MailServiceFromEmailPayload>
          }
          aggregate: {
            args: Prisma.MailServiceFromEmailAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMailServiceFromEmail>
          }
          groupBy: {
            args: Prisma.MailServiceFromEmailGroupByArgs<ExtArgs>
            result: $Utils.Optional<MailServiceFromEmailGroupByOutputType>[]
          }
          count: {
            args: Prisma.MailServiceFromEmailCountArgs<ExtArgs>
            result: $Utils.Optional<MailServiceFromEmailCountAggregateOutputType> | number
          }
        }
      }
      UnsubscribeLink: {
        payload: Prisma.$UnsubscribeLinkPayload<ExtArgs>
        fields: Prisma.UnsubscribeLinkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UnsubscribeLinkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UnsubscribeLinkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload>
          }
          findFirst: {
            args: Prisma.UnsubscribeLinkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UnsubscribeLinkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload>
          }
          findMany: {
            args: Prisma.UnsubscribeLinkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload>[]
          }
          create: {
            args: Prisma.UnsubscribeLinkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload>
          }
          createMany: {
            args: Prisma.UnsubscribeLinkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UnsubscribeLinkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload>[]
          }
          delete: {
            args: Prisma.UnsubscribeLinkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload>
          }
          update: {
            args: Prisma.UnsubscribeLinkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload>
          }
          deleteMany: {
            args: Prisma.UnsubscribeLinkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UnsubscribeLinkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UnsubscribeLinkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UnsubscribeLinkPayload>
          }
          aggregate: {
            args: Prisma.UnsubscribeLinkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUnsubscribeLink>
          }
          groupBy: {
            args: Prisma.UnsubscribeLinkGroupByArgs<ExtArgs>
            result: $Utils.Optional<UnsubscribeLinkGroupByOutputType>[]
          }
          count: {
            args: Prisma.UnsubscribeLinkCountArgs<ExtArgs>
            result: $Utils.Optional<UnsubscribeLinkCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Webhook: {
        payload: Prisma.$WebhookPayload<ExtArgs>
        fields: Prisma.WebhookFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebhookFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebhookFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          findFirst: {
            args: Prisma.WebhookFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebhookFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          findMany: {
            args: Prisma.WebhookFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>[]
          }
          create: {
            args: Prisma.WebhookCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          createMany: {
            args: Prisma.WebhookCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebhookCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>[]
          }
          delete: {
            args: Prisma.WebhookDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          update: {
            args: Prisma.WebhookUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          deleteMany: {
            args: Prisma.WebhookDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebhookUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WebhookUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebhookPayload>
          }
          aggregate: {
            args: Prisma.WebhookAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebhook>
          }
          groupBy: {
            args: Prisma.WebhookGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebhookGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebhookCountArgs<ExtArgs>
            result: $Utils.Optional<WebhookCountAggregateOutputType> | number
          }
        }
      }
      Template: {
        payload: Prisma.$TemplatePayload<ExtArgs>
        fields: Prisma.TemplateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TemplateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TemplateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          findFirst: {
            args: Prisma.TemplateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TemplateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          findMany: {
            args: Prisma.TemplateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>[]
          }
          create: {
            args: Prisma.TemplateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          createMany: {
            args: Prisma.TemplateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TemplateCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>[]
          }
          delete: {
            args: Prisma.TemplateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          update: {
            args: Prisma.TemplateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          deleteMany: {
            args: Prisma.TemplateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TemplateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TemplateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TemplatePayload>
          }
          aggregate: {
            args: Prisma.TemplateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTemplate>
          }
          groupBy: {
            args: Prisma.TemplateGroupByArgs<ExtArgs>
            result: $Utils.Optional<TemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.TemplateCountArgs<ExtArgs>
            result: $Utils.Optional<TemplateCountAggregateOutputType> | number
          }
        }
      }
      LeadStatus: {
        payload: Prisma.$LeadStatusPayload<ExtArgs>
        fields: Prisma.LeadStatusFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeadStatusFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeadStatusFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload>
          }
          findFirst: {
            args: Prisma.LeadStatusFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeadStatusFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload>
          }
          findMany: {
            args: Prisma.LeadStatusFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload>[]
          }
          create: {
            args: Prisma.LeadStatusCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload>
          }
          createMany: {
            args: Prisma.LeadStatusCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeadStatusCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload>[]
          }
          delete: {
            args: Prisma.LeadStatusDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload>
          }
          update: {
            args: Prisma.LeadStatusUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload>
          }
          deleteMany: {
            args: Prisma.LeadStatusDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeadStatusUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LeadStatusUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeadStatusPayload>
          }
          aggregate: {
            args: Prisma.LeadStatusAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeadStatus>
          }
          groupBy: {
            args: Prisma.LeadStatusGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeadStatusGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeadStatusCountArgs<ExtArgs>
            result: $Utils.Optional<LeadStatusCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    LeadActivity: number
    orgMembers: number
    orgMemberInvites: number
    templates: number
    LeadNotes: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    LeadActivity?: boolean | UserCountOutputTypeCountLeadActivityArgs
    orgMembers?: boolean | UserCountOutputTypeCountOrgMembersArgs
    orgMemberInvites?: boolean | UserCountOutputTypeCountOrgMemberInvitesArgs
    templates?: boolean | UserCountOutputTypeCountTemplatesArgs
    LeadNotes?: boolean | UserCountOutputTypeCountLeadNotesArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLeadActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadActivityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrgMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrgMemberInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgMemberInviteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTemplatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLeadNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadNotesWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    Project: number
    members: number
    invites: number
    integrations: number
    Lead: number
    contact: number
    Template: number
    LeadStatus: number
    webhooks: number
    Email: number
    MailServiceFromEmail: number
    LeadProject: number
    LeadActivity: number
    UnsubscribeLink: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Project?: boolean | OrganizationCountOutputTypeCountProjectArgs
    members?: boolean | OrganizationCountOutputTypeCountMembersArgs
    invites?: boolean | OrganizationCountOutputTypeCountInvitesArgs
    integrations?: boolean | OrganizationCountOutputTypeCountIntegrationsArgs
    Lead?: boolean | OrganizationCountOutputTypeCountLeadArgs
    contact?: boolean | OrganizationCountOutputTypeCountContactArgs
    Template?: boolean | OrganizationCountOutputTypeCountTemplateArgs
    LeadStatus?: boolean | OrganizationCountOutputTypeCountLeadStatusArgs
    webhooks?: boolean | OrganizationCountOutputTypeCountWebhooksArgs
    Email?: boolean | OrganizationCountOutputTypeCountEmailArgs
    MailServiceFromEmail?: boolean | OrganizationCountOutputTypeCountMailServiceFromEmailArgs
    LeadProject?: boolean | OrganizationCountOutputTypeCountLeadProjectArgs
    LeadActivity?: boolean | OrganizationCountOutputTypeCountLeadActivityArgs
    UnsubscribeLink?: boolean | OrganizationCountOutputTypeCountUnsubscribeLinkArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgMemberWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgMemberInviteWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountIntegrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountLeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountTemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountLeadStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadStatusWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountWebhooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountMailServiceFromEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MailServiceFromEmailWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountLeadProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadProjectWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountLeadActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadActivityWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUnsubscribeLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnsubscribeLinkWhereInput
  }


  /**
   * Count Type OrgMemberCountOutputType
   */

  export type OrgMemberCountOutputType = {
    Integration: number
  }

  export type OrgMemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Integration?: boolean | OrgMemberCountOutputTypeCountIntegrationArgs
  }

  // Custom InputTypes
  /**
   * OrgMemberCountOutputType without action
   */
  export type OrgMemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberCountOutputType
     */
    select?: OrgMemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrgMemberCountOutputType without action
   */
  export type OrgMemberCountOutputTypeCountIntegrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    leadProject: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    leadProject?: boolean | ProjectCountOutputTypeCountLeadProjectArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountLeadProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadProjectWhereInput
  }


  /**
   * Count Type LeadNotesCountOutputType
   */

  export type LeadNotesCountOutputType = {
    LeadActivity: number
  }

  export type LeadNotesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    LeadActivity?: boolean | LeadNotesCountOutputTypeCountLeadActivityArgs
  }

  // Custom InputTypes
  /**
   * LeadNotesCountOutputType without action
   */
  export type LeadNotesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotesCountOutputType
     */
    select?: LeadNotesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeadNotesCountOutputType without action
   */
  export type LeadNotesCountOutputTypeCountLeadActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadActivityWhereInput
  }


  /**
   * Count Type LeadCountOutputType
   */

  export type LeadCountOutputType = {
    Project: number
    leadActivities: number
    leadNotes: number
    contacts: number
    attachments: number
    Email: number
  }

  export type LeadCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Project?: boolean | LeadCountOutputTypeCountProjectArgs
    leadActivities?: boolean | LeadCountOutputTypeCountLeadActivitiesArgs
    leadNotes?: boolean | LeadCountOutputTypeCountLeadNotesArgs
    contacts?: boolean | LeadCountOutputTypeCountContactsArgs
    attachments?: boolean | LeadCountOutputTypeCountAttachmentsArgs
    Email?: boolean | LeadCountOutputTypeCountEmailArgs
  }

  // Custom InputTypes
  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadCountOutputType
     */
    select?: LeadCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeCountProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadProjectWhereInput
  }

  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeCountLeadActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadActivityWhereInput
  }

  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeCountLeadNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadNotesWhereInput
  }

  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeCountContactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
  }

  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeCountAttachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
  }

  /**
   * LeadCountOutputType without action
   */
  export type LeadCountOutputTypeCountEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailWhereInput
  }


  /**
   * Count Type ContactCountOutputType
   */

  export type ContactCountOutputType = {
    Email: number
  }

  export type ContactCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Email?: boolean | ContactCountOutputTypeCountEmailArgs
  }

  // Custom InputTypes
  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ContactCountOutputType
     */
    select?: ContactCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ContactCountOutputType without action
   */
  export type ContactCountOutputTypeCountEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailWhereInput
  }


  /**
   * Count Type EmailCountOutputType
   */

  export type EmailCountOutputType = {
    EmailQueue: number
  }

  export type EmailCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    EmailQueue?: boolean | EmailCountOutputTypeCountEmailQueueArgs
  }

  // Custom InputTypes
  /**
   * EmailCountOutputType without action
   */
  export type EmailCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailCountOutputType
     */
    select?: EmailCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EmailCountOutputType without action
   */
  export type EmailCountOutputTypeCountEmailQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailQueueWhereInput
  }


  /**
   * Count Type IntegrationCountOutputType
   */

  export type IntegrationCountOutputType = {
    Project: number
    Lead: number
    LeadProject: number
    Jobs: number
    mailServiceFromEmail: number
  }

  export type IntegrationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Project?: boolean | IntegrationCountOutputTypeCountProjectArgs
    Lead?: boolean | IntegrationCountOutputTypeCountLeadArgs
    LeadProject?: boolean | IntegrationCountOutputTypeCountLeadProjectArgs
    Jobs?: boolean | IntegrationCountOutputTypeCountJobsArgs
    mailServiceFromEmail?: boolean | IntegrationCountOutputTypeCountMailServiceFromEmailArgs
  }

  // Custom InputTypes
  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntegrationCountOutputType
     */
    select?: IntegrationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeCountProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeCountLeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWhereInput
  }

  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeCountLeadProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadProjectWhereInput
  }

  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeCountJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
  }

  /**
   * IntegrationCountOutputType without action
   */
  export type IntegrationCountOutputTypeCountMailServiceFromEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MailServiceFromEmailWhereInput
  }


  /**
   * Count Type JobCountOutputType
   */

  export type JobCountOutputType = {
    tasks: number
  }

  export type JobCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tasks?: boolean | JobCountOutputTypeCountTasksArgs
  }

  // Custom InputTypes
  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JobCountOutputType
     */
    select?: JobCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JobCountOutputType without action
   */
  export type JobCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }


  /**
   * Count Type LeadStatusCountOutputType
   */

  export type LeadStatusCountOutputType = {
    Lead: number
  }

  export type LeadStatusCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Lead?: boolean | LeadStatusCountOutputTypeCountLeadArgs
  }

  // Custom InputTypes
  /**
   * LeadStatusCountOutputType without action
   */
  export type LeadStatusCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatusCountOutputType
     */
    select?: LeadStatusCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeadStatusCountOutputType without action
   */
  export type LeadStatusCountOutputTypeCountLeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type UserSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    authenticationMethod: $Enums.AuthenticationMethod | null
    name: string | null
    avatarUrl: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    authenticationMethod: $Enums.AuthenticationMethod | null
    name: string | null
    avatarUrl: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    authenticationMethod: number
    name: number
    avatarUrl: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    authenticationMethod?: true
    name?: true
    avatarUrl?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    authenticationMethod?: true
    name?: true
    avatarUrl?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    authenticationMethod?: true
    name?: true
    avatarUrl?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name: string | null
    avatarUrl: string | null
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    authenticationMethod?: boolean
    name?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    LeadActivity?: boolean | User$LeadActivityArgs<ExtArgs>
    orgMembers?: boolean | User$orgMembersArgs<ExtArgs>
    orgMemberInvites?: boolean | User$orgMemberInvitesArgs<ExtArgs>
    templates?: boolean | User$templatesArgs<ExtArgs>
    LeadNotes?: boolean | User$LeadNotesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    authenticationMethod?: boolean
    name?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    authenticationMethod?: boolean
    name?: boolean
    avatarUrl?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    LeadActivity?: boolean | User$LeadActivityArgs<ExtArgs>
    orgMembers?: boolean | User$orgMembersArgs<ExtArgs>
    orgMemberInvites?: boolean | User$orgMemberInvitesArgs<ExtArgs>
    templates?: boolean | User$templatesArgs<ExtArgs>
    LeadNotes?: boolean | User$LeadNotesArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      LeadActivity: Prisma.$LeadActivityPayload<ExtArgs>[]
      orgMembers: Prisma.$OrgMemberPayload<ExtArgs>[]
      orgMemberInvites: Prisma.$OrgMemberInvitePayload<ExtArgs>[]
      templates: Prisma.$TemplatePayload<ExtArgs>[]
      LeadNotes: Prisma.$LeadNotesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      authenticationMethod: $Enums.AuthenticationMethod
      name: string | null
      avatarUrl: string | null
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    LeadActivity<T extends User$LeadActivityArgs<ExtArgs> = {}>(args?: Subset<T, User$LeadActivityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findMany"> | Null>
    orgMembers<T extends User$orgMembersArgs<ExtArgs> = {}>(args?: Subset<T, User$orgMembersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "findMany"> | Null>
    orgMemberInvites<T extends User$orgMemberInvitesArgs<ExtArgs> = {}>(args?: Subset<T, User$orgMemberInvitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "findMany"> | Null>
    templates<T extends User$templatesArgs<ExtArgs> = {}>(args?: Subset<T, User$templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findMany"> | Null>
    LeadNotes<T extends User$LeadNotesArgs<ExtArgs> = {}>(args?: Subset<T, User$LeadNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly authenticationMethod: FieldRef<"User", 'AuthenticationMethod'>
    readonly name: FieldRef<"User", 'String'>
    readonly avatarUrl: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'BigInt'>
    readonly updatedAt: FieldRef<"User", 'BigInt'>
    readonly deletedAt: FieldRef<"User", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.LeadActivity
   */
  export type User$LeadActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    where?: LeadActivityWhereInput
    orderBy?: LeadActivityOrderByWithRelationInput | LeadActivityOrderByWithRelationInput[]
    cursor?: LeadActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadActivityScalarFieldEnum | LeadActivityScalarFieldEnum[]
  }

  /**
   * User.orgMembers
   */
  export type User$orgMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    where?: OrgMemberWhereInput
    orderBy?: OrgMemberOrderByWithRelationInput | OrgMemberOrderByWithRelationInput[]
    cursor?: OrgMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrgMemberScalarFieldEnum | OrgMemberScalarFieldEnum[]
  }

  /**
   * User.orgMemberInvites
   */
  export type User$orgMemberInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    where?: OrgMemberInviteWhereInput
    orderBy?: OrgMemberInviteOrderByWithRelationInput | OrgMemberInviteOrderByWithRelationInput[]
    cursor?: OrgMemberInviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrgMemberInviteScalarFieldEnum | OrgMemberInviteScalarFieldEnum[]
  }

  /**
   * User.templates
   */
  export type User$templatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    where?: TemplateWhereInput
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    cursor?: TemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * User.LeadNotes
   */
  export type User$LeadNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    where?: LeadNotesWhereInput
    orderBy?: LeadNotesOrderByWithRelationInput | LeadNotesOrderByWithRelationInput[]
    cursor?: LeadNotesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadNotesScalarFieldEnum | LeadNotesScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model OrgMemberInvite
   */

  export type AggregateOrgMemberInvite = {
    _count: OrgMemberInviteCountAggregateOutputType | null
    _avg: OrgMemberInviteAvgAggregateOutputType | null
    _sum: OrgMemberInviteSumAggregateOutputType | null
    _min: OrgMemberInviteMinAggregateOutputType | null
    _max: OrgMemberInviteMaxAggregateOutputType | null
  }

  export type OrgMemberInviteAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type OrgMemberInviteSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type OrgMemberInviteMinAggregateOutputType = {
    id: string | null
    token: string | null
    email: string | null
    role: $Enums.OrgMemberRole | null
    organizationId: string | null
    inviterId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type OrgMemberInviteMaxAggregateOutputType = {
    id: string | null
    token: string | null
    email: string | null
    role: $Enums.OrgMemberRole | null
    organizationId: string | null
    inviterId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type OrgMemberInviteCountAggregateOutputType = {
    id: number
    token: number
    email: number
    role: number
    organizationId: number
    inviterId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type OrgMemberInviteAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrgMemberInviteSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrgMemberInviteMinAggregateInputType = {
    id?: true
    token?: true
    email?: true
    role?: true
    organizationId?: true
    inviterId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrgMemberInviteMaxAggregateInputType = {
    id?: true
    token?: true
    email?: true
    role?: true
    organizationId?: true
    inviterId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrgMemberInviteCountAggregateInputType = {
    id?: true
    token?: true
    email?: true
    role?: true
    organizationId?: true
    inviterId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type OrgMemberInviteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrgMemberInvite to aggregate.
     */
    where?: OrgMemberInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMemberInvites to fetch.
     */
    orderBy?: OrgMemberInviteOrderByWithRelationInput | OrgMemberInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrgMemberInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMemberInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMemberInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrgMemberInvites
    **/
    _count?: true | OrgMemberInviteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrgMemberInviteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrgMemberInviteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrgMemberInviteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrgMemberInviteMaxAggregateInputType
  }

  export type GetOrgMemberInviteAggregateType<T extends OrgMemberInviteAggregateArgs> = {
        [P in keyof T & keyof AggregateOrgMemberInvite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrgMemberInvite[P]>
      : GetScalarType<T[P], AggregateOrgMemberInvite[P]>
  }




  export type OrgMemberInviteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgMemberInviteWhereInput
    orderBy?: OrgMemberInviteOrderByWithAggregationInput | OrgMemberInviteOrderByWithAggregationInput[]
    by: OrgMemberInviteScalarFieldEnum[] | OrgMemberInviteScalarFieldEnum
    having?: OrgMemberInviteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrgMemberInviteCountAggregateInputType | true
    _avg?: OrgMemberInviteAvgAggregateInputType
    _sum?: OrgMemberInviteSumAggregateInputType
    _min?: OrgMemberInviteMinAggregateInputType
    _max?: OrgMemberInviteMaxAggregateInputType
  }

  export type OrgMemberInviteGroupByOutputType = {
    id: string
    token: string
    email: string
    role: $Enums.OrgMemberRole
    organizationId: string
    inviterId: string
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint
    _count: OrgMemberInviteCountAggregateOutputType | null
    _avg: OrgMemberInviteAvgAggregateOutputType | null
    _sum: OrgMemberInviteSumAggregateOutputType | null
    _min: OrgMemberInviteMinAggregateOutputType | null
    _max: OrgMemberInviteMaxAggregateOutputType | null
  }

  type GetOrgMemberInviteGroupByPayload<T extends OrgMemberInviteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrgMemberInviteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrgMemberInviteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrgMemberInviteGroupByOutputType[P]>
            : GetScalarType<T[P], OrgMemberInviteGroupByOutputType[P]>
        }
      >
    >


  export type OrgMemberInviteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    email?: boolean
    role?: boolean
    organizationId?: boolean
    inviterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    inviter?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orgMemberInvite"]>

  export type OrgMemberInviteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    token?: boolean
    email?: boolean
    role?: boolean
    organizationId?: boolean
    inviterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    inviter?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orgMemberInvite"]>

  export type OrgMemberInviteSelectScalar = {
    id?: boolean
    token?: boolean
    email?: boolean
    role?: boolean
    organizationId?: boolean
    inviterId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type OrgMemberInviteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inviter?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type OrgMemberInviteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inviter?: boolean | UserDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $OrgMemberInvitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrgMemberInvite"
    objects: {
      inviter: Prisma.$UserPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      token: string
      email: string
      role: $Enums.OrgMemberRole
      organizationId: string
      inviterId: string
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint
    }, ExtArgs["result"]["orgMemberInvite"]>
    composites: {}
  }

  type OrgMemberInviteGetPayload<S extends boolean | null | undefined | OrgMemberInviteDefaultArgs> = $Result.GetResult<Prisma.$OrgMemberInvitePayload, S>

  type OrgMemberInviteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrgMemberInviteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrgMemberInviteCountAggregateInputType | true
    }

  export interface OrgMemberInviteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrgMemberInvite'], meta: { name: 'OrgMemberInvite' } }
    /**
     * Find zero or one OrgMemberInvite that matches the filter.
     * @param {OrgMemberInviteFindUniqueArgs} args - Arguments to find a OrgMemberInvite
     * @example
     * // Get one OrgMemberInvite
     * const orgMemberInvite = await prisma.orgMemberInvite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrgMemberInviteFindUniqueArgs>(args: SelectSubset<T, OrgMemberInviteFindUniqueArgs<ExtArgs>>): Prisma__OrgMemberInviteClient<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OrgMemberInvite that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrgMemberInviteFindUniqueOrThrowArgs} args - Arguments to find a OrgMemberInvite
     * @example
     * // Get one OrgMemberInvite
     * const orgMemberInvite = await prisma.orgMemberInvite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrgMemberInviteFindUniqueOrThrowArgs>(args: SelectSubset<T, OrgMemberInviteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrgMemberInviteClient<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OrgMemberInvite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberInviteFindFirstArgs} args - Arguments to find a OrgMemberInvite
     * @example
     * // Get one OrgMemberInvite
     * const orgMemberInvite = await prisma.orgMemberInvite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrgMemberInviteFindFirstArgs>(args?: SelectSubset<T, OrgMemberInviteFindFirstArgs<ExtArgs>>): Prisma__OrgMemberInviteClient<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OrgMemberInvite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberInviteFindFirstOrThrowArgs} args - Arguments to find a OrgMemberInvite
     * @example
     * // Get one OrgMemberInvite
     * const orgMemberInvite = await prisma.orgMemberInvite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrgMemberInviteFindFirstOrThrowArgs>(args?: SelectSubset<T, OrgMemberInviteFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrgMemberInviteClient<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OrgMemberInvites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberInviteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrgMemberInvites
     * const orgMemberInvites = await prisma.orgMemberInvite.findMany()
     * 
     * // Get first 10 OrgMemberInvites
     * const orgMemberInvites = await prisma.orgMemberInvite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orgMemberInviteWithIdOnly = await prisma.orgMemberInvite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrgMemberInviteFindManyArgs>(args?: SelectSubset<T, OrgMemberInviteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OrgMemberInvite.
     * @param {OrgMemberInviteCreateArgs} args - Arguments to create a OrgMemberInvite.
     * @example
     * // Create one OrgMemberInvite
     * const OrgMemberInvite = await prisma.orgMemberInvite.create({
     *   data: {
     *     // ... data to create a OrgMemberInvite
     *   }
     * })
     * 
     */
    create<T extends OrgMemberInviteCreateArgs>(args: SelectSubset<T, OrgMemberInviteCreateArgs<ExtArgs>>): Prisma__OrgMemberInviteClient<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OrgMemberInvites.
     * @param {OrgMemberInviteCreateManyArgs} args - Arguments to create many OrgMemberInvites.
     * @example
     * // Create many OrgMemberInvites
     * const orgMemberInvite = await prisma.orgMemberInvite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrgMemberInviteCreateManyArgs>(args?: SelectSubset<T, OrgMemberInviteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrgMemberInvites and returns the data saved in the database.
     * @param {OrgMemberInviteCreateManyAndReturnArgs} args - Arguments to create many OrgMemberInvites.
     * @example
     * // Create many OrgMemberInvites
     * const orgMemberInvite = await prisma.orgMemberInvite.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrgMemberInvites and only return the `id`
     * const orgMemberInviteWithIdOnly = await prisma.orgMemberInvite.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrgMemberInviteCreateManyAndReturnArgs>(args?: SelectSubset<T, OrgMemberInviteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OrgMemberInvite.
     * @param {OrgMemberInviteDeleteArgs} args - Arguments to delete one OrgMemberInvite.
     * @example
     * // Delete one OrgMemberInvite
     * const OrgMemberInvite = await prisma.orgMemberInvite.delete({
     *   where: {
     *     // ... filter to delete one OrgMemberInvite
     *   }
     * })
     * 
     */
    delete<T extends OrgMemberInviteDeleteArgs>(args: SelectSubset<T, OrgMemberInviteDeleteArgs<ExtArgs>>): Prisma__OrgMemberInviteClient<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OrgMemberInvite.
     * @param {OrgMemberInviteUpdateArgs} args - Arguments to update one OrgMemberInvite.
     * @example
     * // Update one OrgMemberInvite
     * const orgMemberInvite = await prisma.orgMemberInvite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrgMemberInviteUpdateArgs>(args: SelectSubset<T, OrgMemberInviteUpdateArgs<ExtArgs>>): Prisma__OrgMemberInviteClient<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OrgMemberInvites.
     * @param {OrgMemberInviteDeleteManyArgs} args - Arguments to filter OrgMemberInvites to delete.
     * @example
     * // Delete a few OrgMemberInvites
     * const { count } = await prisma.orgMemberInvite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrgMemberInviteDeleteManyArgs>(args?: SelectSubset<T, OrgMemberInviteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrgMemberInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberInviteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrgMemberInvites
     * const orgMemberInvite = await prisma.orgMemberInvite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrgMemberInviteUpdateManyArgs>(args: SelectSubset<T, OrgMemberInviteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrgMemberInvite.
     * @param {OrgMemberInviteUpsertArgs} args - Arguments to update or create a OrgMemberInvite.
     * @example
     * // Update or create a OrgMemberInvite
     * const orgMemberInvite = await prisma.orgMemberInvite.upsert({
     *   create: {
     *     // ... data to create a OrgMemberInvite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrgMemberInvite we want to update
     *   }
     * })
     */
    upsert<T extends OrgMemberInviteUpsertArgs>(args: SelectSubset<T, OrgMemberInviteUpsertArgs<ExtArgs>>): Prisma__OrgMemberInviteClient<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OrgMemberInvites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberInviteCountArgs} args - Arguments to filter OrgMemberInvites to count.
     * @example
     * // Count the number of OrgMemberInvites
     * const count = await prisma.orgMemberInvite.count({
     *   where: {
     *     // ... the filter for the OrgMemberInvites we want to count
     *   }
     * })
    **/
    count<T extends OrgMemberInviteCountArgs>(
      args?: Subset<T, OrgMemberInviteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrgMemberInviteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrgMemberInvite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberInviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrgMemberInviteAggregateArgs>(args: Subset<T, OrgMemberInviteAggregateArgs>): Prisma.PrismaPromise<GetOrgMemberInviteAggregateType<T>>

    /**
     * Group by OrgMemberInvite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberInviteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrgMemberInviteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrgMemberInviteGroupByArgs['orderBy'] }
        : { orderBy?: OrgMemberInviteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrgMemberInviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrgMemberInviteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrgMemberInvite model
   */
  readonly fields: OrgMemberInviteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrgMemberInvite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrgMemberInviteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    inviter<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrgMemberInvite model
   */ 
  interface OrgMemberInviteFieldRefs {
    readonly id: FieldRef<"OrgMemberInvite", 'String'>
    readonly token: FieldRef<"OrgMemberInvite", 'String'>
    readonly email: FieldRef<"OrgMemberInvite", 'String'>
    readonly role: FieldRef<"OrgMemberInvite", 'OrgMemberRole'>
    readonly organizationId: FieldRef<"OrgMemberInvite", 'String'>
    readonly inviterId: FieldRef<"OrgMemberInvite", 'String'>
    readonly createdAt: FieldRef<"OrgMemberInvite", 'BigInt'>
    readonly updatedAt: FieldRef<"OrgMemberInvite", 'BigInt'>
    readonly deletedAt: FieldRef<"OrgMemberInvite", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * OrgMemberInvite findUnique
   */
  export type OrgMemberInviteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    /**
     * Filter, which OrgMemberInvite to fetch.
     */
    where: OrgMemberInviteWhereUniqueInput
  }

  /**
   * OrgMemberInvite findUniqueOrThrow
   */
  export type OrgMemberInviteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    /**
     * Filter, which OrgMemberInvite to fetch.
     */
    where: OrgMemberInviteWhereUniqueInput
  }

  /**
   * OrgMemberInvite findFirst
   */
  export type OrgMemberInviteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    /**
     * Filter, which OrgMemberInvite to fetch.
     */
    where?: OrgMemberInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMemberInvites to fetch.
     */
    orderBy?: OrgMemberInviteOrderByWithRelationInput | OrgMemberInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrgMemberInvites.
     */
    cursor?: OrgMemberInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMemberInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMemberInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrgMemberInvites.
     */
    distinct?: OrgMemberInviteScalarFieldEnum | OrgMemberInviteScalarFieldEnum[]
  }

  /**
   * OrgMemberInvite findFirstOrThrow
   */
  export type OrgMemberInviteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    /**
     * Filter, which OrgMemberInvite to fetch.
     */
    where?: OrgMemberInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMemberInvites to fetch.
     */
    orderBy?: OrgMemberInviteOrderByWithRelationInput | OrgMemberInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrgMemberInvites.
     */
    cursor?: OrgMemberInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMemberInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMemberInvites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrgMemberInvites.
     */
    distinct?: OrgMemberInviteScalarFieldEnum | OrgMemberInviteScalarFieldEnum[]
  }

  /**
   * OrgMemberInvite findMany
   */
  export type OrgMemberInviteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    /**
     * Filter, which OrgMemberInvites to fetch.
     */
    where?: OrgMemberInviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMemberInvites to fetch.
     */
    orderBy?: OrgMemberInviteOrderByWithRelationInput | OrgMemberInviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrgMemberInvites.
     */
    cursor?: OrgMemberInviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMemberInvites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMemberInvites.
     */
    skip?: number
    distinct?: OrgMemberInviteScalarFieldEnum | OrgMemberInviteScalarFieldEnum[]
  }

  /**
   * OrgMemberInvite create
   */
  export type OrgMemberInviteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    /**
     * The data needed to create a OrgMemberInvite.
     */
    data: XOR<OrgMemberInviteCreateInput, OrgMemberInviteUncheckedCreateInput>
  }

  /**
   * OrgMemberInvite createMany
   */
  export type OrgMemberInviteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrgMemberInvites.
     */
    data: OrgMemberInviteCreateManyInput | OrgMemberInviteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrgMemberInvite createManyAndReturn
   */
  export type OrgMemberInviteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OrgMemberInvites.
     */
    data: OrgMemberInviteCreateManyInput | OrgMemberInviteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrgMemberInvite update
   */
  export type OrgMemberInviteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    /**
     * The data needed to update a OrgMemberInvite.
     */
    data: XOR<OrgMemberInviteUpdateInput, OrgMemberInviteUncheckedUpdateInput>
    /**
     * Choose, which OrgMemberInvite to update.
     */
    where: OrgMemberInviteWhereUniqueInput
  }

  /**
   * OrgMemberInvite updateMany
   */
  export type OrgMemberInviteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrgMemberInvites.
     */
    data: XOR<OrgMemberInviteUpdateManyMutationInput, OrgMemberInviteUncheckedUpdateManyInput>
    /**
     * Filter which OrgMemberInvites to update
     */
    where?: OrgMemberInviteWhereInput
  }

  /**
   * OrgMemberInvite upsert
   */
  export type OrgMemberInviteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    /**
     * The filter to search for the OrgMemberInvite to update in case it exists.
     */
    where: OrgMemberInviteWhereUniqueInput
    /**
     * In case the OrgMemberInvite found by the `where` argument doesn't exist, create a new OrgMemberInvite with this data.
     */
    create: XOR<OrgMemberInviteCreateInput, OrgMemberInviteUncheckedCreateInput>
    /**
     * In case the OrgMemberInvite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrgMemberInviteUpdateInput, OrgMemberInviteUncheckedUpdateInput>
  }

  /**
   * OrgMemberInvite delete
   */
  export type OrgMemberInviteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    /**
     * Filter which OrgMemberInvite to delete.
     */
    where: OrgMemberInviteWhereUniqueInput
  }

  /**
   * OrgMemberInvite deleteMany
   */
  export type OrgMemberInviteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrgMemberInvites to delete
     */
    where?: OrgMemberInviteWhereInput
  }

  /**
   * OrgMemberInvite without action
   */
  export type OrgMemberInviteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type OrganizationSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    description: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    description: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    logo: number
    description: number
    createdAt: number
    updatedAt: number
    details: number
    deletedAt: number
    _all: number
  }


  export type OrganizationAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrganizationSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    details?: true
    deletedAt?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrganizationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrganizationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _avg?: OrganizationAvgAggregateInputType
    _sum?: OrganizationSumAggregateInputType
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    logo: string | null
    description: string | null
    createdAt: bigint
    updatedAt: bigint
    details: JsonValue | null
    deletedAt: bigint
    _count: OrganizationCountAggregateOutputType | null
    _avg: OrganizationAvgAggregateOutputType | null
    _sum: OrganizationSumAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    details?: boolean
    deletedAt?: boolean
    Project?: boolean | Organization$ProjectArgs<ExtArgs>
    members?: boolean | Organization$membersArgs<ExtArgs>
    invites?: boolean | Organization$invitesArgs<ExtArgs>
    integrations?: boolean | Organization$integrationsArgs<ExtArgs>
    Lead?: boolean | Organization$LeadArgs<ExtArgs>
    contact?: boolean | Organization$contactArgs<ExtArgs>
    Template?: boolean | Organization$TemplateArgs<ExtArgs>
    LeadStatus?: boolean | Organization$LeadStatusArgs<ExtArgs>
    webhooks?: boolean | Organization$webhooksArgs<ExtArgs>
    Email?: boolean | Organization$EmailArgs<ExtArgs>
    MailServiceFromEmail?: boolean | Organization$MailServiceFromEmailArgs<ExtArgs>
    LeadProject?: boolean | Organization$LeadProjectArgs<ExtArgs>
    LeadActivity?: boolean | Organization$LeadActivityArgs<ExtArgs>
    UnsubscribeLink?: boolean | Organization$UnsubscribeLinkArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    details?: boolean
    deletedAt?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    logo?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    details?: boolean
    deletedAt?: boolean
  }

  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Project?: boolean | Organization$ProjectArgs<ExtArgs>
    members?: boolean | Organization$membersArgs<ExtArgs>
    invites?: boolean | Organization$invitesArgs<ExtArgs>
    integrations?: boolean | Organization$integrationsArgs<ExtArgs>
    Lead?: boolean | Organization$LeadArgs<ExtArgs>
    contact?: boolean | Organization$contactArgs<ExtArgs>
    Template?: boolean | Organization$TemplateArgs<ExtArgs>
    LeadStatus?: boolean | Organization$LeadStatusArgs<ExtArgs>
    webhooks?: boolean | Organization$webhooksArgs<ExtArgs>
    Email?: boolean | Organization$EmailArgs<ExtArgs>
    MailServiceFromEmail?: boolean | Organization$MailServiceFromEmailArgs<ExtArgs>
    LeadProject?: boolean | Organization$LeadProjectArgs<ExtArgs>
    LeadActivity?: boolean | Organization$LeadActivityArgs<ExtArgs>
    UnsubscribeLink?: boolean | Organization$UnsubscribeLinkArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      Project: Prisma.$ProjectPayload<ExtArgs>[]
      members: Prisma.$OrgMemberPayload<ExtArgs>[]
      invites: Prisma.$OrgMemberInvitePayload<ExtArgs>[]
      integrations: Prisma.$IntegrationPayload<ExtArgs>[]
      Lead: Prisma.$LeadPayload<ExtArgs>[]
      contact: Prisma.$ContactPayload<ExtArgs>[]
      Template: Prisma.$TemplatePayload<ExtArgs>[]
      LeadStatus: Prisma.$LeadStatusPayload<ExtArgs>[]
      webhooks: Prisma.$WebhookPayload<ExtArgs>[]
      Email: Prisma.$EmailPayload<ExtArgs>[]
      MailServiceFromEmail: Prisma.$MailServiceFromEmailPayload<ExtArgs>[]
      LeadProject: Prisma.$LeadProjectPayload<ExtArgs>[]
      LeadActivity: Prisma.$LeadActivityPayload<ExtArgs>[]
      UnsubscribeLink: Prisma.$UnsubscribeLinkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      logo: string | null
      description: string | null
      createdAt: bigint
      updatedAt: bigint
      details: Prisma.JsonValue | null
      deletedAt: bigint
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Project<T extends Organization$ProjectArgs<ExtArgs> = {}>(args?: Subset<T, Organization$ProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    members<T extends Organization$membersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "findMany"> | Null>
    invites<T extends Organization$invitesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$invitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMemberInvitePayload<ExtArgs>, T, "findMany"> | Null>
    integrations<T extends Organization$integrationsArgs<ExtArgs> = {}>(args?: Subset<T, Organization$integrationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findMany"> | Null>
    Lead<T extends Organization$LeadArgs<ExtArgs> = {}>(args?: Subset<T, Organization$LeadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany"> | Null>
    contact<T extends Organization$contactArgs<ExtArgs> = {}>(args?: Subset<T, Organization$contactArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany"> | Null>
    Template<T extends Organization$TemplateArgs<ExtArgs> = {}>(args?: Subset<T, Organization$TemplateArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findMany"> | Null>
    LeadStatus<T extends Organization$LeadStatusArgs<ExtArgs> = {}>(args?: Subset<T, Organization$LeadStatusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "findMany"> | Null>
    webhooks<T extends Organization$webhooksArgs<ExtArgs> = {}>(args?: Subset<T, Organization$webhooksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findMany"> | Null>
    Email<T extends Organization$EmailArgs<ExtArgs> = {}>(args?: Subset<T, Organization$EmailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findMany"> | Null>
    MailServiceFromEmail<T extends Organization$MailServiceFromEmailArgs<ExtArgs> = {}>(args?: Subset<T, Organization$MailServiceFromEmailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "findMany"> | Null>
    LeadProject<T extends Organization$LeadProjectArgs<ExtArgs> = {}>(args?: Subset<T, Organization$LeadProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "findMany"> | Null>
    LeadActivity<T extends Organization$LeadActivityArgs<ExtArgs> = {}>(args?: Subset<T, Organization$LeadActivityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findMany"> | Null>
    UnsubscribeLink<T extends Organization$UnsubscribeLinkArgs<ExtArgs> = {}>(args?: Subset<T, Organization$UnsubscribeLinkArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */ 
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly logo: FieldRef<"Organization", 'String'>
    readonly description: FieldRef<"Organization", 'String'>
    readonly createdAt: FieldRef<"Organization", 'BigInt'>
    readonly updatedAt: FieldRef<"Organization", 'BigInt'>
    readonly details: FieldRef<"Organization", 'Json'>
    readonly deletedAt: FieldRef<"Organization", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
  }

  /**
   * Organization.Project
   */
  export type Organization$ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Organization.members
   */
  export type Organization$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    where?: OrgMemberWhereInput
    orderBy?: OrgMemberOrderByWithRelationInput | OrgMemberOrderByWithRelationInput[]
    cursor?: OrgMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrgMemberScalarFieldEnum | OrgMemberScalarFieldEnum[]
  }

  /**
   * Organization.invites
   */
  export type Organization$invitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMemberInvite
     */
    select?: OrgMemberInviteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInviteInclude<ExtArgs> | null
    where?: OrgMemberInviteWhereInput
    orderBy?: OrgMemberInviteOrderByWithRelationInput | OrgMemberInviteOrderByWithRelationInput[]
    cursor?: OrgMemberInviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrgMemberInviteScalarFieldEnum | OrgMemberInviteScalarFieldEnum[]
  }

  /**
   * Organization.integrations
   */
  export type Organization$integrationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    where?: IntegrationWhereInput
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    cursor?: IntegrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Organization.Lead
   */
  export type Organization$LeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    where?: LeadWhereInput
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    cursor?: LeadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Organization.contact
   */
  export type Organization$contactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Organization.Template
   */
  export type Organization$TemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    where?: TemplateWhereInput
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    cursor?: TemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Organization.LeadStatus
   */
  export type Organization$LeadStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    where?: LeadStatusWhereInput
    orderBy?: LeadStatusOrderByWithRelationInput | LeadStatusOrderByWithRelationInput[]
    cursor?: LeadStatusWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadStatusScalarFieldEnum | LeadStatusScalarFieldEnum[]
  }

  /**
   * Organization.webhooks
   */
  export type Organization$webhooksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    where?: WebhookWhereInput
    orderBy?: WebhookOrderByWithRelationInput | WebhookOrderByWithRelationInput[]
    cursor?: WebhookWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebhookScalarFieldEnum | WebhookScalarFieldEnum[]
  }

  /**
   * Organization.Email
   */
  export type Organization$EmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    where?: EmailWhereInput
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    cursor?: EmailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Organization.MailServiceFromEmail
   */
  export type Organization$MailServiceFromEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    where?: MailServiceFromEmailWhereInput
    orderBy?: MailServiceFromEmailOrderByWithRelationInput | MailServiceFromEmailOrderByWithRelationInput[]
    cursor?: MailServiceFromEmailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MailServiceFromEmailScalarFieldEnum | MailServiceFromEmailScalarFieldEnum[]
  }

  /**
   * Organization.LeadProject
   */
  export type Organization$LeadProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    where?: LeadProjectWhereInput
    orderBy?: LeadProjectOrderByWithRelationInput | LeadProjectOrderByWithRelationInput[]
    cursor?: LeadProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadProjectScalarFieldEnum | LeadProjectScalarFieldEnum[]
  }

  /**
   * Organization.LeadActivity
   */
  export type Organization$LeadActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    where?: LeadActivityWhereInput
    orderBy?: LeadActivityOrderByWithRelationInput | LeadActivityOrderByWithRelationInput[]
    cursor?: LeadActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadActivityScalarFieldEnum | LeadActivityScalarFieldEnum[]
  }

  /**
   * Organization.UnsubscribeLink
   */
  export type Organization$UnsubscribeLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    where?: UnsubscribeLinkWhereInput
    orderBy?: UnsubscribeLinkOrderByWithRelationInput | UnsubscribeLinkOrderByWithRelationInput[]
    cursor?: UnsubscribeLinkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UnsubscribeLinkScalarFieldEnum | UnsubscribeLinkScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model OrgMember
   */

  export type AggregateOrgMember = {
    _count: OrgMemberCountAggregateOutputType | null
    _avg: OrgMemberAvgAggregateOutputType | null
    _sum: OrgMemberSumAggregateOutputType | null
    _min: OrgMemberMinAggregateOutputType | null
    _max: OrgMemberMaxAggregateOutputType | null
  }

  export type OrgMemberAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type OrgMemberSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type OrgMemberMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: $Enums.OrgMemberRole | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    signature: string | null
  }

  export type OrgMemberMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    userId: string | null
    role: $Enums.OrgMemberRole | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    signature: string | null
  }

  export type OrgMemberCountAggregateOutputType = {
    id: number
    organizationId: number
    userId: number
    role: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    signature: number
    _all: number
  }


  export type OrgMemberAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrgMemberSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type OrgMemberMinAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    signature?: true
  }

  export type OrgMemberMaxAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    signature?: true
  }

  export type OrgMemberCountAggregateInputType = {
    id?: true
    organizationId?: true
    userId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    signature?: true
    _all?: true
  }

  export type OrgMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrgMember to aggregate.
     */
    where?: OrgMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMembers to fetch.
     */
    orderBy?: OrgMemberOrderByWithRelationInput | OrgMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrgMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrgMembers
    **/
    _count?: true | OrgMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrgMemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrgMemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrgMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrgMemberMaxAggregateInputType
  }

  export type GetOrgMemberAggregateType<T extends OrgMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateOrgMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrgMember[P]>
      : GetScalarType<T[P], AggregateOrgMember[P]>
  }




  export type OrgMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrgMemberWhereInput
    orderBy?: OrgMemberOrderByWithAggregationInput | OrgMemberOrderByWithAggregationInput[]
    by: OrgMemberScalarFieldEnum[] | OrgMemberScalarFieldEnum
    having?: OrgMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrgMemberCountAggregateInputType | true
    _avg?: OrgMemberAvgAggregateInputType
    _sum?: OrgMemberSumAggregateInputType
    _min?: OrgMemberMinAggregateInputType
    _max?: OrgMemberMaxAggregateInputType
  }

  export type OrgMemberGroupByOutputType = {
    id: string
    organizationId: string
    userId: string
    role: $Enums.OrgMemberRole
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint
    signature: string
    _count: OrgMemberCountAggregateOutputType | null
    _avg: OrgMemberAvgAggregateOutputType | null
    _sum: OrgMemberSumAggregateOutputType | null
    _min: OrgMemberMinAggregateOutputType | null
    _max: OrgMemberMaxAggregateOutputType | null
  }

  type GetOrgMemberGroupByPayload<T extends OrgMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrgMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrgMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrgMemberGroupByOutputType[P]>
            : GetScalarType<T[P], OrgMemberGroupByOutputType[P]>
        }
      >
    >


  export type OrgMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    signature?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Integration?: boolean | OrgMember$IntegrationArgs<ExtArgs>
    _count?: boolean | OrgMemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orgMember"]>

  export type OrgMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    signature?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orgMember"]>

  export type OrgMemberSelectScalar = {
    id?: boolean
    organizationId?: boolean
    userId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    signature?: boolean
  }

  export type OrgMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Integration?: boolean | OrgMember$IntegrationArgs<ExtArgs>
    _count?: boolean | OrgMemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrgMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OrgMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrgMember"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      Integration: Prisma.$IntegrationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      userId: string
      role: $Enums.OrgMemberRole
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint
      signature: string
    }, ExtArgs["result"]["orgMember"]>
    composites: {}
  }

  type OrgMemberGetPayload<S extends boolean | null | undefined | OrgMemberDefaultArgs> = $Result.GetResult<Prisma.$OrgMemberPayload, S>

  type OrgMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrgMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrgMemberCountAggregateInputType | true
    }

  export interface OrgMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrgMember'], meta: { name: 'OrgMember' } }
    /**
     * Find zero or one OrgMember that matches the filter.
     * @param {OrgMemberFindUniqueArgs} args - Arguments to find a OrgMember
     * @example
     * // Get one OrgMember
     * const orgMember = await prisma.orgMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrgMemberFindUniqueArgs>(args: SelectSubset<T, OrgMemberFindUniqueArgs<ExtArgs>>): Prisma__OrgMemberClient<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OrgMember that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OrgMemberFindUniqueOrThrowArgs} args - Arguments to find a OrgMember
     * @example
     * // Get one OrgMember
     * const orgMember = await prisma.orgMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrgMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, OrgMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrgMemberClient<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OrgMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberFindFirstArgs} args - Arguments to find a OrgMember
     * @example
     * // Get one OrgMember
     * const orgMember = await prisma.orgMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrgMemberFindFirstArgs>(args?: SelectSubset<T, OrgMemberFindFirstArgs<ExtArgs>>): Prisma__OrgMemberClient<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OrgMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberFindFirstOrThrowArgs} args - Arguments to find a OrgMember
     * @example
     * // Get one OrgMember
     * const orgMember = await prisma.orgMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrgMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, OrgMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrgMemberClient<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OrgMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrgMembers
     * const orgMembers = await prisma.orgMember.findMany()
     * 
     * // Get first 10 OrgMembers
     * const orgMembers = await prisma.orgMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orgMemberWithIdOnly = await prisma.orgMember.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrgMemberFindManyArgs>(args?: SelectSubset<T, OrgMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OrgMember.
     * @param {OrgMemberCreateArgs} args - Arguments to create a OrgMember.
     * @example
     * // Create one OrgMember
     * const OrgMember = await prisma.orgMember.create({
     *   data: {
     *     // ... data to create a OrgMember
     *   }
     * })
     * 
     */
    create<T extends OrgMemberCreateArgs>(args: SelectSubset<T, OrgMemberCreateArgs<ExtArgs>>): Prisma__OrgMemberClient<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OrgMembers.
     * @param {OrgMemberCreateManyArgs} args - Arguments to create many OrgMembers.
     * @example
     * // Create many OrgMembers
     * const orgMember = await prisma.orgMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrgMemberCreateManyArgs>(args?: SelectSubset<T, OrgMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many OrgMembers and returns the data saved in the database.
     * @param {OrgMemberCreateManyAndReturnArgs} args - Arguments to create many OrgMembers.
     * @example
     * // Create many OrgMembers
     * const orgMember = await prisma.orgMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many OrgMembers and only return the `id`
     * const orgMemberWithIdOnly = await prisma.orgMember.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrgMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, OrgMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a OrgMember.
     * @param {OrgMemberDeleteArgs} args - Arguments to delete one OrgMember.
     * @example
     * // Delete one OrgMember
     * const OrgMember = await prisma.orgMember.delete({
     *   where: {
     *     // ... filter to delete one OrgMember
     *   }
     * })
     * 
     */
    delete<T extends OrgMemberDeleteArgs>(args: SelectSubset<T, OrgMemberDeleteArgs<ExtArgs>>): Prisma__OrgMemberClient<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OrgMember.
     * @param {OrgMemberUpdateArgs} args - Arguments to update one OrgMember.
     * @example
     * // Update one OrgMember
     * const orgMember = await prisma.orgMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrgMemberUpdateArgs>(args: SelectSubset<T, OrgMemberUpdateArgs<ExtArgs>>): Prisma__OrgMemberClient<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OrgMembers.
     * @param {OrgMemberDeleteManyArgs} args - Arguments to filter OrgMembers to delete.
     * @example
     * // Delete a few OrgMembers
     * const { count } = await prisma.orgMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrgMemberDeleteManyArgs>(args?: SelectSubset<T, OrgMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrgMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrgMembers
     * const orgMember = await prisma.orgMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrgMemberUpdateManyArgs>(args: SelectSubset<T, OrgMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrgMember.
     * @param {OrgMemberUpsertArgs} args - Arguments to update or create a OrgMember.
     * @example
     * // Update or create a OrgMember
     * const orgMember = await prisma.orgMember.upsert({
     *   create: {
     *     // ... data to create a OrgMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrgMember we want to update
     *   }
     * })
     */
    upsert<T extends OrgMemberUpsertArgs>(args: SelectSubset<T, OrgMemberUpsertArgs<ExtArgs>>): Prisma__OrgMemberClient<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OrgMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberCountArgs} args - Arguments to filter OrgMembers to count.
     * @example
     * // Count the number of OrgMembers
     * const count = await prisma.orgMember.count({
     *   where: {
     *     // ... the filter for the OrgMembers we want to count
     *   }
     * })
    **/
    count<T extends OrgMemberCountArgs>(
      args?: Subset<T, OrgMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrgMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrgMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrgMemberAggregateArgs>(args: Subset<T, OrgMemberAggregateArgs>): Prisma.PrismaPromise<GetOrgMemberAggregateType<T>>

    /**
     * Group by OrgMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrgMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrgMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrgMemberGroupByArgs['orderBy'] }
        : { orderBy?: OrgMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrgMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrgMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrgMember model
   */
  readonly fields: OrgMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrgMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrgMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Integration<T extends OrgMember$IntegrationArgs<ExtArgs> = {}>(args?: Subset<T, OrgMember$IntegrationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OrgMember model
   */ 
  interface OrgMemberFieldRefs {
    readonly id: FieldRef<"OrgMember", 'String'>
    readonly organizationId: FieldRef<"OrgMember", 'String'>
    readonly userId: FieldRef<"OrgMember", 'String'>
    readonly role: FieldRef<"OrgMember", 'OrgMemberRole'>
    readonly createdAt: FieldRef<"OrgMember", 'BigInt'>
    readonly updatedAt: FieldRef<"OrgMember", 'BigInt'>
    readonly deletedAt: FieldRef<"OrgMember", 'BigInt'>
    readonly signature: FieldRef<"OrgMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OrgMember findUnique
   */
  export type OrgMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrgMember to fetch.
     */
    where: OrgMemberWhereUniqueInput
  }

  /**
   * OrgMember findUniqueOrThrow
   */
  export type OrgMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrgMember to fetch.
     */
    where: OrgMemberWhereUniqueInput
  }

  /**
   * OrgMember findFirst
   */
  export type OrgMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrgMember to fetch.
     */
    where?: OrgMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMembers to fetch.
     */
    orderBy?: OrgMemberOrderByWithRelationInput | OrgMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrgMembers.
     */
    cursor?: OrgMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrgMembers.
     */
    distinct?: OrgMemberScalarFieldEnum | OrgMemberScalarFieldEnum[]
  }

  /**
   * OrgMember findFirstOrThrow
   */
  export type OrgMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrgMember to fetch.
     */
    where?: OrgMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMembers to fetch.
     */
    orderBy?: OrgMemberOrderByWithRelationInput | OrgMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrgMembers.
     */
    cursor?: OrgMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrgMembers.
     */
    distinct?: OrgMemberScalarFieldEnum | OrgMemberScalarFieldEnum[]
  }

  /**
   * OrgMember findMany
   */
  export type OrgMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    /**
     * Filter, which OrgMembers to fetch.
     */
    where?: OrgMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrgMembers to fetch.
     */
    orderBy?: OrgMemberOrderByWithRelationInput | OrgMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrgMembers.
     */
    cursor?: OrgMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrgMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrgMembers.
     */
    skip?: number
    distinct?: OrgMemberScalarFieldEnum | OrgMemberScalarFieldEnum[]
  }

  /**
   * OrgMember create
   */
  export type OrgMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a OrgMember.
     */
    data: XOR<OrgMemberCreateInput, OrgMemberUncheckedCreateInput>
  }

  /**
   * OrgMember createMany
   */
  export type OrgMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrgMembers.
     */
    data: OrgMemberCreateManyInput | OrgMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OrgMember createManyAndReturn
   */
  export type OrgMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many OrgMembers.
     */
    data: OrgMemberCreateManyInput | OrgMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * OrgMember update
   */
  export type OrgMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a OrgMember.
     */
    data: XOR<OrgMemberUpdateInput, OrgMemberUncheckedUpdateInput>
    /**
     * Choose, which OrgMember to update.
     */
    where: OrgMemberWhereUniqueInput
  }

  /**
   * OrgMember updateMany
   */
  export type OrgMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrgMembers.
     */
    data: XOR<OrgMemberUpdateManyMutationInput, OrgMemberUncheckedUpdateManyInput>
    /**
     * Filter which OrgMembers to update
     */
    where?: OrgMemberWhereInput
  }

  /**
   * OrgMember upsert
   */
  export type OrgMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the OrgMember to update in case it exists.
     */
    where: OrgMemberWhereUniqueInput
    /**
     * In case the OrgMember found by the `where` argument doesn't exist, create a new OrgMember with this data.
     */
    create: XOR<OrgMemberCreateInput, OrgMemberUncheckedCreateInput>
    /**
     * In case the OrgMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrgMemberUpdateInput, OrgMemberUncheckedUpdateInput>
  }

  /**
   * OrgMember delete
   */
  export type OrgMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    /**
     * Filter which OrgMember to delete.
     */
    where: OrgMemberWhereUniqueInput
  }

  /**
   * OrgMember deleteMany
   */
  export type OrgMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrgMembers to delete
     */
    where?: OrgMemberWhereInput
  }

  /**
   * OrgMember.Integration
   */
  export type OrgMember$IntegrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    where?: IntegrationWhereInput
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    cursor?: IntegrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * OrgMember without action
   */
  export type OrgMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type ProjectSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    cliAccessToken: string | null
    isSynced: boolean | null
    organizationId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    integrationId: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    type: string | null
    cliAccessToken: string | null
    isSynced: boolean | null
    organizationId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    integrationId: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    type: number
    data: number
    cliAccessToken: number
    isSynced: number
    organizationId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    integrationId: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ProjectSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    type?: true
    cliAccessToken?: true
    isSynced?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    integrationId?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    type?: true
    cliAccessToken?: true
    isSynced?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    integrationId?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    type?: true
    data?: true
    cliAccessToken?: true
    isSynced?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    integrationId?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    type: string
    data: JsonValue
    cliAccessToken: string | null
    isSynced: boolean
    organizationId: string
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint | null
    integrationId: string
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    data?: boolean
    cliAccessToken?: boolean
    isSynced?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    integrationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    leadProject?: boolean | Project$leadProjectArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    type?: boolean
    data?: boolean
    cliAccessToken?: boolean
    isSynced?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    integrationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    type?: boolean
    data?: boolean
    cliAccessToken?: boolean
    isSynced?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    integrationId?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    leadProject?: boolean | Project$leadProjectArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      leadProject: Prisma.$LeadProjectPayload<ExtArgs>[]
      integration: Prisma.$IntegrationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      type: string
      data: Prisma.JsonValue
      cliAccessToken: string | null
      isSynced: boolean
      organizationId: string
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint | null
      integrationId: string
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    leadProject<T extends Project$leadProjectArgs<ExtArgs> = {}>(args?: Subset<T, Project$leadProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "findMany"> | Null>
    integration<T extends IntegrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IntegrationDefaultArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly type: FieldRef<"Project", 'String'>
    readonly data: FieldRef<"Project", 'Json'>
    readonly cliAccessToken: FieldRef<"Project", 'String'>
    readonly isSynced: FieldRef<"Project", 'Boolean'>
    readonly organizationId: FieldRef<"Project", 'String'>
    readonly createdAt: FieldRef<"Project", 'BigInt'>
    readonly updatedAt: FieldRef<"Project", 'BigInt'>
    readonly deletedAt: FieldRef<"Project", 'BigInt'>
    readonly integrationId: FieldRef<"Project", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.leadProject
   */
  export type Project$leadProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    where?: LeadProjectWhereInput
    orderBy?: LeadProjectOrderByWithRelationInput | LeadProjectOrderByWithRelationInput[]
    cursor?: LeadProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadProjectScalarFieldEnum | LeadProjectScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model LeadNotes
   */

  export type AggregateLeadNotes = {
    _count: LeadNotesCountAggregateOutputType | null
    _avg: LeadNotesAvgAggregateOutputType | null
    _sum: LeadNotesSumAggregateOutputType | null
    _min: LeadNotesMinAggregateOutputType | null
    _max: LeadNotesMaxAggregateOutputType | null
  }

  export type LeadNotesAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type LeadNotesSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type LeadNotesMinAggregateOutputType = {
    id: string | null
    leadId: string | null
    data: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    userId: string | null
  }

  export type LeadNotesMaxAggregateOutputType = {
    id: string | null
    leadId: string | null
    data: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    userId: string | null
  }

  export type LeadNotesCountAggregateOutputType = {
    id: number
    leadId: number
    data: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    userId: number
    _all: number
  }


  export type LeadNotesAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeadNotesSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeadNotesMinAggregateInputType = {
    id?: true
    leadId?: true
    data?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    userId?: true
  }

  export type LeadNotesMaxAggregateInputType = {
    id?: true
    leadId?: true
    data?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    userId?: true
  }

  export type LeadNotesCountAggregateInputType = {
    id?: true
    leadId?: true
    data?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    userId?: true
    _all?: true
  }

  export type LeadNotesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadNotes to aggregate.
     */
    where?: LeadNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadNotes to fetch.
     */
    orderBy?: LeadNotesOrderByWithRelationInput | LeadNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeadNotes
    **/
    _count?: true | LeadNotesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadNotesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadNotesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadNotesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadNotesMaxAggregateInputType
  }

  export type GetLeadNotesAggregateType<T extends LeadNotesAggregateArgs> = {
        [P in keyof T & keyof AggregateLeadNotes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeadNotes[P]>
      : GetScalarType<T[P], AggregateLeadNotes[P]>
  }




  export type LeadNotesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadNotesWhereInput
    orderBy?: LeadNotesOrderByWithAggregationInput | LeadNotesOrderByWithAggregationInput[]
    by: LeadNotesScalarFieldEnum[] | LeadNotesScalarFieldEnum
    having?: LeadNotesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadNotesCountAggregateInputType | true
    _avg?: LeadNotesAvgAggregateInputType
    _sum?: LeadNotesSumAggregateInputType
    _min?: LeadNotesMinAggregateInputType
    _max?: LeadNotesMaxAggregateInputType
  }

  export type LeadNotesGroupByOutputType = {
    id: string
    leadId: string
    data: string
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint
    userId: string
    _count: LeadNotesCountAggregateOutputType | null
    _avg: LeadNotesAvgAggregateOutputType | null
    _sum: LeadNotesSumAggregateOutputType | null
    _min: LeadNotesMinAggregateOutputType | null
    _max: LeadNotesMaxAggregateOutputType | null
  }

  type GetLeadNotesGroupByPayload<T extends LeadNotesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadNotesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadNotesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadNotesGroupByOutputType[P]>
            : GetScalarType<T[P], LeadNotesGroupByOutputType[P]>
        }
      >
    >


  export type LeadNotesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    userId?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    LeadActivity?: boolean | LeadNotes$LeadActivityArgs<ExtArgs>
    _count?: boolean | LeadNotesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadNotes"]>

  export type LeadNotesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    userId?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadNotes"]>

  export type LeadNotesSelectScalar = {
    id?: boolean
    leadId?: boolean
    data?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    userId?: boolean
  }

  export type LeadNotesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    LeadActivity?: boolean | LeadNotes$LeadActivityArgs<ExtArgs>
    _count?: boolean | LeadNotesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeadNotesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $LeadNotesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeadNotes"
    objects: {
      lead: Prisma.$LeadPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      LeadActivity: Prisma.$LeadActivityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      leadId: string
      data: string
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint
      userId: string
    }, ExtArgs["result"]["leadNotes"]>
    composites: {}
  }

  type LeadNotesGetPayload<S extends boolean | null | undefined | LeadNotesDefaultArgs> = $Result.GetResult<Prisma.$LeadNotesPayload, S>

  type LeadNotesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeadNotesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeadNotesCountAggregateInputType | true
    }

  export interface LeadNotesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeadNotes'], meta: { name: 'LeadNotes' } }
    /**
     * Find zero or one LeadNotes that matches the filter.
     * @param {LeadNotesFindUniqueArgs} args - Arguments to find a LeadNotes
     * @example
     * // Get one LeadNotes
     * const leadNotes = await prisma.leadNotes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadNotesFindUniqueArgs>(args: SelectSubset<T, LeadNotesFindUniqueArgs<ExtArgs>>): Prisma__LeadNotesClient<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeadNotes that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeadNotesFindUniqueOrThrowArgs} args - Arguments to find a LeadNotes
     * @example
     * // Get one LeadNotes
     * const leadNotes = await prisma.leadNotes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadNotesFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadNotesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadNotesClient<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeadNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadNotesFindFirstArgs} args - Arguments to find a LeadNotes
     * @example
     * // Get one LeadNotes
     * const leadNotes = await prisma.leadNotes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadNotesFindFirstArgs>(args?: SelectSubset<T, LeadNotesFindFirstArgs<ExtArgs>>): Prisma__LeadNotesClient<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeadNotes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadNotesFindFirstOrThrowArgs} args - Arguments to find a LeadNotes
     * @example
     * // Get one LeadNotes
     * const leadNotes = await prisma.leadNotes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadNotesFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadNotesFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadNotesClient<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeadNotes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadNotesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeadNotes
     * const leadNotes = await prisma.leadNotes.findMany()
     * 
     * // Get first 10 LeadNotes
     * const leadNotes = await prisma.leadNotes.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadNotesWithIdOnly = await prisma.leadNotes.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadNotesFindManyArgs>(args?: SelectSubset<T, LeadNotesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeadNotes.
     * @param {LeadNotesCreateArgs} args - Arguments to create a LeadNotes.
     * @example
     * // Create one LeadNotes
     * const LeadNotes = await prisma.leadNotes.create({
     *   data: {
     *     // ... data to create a LeadNotes
     *   }
     * })
     * 
     */
    create<T extends LeadNotesCreateArgs>(args: SelectSubset<T, LeadNotesCreateArgs<ExtArgs>>): Prisma__LeadNotesClient<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeadNotes.
     * @param {LeadNotesCreateManyArgs} args - Arguments to create many LeadNotes.
     * @example
     * // Create many LeadNotes
     * const leadNotes = await prisma.leadNotes.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadNotesCreateManyArgs>(args?: SelectSubset<T, LeadNotesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeadNotes and returns the data saved in the database.
     * @param {LeadNotesCreateManyAndReturnArgs} args - Arguments to create many LeadNotes.
     * @example
     * // Create many LeadNotes
     * const leadNotes = await prisma.leadNotes.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeadNotes and only return the `id`
     * const leadNotesWithIdOnly = await prisma.leadNotes.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadNotesCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadNotesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeadNotes.
     * @param {LeadNotesDeleteArgs} args - Arguments to delete one LeadNotes.
     * @example
     * // Delete one LeadNotes
     * const LeadNotes = await prisma.leadNotes.delete({
     *   where: {
     *     // ... filter to delete one LeadNotes
     *   }
     * })
     * 
     */
    delete<T extends LeadNotesDeleteArgs>(args: SelectSubset<T, LeadNotesDeleteArgs<ExtArgs>>): Prisma__LeadNotesClient<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeadNotes.
     * @param {LeadNotesUpdateArgs} args - Arguments to update one LeadNotes.
     * @example
     * // Update one LeadNotes
     * const leadNotes = await prisma.leadNotes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadNotesUpdateArgs>(args: SelectSubset<T, LeadNotesUpdateArgs<ExtArgs>>): Prisma__LeadNotesClient<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeadNotes.
     * @param {LeadNotesDeleteManyArgs} args - Arguments to filter LeadNotes to delete.
     * @example
     * // Delete a few LeadNotes
     * const { count } = await prisma.leadNotes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadNotesDeleteManyArgs>(args?: SelectSubset<T, LeadNotesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadNotesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeadNotes
     * const leadNotes = await prisma.leadNotes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadNotesUpdateManyArgs>(args: SelectSubset<T, LeadNotesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeadNotes.
     * @param {LeadNotesUpsertArgs} args - Arguments to update or create a LeadNotes.
     * @example
     * // Update or create a LeadNotes
     * const leadNotes = await prisma.leadNotes.upsert({
     *   create: {
     *     // ... data to create a LeadNotes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeadNotes we want to update
     *   }
     * })
     */
    upsert<T extends LeadNotesUpsertArgs>(args: SelectSubset<T, LeadNotesUpsertArgs<ExtArgs>>): Prisma__LeadNotesClient<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeadNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadNotesCountArgs} args - Arguments to filter LeadNotes to count.
     * @example
     * // Count the number of LeadNotes
     * const count = await prisma.leadNotes.count({
     *   where: {
     *     // ... the filter for the LeadNotes we want to count
     *   }
     * })
    **/
    count<T extends LeadNotesCountArgs>(
      args?: Subset<T, LeadNotesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadNotesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeadNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadNotesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadNotesAggregateArgs>(args: Subset<T, LeadNotesAggregateArgs>): Prisma.PrismaPromise<GetLeadNotesAggregateType<T>>

    /**
     * Group by LeadNotes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadNotesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadNotesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadNotesGroupByArgs['orderBy'] }
        : { orderBy?: LeadNotesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadNotesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadNotesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeadNotes model
   */
  readonly fields: LeadNotesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeadNotes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadNotesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lead<T extends LeadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeadDefaultArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    LeadActivity<T extends LeadNotes$LeadActivityArgs<ExtArgs> = {}>(args?: Subset<T, LeadNotes$LeadActivityArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeadNotes model
   */ 
  interface LeadNotesFieldRefs {
    readonly id: FieldRef<"LeadNotes", 'String'>
    readonly leadId: FieldRef<"LeadNotes", 'String'>
    readonly data: FieldRef<"LeadNotes", 'String'>
    readonly createdAt: FieldRef<"LeadNotes", 'BigInt'>
    readonly updatedAt: FieldRef<"LeadNotes", 'BigInt'>
    readonly deletedAt: FieldRef<"LeadNotes", 'BigInt'>
    readonly userId: FieldRef<"LeadNotes", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LeadNotes findUnique
   */
  export type LeadNotesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    /**
     * Filter, which LeadNotes to fetch.
     */
    where: LeadNotesWhereUniqueInput
  }

  /**
   * LeadNotes findUniqueOrThrow
   */
  export type LeadNotesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    /**
     * Filter, which LeadNotes to fetch.
     */
    where: LeadNotesWhereUniqueInput
  }

  /**
   * LeadNotes findFirst
   */
  export type LeadNotesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    /**
     * Filter, which LeadNotes to fetch.
     */
    where?: LeadNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadNotes to fetch.
     */
    orderBy?: LeadNotesOrderByWithRelationInput | LeadNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadNotes.
     */
    cursor?: LeadNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadNotes.
     */
    distinct?: LeadNotesScalarFieldEnum | LeadNotesScalarFieldEnum[]
  }

  /**
   * LeadNotes findFirstOrThrow
   */
  export type LeadNotesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    /**
     * Filter, which LeadNotes to fetch.
     */
    where?: LeadNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadNotes to fetch.
     */
    orderBy?: LeadNotesOrderByWithRelationInput | LeadNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadNotes.
     */
    cursor?: LeadNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadNotes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadNotes.
     */
    distinct?: LeadNotesScalarFieldEnum | LeadNotesScalarFieldEnum[]
  }

  /**
   * LeadNotes findMany
   */
  export type LeadNotesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    /**
     * Filter, which LeadNotes to fetch.
     */
    where?: LeadNotesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadNotes to fetch.
     */
    orderBy?: LeadNotesOrderByWithRelationInput | LeadNotesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeadNotes.
     */
    cursor?: LeadNotesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadNotes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadNotes.
     */
    skip?: number
    distinct?: LeadNotesScalarFieldEnum | LeadNotesScalarFieldEnum[]
  }

  /**
   * LeadNotes create
   */
  export type LeadNotesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    /**
     * The data needed to create a LeadNotes.
     */
    data: XOR<LeadNotesCreateInput, LeadNotesUncheckedCreateInput>
  }

  /**
   * LeadNotes createMany
   */
  export type LeadNotesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeadNotes.
     */
    data: LeadNotesCreateManyInput | LeadNotesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeadNotes createManyAndReturn
   */
  export type LeadNotesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeadNotes.
     */
    data: LeadNotesCreateManyInput | LeadNotesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadNotes update
   */
  export type LeadNotesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    /**
     * The data needed to update a LeadNotes.
     */
    data: XOR<LeadNotesUpdateInput, LeadNotesUncheckedUpdateInput>
    /**
     * Choose, which LeadNotes to update.
     */
    where: LeadNotesWhereUniqueInput
  }

  /**
   * LeadNotes updateMany
   */
  export type LeadNotesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeadNotes.
     */
    data: XOR<LeadNotesUpdateManyMutationInput, LeadNotesUncheckedUpdateManyInput>
    /**
     * Filter which LeadNotes to update
     */
    where?: LeadNotesWhereInput
  }

  /**
   * LeadNotes upsert
   */
  export type LeadNotesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    /**
     * The filter to search for the LeadNotes to update in case it exists.
     */
    where: LeadNotesWhereUniqueInput
    /**
     * In case the LeadNotes found by the `where` argument doesn't exist, create a new LeadNotes with this data.
     */
    create: XOR<LeadNotesCreateInput, LeadNotesUncheckedCreateInput>
    /**
     * In case the LeadNotes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadNotesUpdateInput, LeadNotesUncheckedUpdateInput>
  }

  /**
   * LeadNotes delete
   */
  export type LeadNotesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    /**
     * Filter which LeadNotes to delete.
     */
    where: LeadNotesWhereUniqueInput
  }

  /**
   * LeadNotes deleteMany
   */
  export type LeadNotesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadNotes to delete
     */
    where?: LeadNotesWhereInput
  }

  /**
   * LeadNotes.LeadActivity
   */
  export type LeadNotes$LeadActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    where?: LeadActivityWhereInput
    orderBy?: LeadActivityOrderByWithRelationInput | LeadActivityOrderByWithRelationInput[]
    cursor?: LeadActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadActivityScalarFieldEnum | LeadActivityScalarFieldEnum[]
  }

  /**
   * LeadNotes without action
   */
  export type LeadNotesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
  }


  /**
   * Model Lead
   */

  export type AggregateLead = {
    _count: LeadCountAggregateOutputType | null
    _avg: LeadAvgAggregateOutputType | null
    _sum: LeadSumAggregateOutputType | null
    _min: LeadMinAggregateOutputType | null
    _max: LeadMaxAggregateOutputType | null
  }

  export type LeadAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type LeadSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type LeadMinAggregateOutputType = {
    id: string | null
    shopifyDomain: string | null
    shopifyStoreId: string | null
    statusId: string | null
    leadSource: string | null
    industry: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    integrationId: string | null
    organizationId: string | null
  }

  export type LeadMaxAggregateOutputType = {
    id: string | null
    shopifyDomain: string | null
    shopifyStoreId: string | null
    statusId: string | null
    leadSource: string | null
    industry: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    integrationId: string | null
    organizationId: string | null
  }

  export type LeadCountAggregateOutputType = {
    id: number
    shopifyDomain: number
    shopifyStoreId: number
    statusId: number
    leadSource: number
    shopDetails: number
    industry: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    integrationId: number
    organizationId: number
    _all: number
  }


  export type LeadAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeadSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeadMinAggregateInputType = {
    id?: true
    shopifyDomain?: true
    shopifyStoreId?: true
    statusId?: true
    leadSource?: true
    industry?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    integrationId?: true
    organizationId?: true
  }

  export type LeadMaxAggregateInputType = {
    id?: true
    shopifyDomain?: true
    shopifyStoreId?: true
    statusId?: true
    leadSource?: true
    industry?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    integrationId?: true
    organizationId?: true
  }

  export type LeadCountAggregateInputType = {
    id?: true
    shopifyDomain?: true
    shopifyStoreId?: true
    statusId?: true
    leadSource?: true
    shopDetails?: true
    industry?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    integrationId?: true
    organizationId?: true
    _all?: true
  }

  export type LeadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lead to aggregate.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leads
    **/
    _count?: true | LeadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadMaxAggregateInputType
  }

  export type GetLeadAggregateType<T extends LeadAggregateArgs> = {
        [P in keyof T & keyof AggregateLead]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLead[P]>
      : GetScalarType<T[P], AggregateLead[P]>
  }




  export type LeadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadWhereInput
    orderBy?: LeadOrderByWithAggregationInput | LeadOrderByWithAggregationInput[]
    by: LeadScalarFieldEnum[] | LeadScalarFieldEnum
    having?: LeadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadCountAggregateInputType | true
    _avg?: LeadAvgAggregateInputType
    _sum?: LeadSumAggregateInputType
    _min?: LeadMinAggregateInputType
    _max?: LeadMaxAggregateInputType
  }

  export type LeadGroupByOutputType = {
    id: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId: string | null
    leadSource: string | null
    shopDetails: JsonValue | null
    industry: string | null
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint
    integrationId: string | null
    organizationId: string
    _count: LeadCountAggregateOutputType | null
    _avg: LeadAvgAggregateOutputType | null
    _sum: LeadSumAggregateOutputType | null
    _min: LeadMinAggregateOutputType | null
    _max: LeadMaxAggregateOutputType | null
  }

  type GetLeadGroupByPayload<T extends LeadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadGroupByOutputType[P]>
            : GetScalarType<T[P], LeadGroupByOutputType[P]>
        }
      >
    >


  export type LeadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopifyDomain?: boolean
    shopifyStoreId?: boolean
    statusId?: boolean
    leadSource?: boolean
    shopDetails?: boolean
    industry?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    status?: boolean | Lead$statusArgs<ExtArgs>
    Project?: boolean | Lead$ProjectArgs<ExtArgs>
    leadActivities?: boolean | Lead$leadActivitiesArgs<ExtArgs>
    leadNotes?: boolean | Lead$leadNotesArgs<ExtArgs>
    contacts?: boolean | Lead$contactsArgs<ExtArgs>
    attachments?: boolean | Lead$attachmentsArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    integration?: boolean | Lead$integrationArgs<ExtArgs>
    Email?: boolean | Lead$EmailArgs<ExtArgs>
    _count?: boolean | LeadCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shopifyDomain?: boolean
    shopifyStoreId?: boolean
    statusId?: boolean
    leadSource?: boolean
    shopDetails?: boolean
    industry?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    status?: boolean | Lead$statusArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    integration?: boolean | Lead$integrationArgs<ExtArgs>
  }, ExtArgs["result"]["lead"]>

  export type LeadSelectScalar = {
    id?: boolean
    shopifyDomain?: boolean
    shopifyStoreId?: boolean
    statusId?: boolean
    leadSource?: boolean
    shopDetails?: boolean
    industry?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
  }

  export type LeadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | Lead$statusArgs<ExtArgs>
    Project?: boolean | Lead$ProjectArgs<ExtArgs>
    leadActivities?: boolean | Lead$leadActivitiesArgs<ExtArgs>
    leadNotes?: boolean | Lead$leadNotesArgs<ExtArgs>
    contacts?: boolean | Lead$contactsArgs<ExtArgs>
    attachments?: boolean | Lead$attachmentsArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    integration?: boolean | Lead$integrationArgs<ExtArgs>
    Email?: boolean | Lead$EmailArgs<ExtArgs>
    _count?: boolean | LeadCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeadIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    status?: boolean | Lead$statusArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    integration?: boolean | Lead$integrationArgs<ExtArgs>
  }

  export type $LeadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lead"
    objects: {
      status: Prisma.$LeadStatusPayload<ExtArgs> | null
      Project: Prisma.$LeadProjectPayload<ExtArgs>[]
      leadActivities: Prisma.$LeadActivityPayload<ExtArgs>[]
      leadNotes: Prisma.$LeadNotesPayload<ExtArgs>[]
      contacts: Prisma.$ContactPayload<ExtArgs>[]
      attachments: Prisma.$AttachmentPayload<ExtArgs>[]
      organization: Prisma.$OrganizationPayload<ExtArgs>
      integration: Prisma.$IntegrationPayload<ExtArgs> | null
      Email: Prisma.$EmailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shopifyDomain: string
      shopifyStoreId: string
      statusId: string | null
      leadSource: string | null
      shopDetails: Prisma.JsonValue | null
      industry: string | null
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint
      integrationId: string | null
      organizationId: string
    }, ExtArgs["result"]["lead"]>
    composites: {}
  }

  type LeadGetPayload<S extends boolean | null | undefined | LeadDefaultArgs> = $Result.GetResult<Prisma.$LeadPayload, S>

  type LeadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeadFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeadCountAggregateInputType | true
    }

  export interface LeadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lead'], meta: { name: 'Lead' } }
    /**
     * Find zero or one Lead that matches the filter.
     * @param {LeadFindUniqueArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadFindUniqueArgs>(args: SelectSubset<T, LeadFindUniqueArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Lead that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeadFindUniqueOrThrowArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Lead that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindFirstArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadFindFirstArgs>(args?: SelectSubset<T, LeadFindFirstArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Lead that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindFirstOrThrowArgs} args - Arguments to find a Lead
     * @example
     * // Get one Lead
     * const lead = await prisma.lead.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Leads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leads
     * const leads = await prisma.lead.findMany()
     * 
     * // Get first 10 Leads
     * const leads = await prisma.lead.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadWithIdOnly = await prisma.lead.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadFindManyArgs>(args?: SelectSubset<T, LeadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Lead.
     * @param {LeadCreateArgs} args - Arguments to create a Lead.
     * @example
     * // Create one Lead
     * const Lead = await prisma.lead.create({
     *   data: {
     *     // ... data to create a Lead
     *   }
     * })
     * 
     */
    create<T extends LeadCreateArgs>(args: SelectSubset<T, LeadCreateArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Leads.
     * @param {LeadCreateManyArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const lead = await prisma.lead.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadCreateManyArgs>(args?: SelectSubset<T, LeadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leads and returns the data saved in the database.
     * @param {LeadCreateManyAndReturnArgs} args - Arguments to create many Leads.
     * @example
     * // Create many Leads
     * const lead = await prisma.lead.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leads and only return the `id`
     * const leadWithIdOnly = await prisma.lead.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Lead.
     * @param {LeadDeleteArgs} args - Arguments to delete one Lead.
     * @example
     * // Delete one Lead
     * const Lead = await prisma.lead.delete({
     *   where: {
     *     // ... filter to delete one Lead
     *   }
     * })
     * 
     */
    delete<T extends LeadDeleteArgs>(args: SelectSubset<T, LeadDeleteArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Lead.
     * @param {LeadUpdateArgs} args - Arguments to update one Lead.
     * @example
     * // Update one Lead
     * const lead = await prisma.lead.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadUpdateArgs>(args: SelectSubset<T, LeadUpdateArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Leads.
     * @param {LeadDeleteManyArgs} args - Arguments to filter Leads to delete.
     * @example
     * // Delete a few Leads
     * const { count } = await prisma.lead.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadDeleteManyArgs>(args?: SelectSubset<T, LeadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leads
     * const lead = await prisma.lead.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadUpdateManyArgs>(args: SelectSubset<T, LeadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Lead.
     * @param {LeadUpsertArgs} args - Arguments to update or create a Lead.
     * @example
     * // Update or create a Lead
     * const lead = await prisma.lead.upsert({
     *   create: {
     *     // ... data to create a Lead
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lead we want to update
     *   }
     * })
     */
    upsert<T extends LeadUpsertArgs>(args: SelectSubset<T, LeadUpsertArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Leads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadCountArgs} args - Arguments to filter Leads to count.
     * @example
     * // Count the number of Leads
     * const count = await prisma.lead.count({
     *   where: {
     *     // ... the filter for the Leads we want to count
     *   }
     * })
    **/
    count<T extends LeadCountArgs>(
      args?: Subset<T, LeadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadAggregateArgs>(args: Subset<T, LeadAggregateArgs>): Prisma.PrismaPromise<GetLeadAggregateType<T>>

    /**
     * Group by Lead.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadGroupByArgs['orderBy'] }
        : { orderBy?: LeadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lead model
   */
  readonly fields: LeadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lead.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    status<T extends Lead$statusArgs<ExtArgs> = {}>(args?: Subset<T, Lead$statusArgs<ExtArgs>>): Prisma__LeadStatusClient<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Project<T extends Lead$ProjectArgs<ExtArgs> = {}>(args?: Subset<T, Lead$ProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "findMany"> | Null>
    leadActivities<T extends Lead$leadActivitiesArgs<ExtArgs> = {}>(args?: Subset<T, Lead$leadActivitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findMany"> | Null>
    leadNotes<T extends Lead$leadNotesArgs<ExtArgs> = {}>(args?: Subset<T, Lead$leadNotesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "findMany"> | Null>
    contacts<T extends Lead$contactsArgs<ExtArgs> = {}>(args?: Subset<T, Lead$contactsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany"> | Null>
    attachments<T extends Lead$attachmentsArgs<ExtArgs> = {}>(args?: Subset<T, Lead$attachmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany"> | Null>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    integration<T extends Lead$integrationArgs<ExtArgs> = {}>(args?: Subset<T, Lead$integrationArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Email<T extends Lead$EmailArgs<ExtArgs> = {}>(args?: Subset<T, Lead$EmailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lead model
   */ 
  interface LeadFieldRefs {
    readonly id: FieldRef<"Lead", 'String'>
    readonly shopifyDomain: FieldRef<"Lead", 'String'>
    readonly shopifyStoreId: FieldRef<"Lead", 'String'>
    readonly statusId: FieldRef<"Lead", 'String'>
    readonly leadSource: FieldRef<"Lead", 'String'>
    readonly shopDetails: FieldRef<"Lead", 'Json'>
    readonly industry: FieldRef<"Lead", 'String'>
    readonly createdAt: FieldRef<"Lead", 'BigInt'>
    readonly updatedAt: FieldRef<"Lead", 'BigInt'>
    readonly deletedAt: FieldRef<"Lead", 'BigInt'>
    readonly integrationId: FieldRef<"Lead", 'String'>
    readonly organizationId: FieldRef<"Lead", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Lead findUnique
   */
  export type LeadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead findUniqueOrThrow
   */
  export type LeadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead findFirst
   */
  export type LeadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead findFirstOrThrow
   */
  export type LeadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Lead to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leads.
     */
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead findMany
   */
  export type LeadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter, which Leads to fetch.
     */
    where?: LeadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leads to fetch.
     */
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leads.
     */
    cursor?: LeadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leads.
     */
    skip?: number
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Lead create
   */
  export type LeadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * The data needed to create a Lead.
     */
    data: XOR<LeadCreateInput, LeadUncheckedCreateInput>
  }

  /**
   * Lead createMany
   */
  export type LeadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leads.
     */
    data: LeadCreateManyInput | LeadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lead createManyAndReturn
   */
  export type LeadCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Leads.
     */
    data: LeadCreateManyInput | LeadCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lead update
   */
  export type LeadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * The data needed to update a Lead.
     */
    data: XOR<LeadUpdateInput, LeadUncheckedUpdateInput>
    /**
     * Choose, which Lead to update.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead updateMany
   */
  export type LeadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leads.
     */
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyInput>
    /**
     * Filter which Leads to update
     */
    where?: LeadWhereInput
  }

  /**
   * Lead upsert
   */
  export type LeadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * The filter to search for the Lead to update in case it exists.
     */
    where: LeadWhereUniqueInput
    /**
     * In case the Lead found by the `where` argument doesn't exist, create a new Lead with this data.
     */
    create: XOR<LeadCreateInput, LeadUncheckedCreateInput>
    /**
     * In case the Lead was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadUpdateInput, LeadUncheckedUpdateInput>
  }

  /**
   * Lead delete
   */
  export type LeadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    /**
     * Filter which Lead to delete.
     */
    where: LeadWhereUniqueInput
  }

  /**
   * Lead deleteMany
   */
  export type LeadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leads to delete
     */
    where?: LeadWhereInput
  }

  /**
   * Lead.status
   */
  export type Lead$statusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    where?: LeadStatusWhereInput
  }

  /**
   * Lead.Project
   */
  export type Lead$ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    where?: LeadProjectWhereInput
    orderBy?: LeadProjectOrderByWithRelationInput | LeadProjectOrderByWithRelationInput[]
    cursor?: LeadProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadProjectScalarFieldEnum | LeadProjectScalarFieldEnum[]
  }

  /**
   * Lead.leadActivities
   */
  export type Lead$leadActivitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    where?: LeadActivityWhereInput
    orderBy?: LeadActivityOrderByWithRelationInput | LeadActivityOrderByWithRelationInput[]
    cursor?: LeadActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadActivityScalarFieldEnum | LeadActivityScalarFieldEnum[]
  }

  /**
   * Lead.leadNotes
   */
  export type Lead$leadNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    where?: LeadNotesWhereInput
    orderBy?: LeadNotesOrderByWithRelationInput | LeadNotesOrderByWithRelationInput[]
    cursor?: LeadNotesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadNotesScalarFieldEnum | LeadNotesScalarFieldEnum[]
  }

  /**
   * Lead.contacts
   */
  export type Lead$contactsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    cursor?: ContactWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Lead.attachments
   */
  export type Lead$attachmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    cursor?: AttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Lead.integration
   */
  export type Lead$integrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    where?: IntegrationWhereInput
  }

  /**
   * Lead.Email
   */
  export type Lead$EmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    where?: EmailWhereInput
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    cursor?: EmailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Lead without action
   */
  export type LeadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
  }


  /**
   * Model LeadProject
   */

  export type AggregateLeadProject = {
    _count: LeadProjectCountAggregateOutputType | null
    _avg: LeadProjectAvgAggregateOutputType | null
    _sum: LeadProjectSumAggregateOutputType | null
    _min: LeadProjectMinAggregateOutputType | null
    _max: LeadProjectMaxAggregateOutputType | null
  }

  export type LeadProjectAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type LeadProjectSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type LeadProjectMinAggregateOutputType = {
    id: string | null
    leadId: string | null
    projectId: string | null
    integrationId: string | null
    orgId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    status: string | null
  }

  export type LeadProjectMaxAggregateOutputType = {
    id: string | null
    leadId: string | null
    projectId: string | null
    integrationId: string | null
    orgId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    status: string | null
  }

  export type LeadProjectCountAggregateOutputType = {
    id: number
    leadId: number
    projectId: number
    integrationId: number
    orgId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    status: number
    _all: number
  }


  export type LeadProjectAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeadProjectSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeadProjectMinAggregateInputType = {
    id?: true
    leadId?: true
    projectId?: true
    integrationId?: true
    orgId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    status?: true
  }

  export type LeadProjectMaxAggregateInputType = {
    id?: true
    leadId?: true
    projectId?: true
    integrationId?: true
    orgId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    status?: true
  }

  export type LeadProjectCountAggregateInputType = {
    id?: true
    leadId?: true
    projectId?: true
    integrationId?: true
    orgId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    status?: true
    _all?: true
  }

  export type LeadProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadProject to aggregate.
     */
    where?: LeadProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadProjects to fetch.
     */
    orderBy?: LeadProjectOrderByWithRelationInput | LeadProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeadProjects
    **/
    _count?: true | LeadProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadProjectMaxAggregateInputType
  }

  export type GetLeadProjectAggregateType<T extends LeadProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateLeadProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeadProject[P]>
      : GetScalarType<T[P], AggregateLeadProject[P]>
  }




  export type LeadProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadProjectWhereInput
    orderBy?: LeadProjectOrderByWithAggregationInput | LeadProjectOrderByWithAggregationInput[]
    by: LeadProjectScalarFieldEnum[] | LeadProjectScalarFieldEnum
    having?: LeadProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadProjectCountAggregateInputType | true
    _avg?: LeadProjectAvgAggregateInputType
    _sum?: LeadProjectSumAggregateInputType
    _min?: LeadProjectMinAggregateInputType
    _max?: LeadProjectMaxAggregateInputType
  }

  export type LeadProjectGroupByOutputType = {
    id: string
    leadId: string
    projectId: string
    integrationId: string
    orgId: string
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint
    status: string | null
    _count: LeadProjectCountAggregateOutputType | null
    _avg: LeadProjectAvgAggregateOutputType | null
    _sum: LeadProjectSumAggregateOutputType | null
    _min: LeadProjectMinAggregateOutputType | null
    _max: LeadProjectMaxAggregateOutputType | null
  }

  type GetLeadProjectGroupByPayload<T extends LeadProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadProjectGroupByOutputType[P]>
            : GetScalarType<T[P], LeadProjectGroupByOutputType[P]>
        }
      >
    >


  export type LeadProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    projectId?: boolean
    integrationId?: boolean
    orgId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    status?: boolean
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organizatioon?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadProject"]>

  export type LeadProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    projectId?: boolean
    integrationId?: boolean
    orgId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    status?: boolean
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organizatioon?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadProject"]>

  export type LeadProjectSelectScalar = {
    id?: boolean
    leadId?: boolean
    projectId?: boolean
    integrationId?: boolean
    orgId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    status?: boolean
  }

  export type LeadProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organizatioon?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type LeadProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    organizatioon?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $LeadProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeadProject"
    objects: {
      integration: Prisma.$IntegrationPayload<ExtArgs>
      lead: Prisma.$LeadPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
      organizatioon: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      leadId: string
      projectId: string
      integrationId: string
      orgId: string
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint
      status: string | null
    }, ExtArgs["result"]["leadProject"]>
    composites: {}
  }

  type LeadProjectGetPayload<S extends boolean | null | undefined | LeadProjectDefaultArgs> = $Result.GetResult<Prisma.$LeadProjectPayload, S>

  type LeadProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeadProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeadProjectCountAggregateInputType | true
    }

  export interface LeadProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeadProject'], meta: { name: 'LeadProject' } }
    /**
     * Find zero or one LeadProject that matches the filter.
     * @param {LeadProjectFindUniqueArgs} args - Arguments to find a LeadProject
     * @example
     * // Get one LeadProject
     * const leadProject = await prisma.leadProject.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadProjectFindUniqueArgs>(args: SelectSubset<T, LeadProjectFindUniqueArgs<ExtArgs>>): Prisma__LeadProjectClient<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeadProject that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeadProjectFindUniqueOrThrowArgs} args - Arguments to find a LeadProject
     * @example
     * // Get one LeadProject
     * const leadProject = await prisma.leadProject.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadProjectClient<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeadProject that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadProjectFindFirstArgs} args - Arguments to find a LeadProject
     * @example
     * // Get one LeadProject
     * const leadProject = await prisma.leadProject.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadProjectFindFirstArgs>(args?: SelectSubset<T, LeadProjectFindFirstArgs<ExtArgs>>): Prisma__LeadProjectClient<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeadProject that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadProjectFindFirstOrThrowArgs} args - Arguments to find a LeadProject
     * @example
     * // Get one LeadProject
     * const leadProject = await prisma.leadProject.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadProjectClient<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeadProjects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeadProjects
     * const leadProjects = await prisma.leadProject.findMany()
     * 
     * // Get first 10 LeadProjects
     * const leadProjects = await prisma.leadProject.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadProjectWithIdOnly = await prisma.leadProject.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadProjectFindManyArgs>(args?: SelectSubset<T, LeadProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeadProject.
     * @param {LeadProjectCreateArgs} args - Arguments to create a LeadProject.
     * @example
     * // Create one LeadProject
     * const LeadProject = await prisma.leadProject.create({
     *   data: {
     *     // ... data to create a LeadProject
     *   }
     * })
     * 
     */
    create<T extends LeadProjectCreateArgs>(args: SelectSubset<T, LeadProjectCreateArgs<ExtArgs>>): Prisma__LeadProjectClient<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeadProjects.
     * @param {LeadProjectCreateManyArgs} args - Arguments to create many LeadProjects.
     * @example
     * // Create many LeadProjects
     * const leadProject = await prisma.leadProject.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadProjectCreateManyArgs>(args?: SelectSubset<T, LeadProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeadProjects and returns the data saved in the database.
     * @param {LeadProjectCreateManyAndReturnArgs} args - Arguments to create many LeadProjects.
     * @example
     * // Create many LeadProjects
     * const leadProject = await prisma.leadProject.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeadProjects and only return the `id`
     * const leadProjectWithIdOnly = await prisma.leadProject.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeadProject.
     * @param {LeadProjectDeleteArgs} args - Arguments to delete one LeadProject.
     * @example
     * // Delete one LeadProject
     * const LeadProject = await prisma.leadProject.delete({
     *   where: {
     *     // ... filter to delete one LeadProject
     *   }
     * })
     * 
     */
    delete<T extends LeadProjectDeleteArgs>(args: SelectSubset<T, LeadProjectDeleteArgs<ExtArgs>>): Prisma__LeadProjectClient<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeadProject.
     * @param {LeadProjectUpdateArgs} args - Arguments to update one LeadProject.
     * @example
     * // Update one LeadProject
     * const leadProject = await prisma.leadProject.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadProjectUpdateArgs>(args: SelectSubset<T, LeadProjectUpdateArgs<ExtArgs>>): Prisma__LeadProjectClient<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeadProjects.
     * @param {LeadProjectDeleteManyArgs} args - Arguments to filter LeadProjects to delete.
     * @example
     * // Delete a few LeadProjects
     * const { count } = await prisma.leadProject.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadProjectDeleteManyArgs>(args?: SelectSubset<T, LeadProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeadProjects
     * const leadProject = await prisma.leadProject.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadProjectUpdateManyArgs>(args: SelectSubset<T, LeadProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeadProject.
     * @param {LeadProjectUpsertArgs} args - Arguments to update or create a LeadProject.
     * @example
     * // Update or create a LeadProject
     * const leadProject = await prisma.leadProject.upsert({
     *   create: {
     *     // ... data to create a LeadProject
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeadProject we want to update
     *   }
     * })
     */
    upsert<T extends LeadProjectUpsertArgs>(args: SelectSubset<T, LeadProjectUpsertArgs<ExtArgs>>): Prisma__LeadProjectClient<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeadProjects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadProjectCountArgs} args - Arguments to filter LeadProjects to count.
     * @example
     * // Count the number of LeadProjects
     * const count = await prisma.leadProject.count({
     *   where: {
     *     // ... the filter for the LeadProjects we want to count
     *   }
     * })
    **/
    count<T extends LeadProjectCountArgs>(
      args?: Subset<T, LeadProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeadProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadProjectAggregateArgs>(args: Subset<T, LeadProjectAggregateArgs>): Prisma.PrismaPromise<GetLeadProjectAggregateType<T>>

    /**
     * Group by LeadProject.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadProjectGroupByArgs['orderBy'] }
        : { orderBy?: LeadProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeadProject model
   */
  readonly fields: LeadProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeadProject.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    integration<T extends IntegrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IntegrationDefaultArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    lead<T extends LeadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeadDefaultArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    organizatioon<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeadProject model
   */ 
  interface LeadProjectFieldRefs {
    readonly id: FieldRef<"LeadProject", 'String'>
    readonly leadId: FieldRef<"LeadProject", 'String'>
    readonly projectId: FieldRef<"LeadProject", 'String'>
    readonly integrationId: FieldRef<"LeadProject", 'String'>
    readonly orgId: FieldRef<"LeadProject", 'String'>
    readonly createdAt: FieldRef<"LeadProject", 'BigInt'>
    readonly updatedAt: FieldRef<"LeadProject", 'BigInt'>
    readonly deletedAt: FieldRef<"LeadProject", 'BigInt'>
    readonly status: FieldRef<"LeadProject", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LeadProject findUnique
   */
  export type LeadProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    /**
     * Filter, which LeadProject to fetch.
     */
    where: LeadProjectWhereUniqueInput
  }

  /**
   * LeadProject findUniqueOrThrow
   */
  export type LeadProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    /**
     * Filter, which LeadProject to fetch.
     */
    where: LeadProjectWhereUniqueInput
  }

  /**
   * LeadProject findFirst
   */
  export type LeadProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    /**
     * Filter, which LeadProject to fetch.
     */
    where?: LeadProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadProjects to fetch.
     */
    orderBy?: LeadProjectOrderByWithRelationInput | LeadProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadProjects.
     */
    cursor?: LeadProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadProjects.
     */
    distinct?: LeadProjectScalarFieldEnum | LeadProjectScalarFieldEnum[]
  }

  /**
   * LeadProject findFirstOrThrow
   */
  export type LeadProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    /**
     * Filter, which LeadProject to fetch.
     */
    where?: LeadProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadProjects to fetch.
     */
    orderBy?: LeadProjectOrderByWithRelationInput | LeadProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadProjects.
     */
    cursor?: LeadProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadProjects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadProjects.
     */
    distinct?: LeadProjectScalarFieldEnum | LeadProjectScalarFieldEnum[]
  }

  /**
   * LeadProject findMany
   */
  export type LeadProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    /**
     * Filter, which LeadProjects to fetch.
     */
    where?: LeadProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadProjects to fetch.
     */
    orderBy?: LeadProjectOrderByWithRelationInput | LeadProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeadProjects.
     */
    cursor?: LeadProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadProjects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadProjects.
     */
    skip?: number
    distinct?: LeadProjectScalarFieldEnum | LeadProjectScalarFieldEnum[]
  }

  /**
   * LeadProject create
   */
  export type LeadProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a LeadProject.
     */
    data: XOR<LeadProjectCreateInput, LeadProjectUncheckedCreateInput>
  }

  /**
   * LeadProject createMany
   */
  export type LeadProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeadProjects.
     */
    data: LeadProjectCreateManyInput | LeadProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeadProject createManyAndReturn
   */
  export type LeadProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeadProjects.
     */
    data: LeadProjectCreateManyInput | LeadProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadProject update
   */
  export type LeadProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a LeadProject.
     */
    data: XOR<LeadProjectUpdateInput, LeadProjectUncheckedUpdateInput>
    /**
     * Choose, which LeadProject to update.
     */
    where: LeadProjectWhereUniqueInput
  }

  /**
   * LeadProject updateMany
   */
  export type LeadProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeadProjects.
     */
    data: XOR<LeadProjectUpdateManyMutationInput, LeadProjectUncheckedUpdateManyInput>
    /**
     * Filter which LeadProjects to update
     */
    where?: LeadProjectWhereInput
  }

  /**
   * LeadProject upsert
   */
  export type LeadProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the LeadProject to update in case it exists.
     */
    where: LeadProjectWhereUniqueInput
    /**
     * In case the LeadProject found by the `where` argument doesn't exist, create a new LeadProject with this data.
     */
    create: XOR<LeadProjectCreateInput, LeadProjectUncheckedCreateInput>
    /**
     * In case the LeadProject was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadProjectUpdateInput, LeadProjectUncheckedUpdateInput>
  }

  /**
   * LeadProject delete
   */
  export type LeadProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    /**
     * Filter which LeadProject to delete.
     */
    where: LeadProjectWhereUniqueInput
  }

  /**
   * LeadProject deleteMany
   */
  export type LeadProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadProjects to delete
     */
    where?: LeadProjectWhereInput
  }

  /**
   * LeadProject without action
   */
  export type LeadProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
  }


  /**
   * Model Contact
   */

  export type AggregateContact = {
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  export type ContactAvgAggregateOutputType = {
    lastContacted: number | null
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type ContactSumAggregateOutputType = {
    lastContacted: bigint | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type ContactMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    suffix: string | null
    name: string | null
    email: string | null
    secondaryEmail: string | null
    industry: string | null
    type: string | null
    leadId: string | null
    lastContacted: bigint | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    organizationId: string | null
    isPrimay: boolean | null
    isUnsubscribed: boolean | null
  }

  export type ContactMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    suffix: string | null
    name: string | null
    email: string | null
    secondaryEmail: string | null
    industry: string | null
    type: string | null
    leadId: string | null
    lastContacted: bigint | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    organizationId: string | null
    isPrimay: boolean | null
    isUnsubscribed: boolean | null
  }

  export type ContactCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    suffix: number
    phone: number
    name: number
    email: number
    secondaryEmail: number
    primaryPhNo: number
    secondaryPhNo: number
    industry: number
    type: number
    leadId: number
    lastContacted: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    organizationId: number
    isPrimay: number
    isUnsubscribed: number
    _all: number
  }


  export type ContactAvgAggregateInputType = {
    lastContacted?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ContactSumAggregateInputType = {
    lastContacted?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type ContactMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    suffix?: true
    name?: true
    email?: true
    secondaryEmail?: true
    industry?: true
    type?: true
    leadId?: true
    lastContacted?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    organizationId?: true
    isPrimay?: true
    isUnsubscribed?: true
  }

  export type ContactMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    suffix?: true
    name?: true
    email?: true
    secondaryEmail?: true
    industry?: true
    type?: true
    leadId?: true
    lastContacted?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    organizationId?: true
    isPrimay?: true
    isUnsubscribed?: true
  }

  export type ContactCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    suffix?: true
    phone?: true
    name?: true
    email?: true
    secondaryEmail?: true
    primaryPhNo?: true
    secondaryPhNo?: true
    industry?: true
    type?: true
    leadId?: true
    lastContacted?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    organizationId?: true
    isPrimay?: true
    isUnsubscribed?: true
    _all?: true
  }

  export type ContactAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contact to aggregate.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Contacts
    **/
    _count?: true | ContactCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactMaxAggregateInputType
  }

  export type GetContactAggregateType<T extends ContactAggregateArgs> = {
        [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContact[P]>
      : GetScalarType<T[P], AggregateContact[P]>
  }




  export type ContactGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ContactWhereInput
    orderBy?: ContactOrderByWithAggregationInput | ContactOrderByWithAggregationInput[]
    by: ContactScalarFieldEnum[] | ContactScalarFieldEnum
    having?: ContactScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactCountAggregateInputType | true
    _avg?: ContactAvgAggregateInputType
    _sum?: ContactSumAggregateInputType
    _min?: ContactMinAggregateInputType
    _max?: ContactMaxAggregateInputType
  }

  export type ContactGroupByOutputType = {
    id: string
    firstName: string | null
    lastName: string | null
    suffix: string | null
    phone: JsonValue | null
    name: string | null
    email: string | null
    secondaryEmail: string | null
    primaryPhNo: JsonValue | null
    secondaryPhNo: JsonValue | null
    industry: string | null
    type: string | null
    leadId: string
    lastContacted: bigint | null
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint
    organizationId: string
    isPrimay: boolean
    isUnsubscribed: boolean
    _count: ContactCountAggregateOutputType | null
    _avg: ContactAvgAggregateOutputType | null
    _sum: ContactSumAggregateOutputType | null
    _min: ContactMinAggregateOutputType | null
    _max: ContactMaxAggregateOutputType | null
  }

  type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ContactGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactGroupByOutputType[P]>
            : GetScalarType<T[P], ContactGroupByOutputType[P]>
        }
      >
    >


  export type ContactSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    suffix?: boolean
    phone?: boolean
    name?: boolean
    email?: boolean
    secondaryEmail?: boolean
    primaryPhNo?: boolean
    secondaryPhNo?: boolean
    industry?: boolean
    type?: boolean
    leadId?: boolean
    lastContacted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organizationId?: boolean
    isPrimay?: boolean
    isUnsubscribed?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    Email?: boolean | Contact$EmailArgs<ExtArgs>
    _count?: boolean | ContactCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    suffix?: boolean
    phone?: boolean
    name?: boolean
    email?: boolean
    secondaryEmail?: boolean
    primaryPhNo?: boolean
    secondaryPhNo?: boolean
    industry?: boolean
    type?: boolean
    leadId?: boolean
    lastContacted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organizationId?: boolean
    isPrimay?: boolean
    isUnsubscribed?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["contact"]>

  export type ContactSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    suffix?: boolean
    phone?: boolean
    name?: boolean
    email?: boolean
    secondaryEmail?: boolean
    primaryPhNo?: boolean
    secondaryPhNo?: boolean
    industry?: boolean
    type?: boolean
    leadId?: boolean
    lastContacted?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organizationId?: boolean
    isPrimay?: boolean
    isUnsubscribed?: boolean
  }

  export type ContactInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    Email?: boolean | Contact$EmailArgs<ExtArgs>
    _count?: boolean | ContactCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ContactIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }

  export type $ContactPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Contact"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      lead: Prisma.$LeadPayload<ExtArgs>
      Email: Prisma.$EmailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string | null
      lastName: string | null
      suffix: string | null
      phone: Prisma.JsonValue | null
      name: string | null
      email: string | null
      secondaryEmail: string | null
      primaryPhNo: Prisma.JsonValue | null
      secondaryPhNo: Prisma.JsonValue | null
      industry: string | null
      type: string | null
      leadId: string
      lastContacted: bigint | null
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint
      organizationId: string
      isPrimay: boolean
      isUnsubscribed: boolean
    }, ExtArgs["result"]["contact"]>
    composites: {}
  }

  type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = $Result.GetResult<Prisma.$ContactPayload, S>

  type ContactCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ContactCountAggregateInputType | true
    }

  export interface ContactDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
    /**
     * Find zero or one Contact that matches the filter.
     * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ContactFindUniqueArgs>(args: SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Contact that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Contact that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ContactFindFirstArgs>(args?: SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Contact that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
     * @example
     * // Get one Contact
     * const contact = await prisma.contact.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Contacts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contacts
     * const contacts = await prisma.contact.findMany()
     * 
     * // Get first 10 Contacts
     * const contacts = await prisma.contact.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ContactFindManyArgs>(args?: SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Contact.
     * @param {ContactCreateArgs} args - Arguments to create a Contact.
     * @example
     * // Create one Contact
     * const Contact = await prisma.contact.create({
     *   data: {
     *     // ... data to create a Contact
     *   }
     * })
     * 
     */
    create<T extends ContactCreateArgs>(args: SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Contacts.
     * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ContactCreateManyArgs>(args?: SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Contacts and returns the data saved in the database.
     * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
     * @example
     * // Create many Contacts
     * const contact = await prisma.contact.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Contacts and only return the `id`
     * const contactWithIdOnly = await prisma.contact.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Contact.
     * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
     * @example
     * // Delete one Contact
     * const Contact = await prisma.contact.delete({
     *   where: {
     *     // ... filter to delete one Contact
     *   }
     * })
     * 
     */
    delete<T extends ContactDeleteArgs>(args: SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Contact.
     * @param {ContactUpdateArgs} args - Arguments to update one Contact.
     * @example
     * // Update one Contact
     * const contact = await prisma.contact.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ContactUpdateArgs>(args: SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Contacts.
     * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
     * @example
     * // Delete a few Contacts
     * const { count } = await prisma.contact.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ContactDeleteManyArgs>(args?: SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contacts
     * const contact = await prisma.contact.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ContactUpdateManyArgs>(args: SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Contact.
     * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
     * @example
     * // Update or create a Contact
     * const contact = await prisma.contact.upsert({
     *   create: {
     *     // ... data to create a Contact
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contact we want to update
     *   }
     * })
     */
    upsert<T extends ContactUpsertArgs>(args: SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Contacts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
     * @example
     * // Count the number of Contacts
     * const count = await prisma.contact.count({
     *   where: {
     *     // ... the filter for the Contacts we want to count
     *   }
     * })
    **/
    count<T extends ContactCountArgs>(
      args?: Subset<T, ContactCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactAggregateArgs>(args: Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

    /**
     * Group by Contact.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactGroupByArgs['orderBy'] }
        : { orderBy?: ContactGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Contact.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ContactClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    lead<T extends LeadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeadDefaultArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Email<T extends Contact$EmailArgs<ExtArgs> = {}>(args?: Subset<T, Contact$EmailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Contact model
   */ 
  interface ContactFieldRefs {
    readonly id: FieldRef<"Contact", 'String'>
    readonly firstName: FieldRef<"Contact", 'String'>
    readonly lastName: FieldRef<"Contact", 'String'>
    readonly suffix: FieldRef<"Contact", 'String'>
    readonly phone: FieldRef<"Contact", 'Json'>
    readonly name: FieldRef<"Contact", 'String'>
    readonly email: FieldRef<"Contact", 'String'>
    readonly secondaryEmail: FieldRef<"Contact", 'String'>
    readonly primaryPhNo: FieldRef<"Contact", 'Json'>
    readonly secondaryPhNo: FieldRef<"Contact", 'Json'>
    readonly industry: FieldRef<"Contact", 'String'>
    readonly type: FieldRef<"Contact", 'String'>
    readonly leadId: FieldRef<"Contact", 'String'>
    readonly lastContacted: FieldRef<"Contact", 'BigInt'>
    readonly createdAt: FieldRef<"Contact", 'BigInt'>
    readonly updatedAt: FieldRef<"Contact", 'BigInt'>
    readonly deletedAt: FieldRef<"Contact", 'BigInt'>
    readonly organizationId: FieldRef<"Contact", 'String'>
    readonly isPrimay: FieldRef<"Contact", 'Boolean'>
    readonly isUnsubscribed: FieldRef<"Contact", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Contact findUnique
   */
  export type ContactFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findUniqueOrThrow
   */
  export type ContactFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact findFirst
   */
  export type ContactFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findFirstOrThrow
   */
  export type ContactFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contact to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Contacts.
     */
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact findMany
   */
  export type ContactFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter, which Contacts to fetch.
     */
    where?: ContactWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Contacts to fetch.
     */
    orderBy?: ContactOrderByWithRelationInput | ContactOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Contacts.
     */
    cursor?: ContactWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Contacts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Contacts.
     */
    skip?: number
    distinct?: ContactScalarFieldEnum | ContactScalarFieldEnum[]
  }

  /**
   * Contact create
   */
  export type ContactCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to create a Contact.
     */
    data: XOR<ContactCreateInput, ContactUncheckedCreateInput>
  }

  /**
   * Contact createMany
   */
  export type ContactCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Contact createManyAndReturn
   */
  export type ContactCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Contacts.
     */
    data: ContactCreateManyInput | ContactCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Contact update
   */
  export type ContactUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The data needed to update a Contact.
     */
    data: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
    /**
     * Choose, which Contact to update.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact updateMany
   */
  export type ContactUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Contacts.
     */
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyInput>
    /**
     * Filter which Contacts to update
     */
    where?: ContactWhereInput
  }

  /**
   * Contact upsert
   */
  export type ContactUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * The filter to search for the Contact to update in case it exists.
     */
    where: ContactWhereUniqueInput
    /**
     * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
     */
    create: XOR<ContactCreateInput, ContactUncheckedCreateInput>
    /**
     * In case the Contact was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ContactUpdateInput, ContactUncheckedUpdateInput>
  }

  /**
   * Contact delete
   */
  export type ContactDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    /**
     * Filter which Contact to delete.
     */
    where: ContactWhereUniqueInput
  }

  /**
   * Contact deleteMany
   */
  export type ContactDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Contacts to delete
     */
    where?: ContactWhereInput
  }

  /**
   * Contact.Email
   */
  export type Contact$EmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    where?: EmailWhereInput
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    cursor?: EmailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Contact without action
   */
  export type ContactDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
  }


  /**
   * Model Attachment
   */

  export type AggregateAttachment = {
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  export type AttachmentAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type AttachmentSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type AttachmentMinAggregateOutputType = {
    id: string | null
    attachmentUrl: string | null
    attachmentType: string | null
    eTag: string | null
    attachmentName: string | null
    leadId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type AttachmentMaxAggregateOutputType = {
    id: string | null
    attachmentUrl: string | null
    attachmentType: string | null
    eTag: string | null
    attachmentName: string | null
    leadId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type AttachmentCountAggregateOutputType = {
    id: number
    attachmentUrl: number
    attachmentType: number
    eTag: number
    attachmentName: number
    leadId: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type AttachmentAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AttachmentSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AttachmentMinAggregateInputType = {
    id?: true
    attachmentUrl?: true
    attachmentType?: true
    eTag?: true
    attachmentName?: true
    leadId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AttachmentMaxAggregateInputType = {
    id?: true
    attachmentUrl?: true
    attachmentType?: true
    eTag?: true
    attachmentName?: true
    leadId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type AttachmentCountAggregateInputType = {
    id?: true
    attachmentUrl?: true
    attachmentType?: true
    eTag?: true
    attachmentName?: true
    leadId?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type AttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachment to aggregate.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Attachments
    **/
    _count?: true | AttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttachmentMaxAggregateInputType
  }

  export type GetAttachmentAggregateType<T extends AttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttachment[P]>
      : GetScalarType<T[P], AggregateAttachment[P]>
  }




  export type AttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AttachmentWhereInput
    orderBy?: AttachmentOrderByWithAggregationInput | AttachmentOrderByWithAggregationInput[]
    by: AttachmentScalarFieldEnum[] | AttachmentScalarFieldEnum
    having?: AttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttachmentCountAggregateInputType | true
    _avg?: AttachmentAvgAggregateInputType
    _sum?: AttachmentSumAggregateInputType
    _min?: AttachmentMinAggregateInputType
    _max?: AttachmentMaxAggregateInputType
  }

  export type AttachmentGroupByOutputType = {
    id: string
    attachmentUrl: string
    attachmentType: string
    eTag: string
    attachmentName: string
    leadId: string
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint
    _count: AttachmentCountAggregateOutputType | null
    _avg: AttachmentAvgAggregateOutputType | null
    _sum: AttachmentSumAggregateOutputType | null
    _min: AttachmentMinAggregateOutputType | null
    _max: AttachmentMaxAggregateOutputType | null
  }

  type GetAttachmentGroupByPayload<T extends AttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], AttachmentGroupByOutputType[P]>
        }
      >
    >


  export type AttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    attachmentUrl?: boolean
    attachmentType?: boolean
    eTag?: boolean
    attachmentName?: boolean
    leadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    attachmentUrl?: boolean
    attachmentType?: boolean
    eTag?: boolean
    attachmentName?: boolean
    leadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attachment"]>

  export type AttachmentSelectScalar = {
    id?: boolean
    attachmentUrl?: boolean
    attachmentType?: boolean
    eTag?: boolean
    attachmentName?: boolean
    leadId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type AttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }
  export type AttachmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lead?: boolean | LeadDefaultArgs<ExtArgs>
  }

  export type $AttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Attachment"
    objects: {
      lead: Prisma.$LeadPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      attachmentUrl: string
      attachmentType: string
      eTag: string
      attachmentName: string
      leadId: string
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint
    }, ExtArgs["result"]["attachment"]>
    composites: {}
  }

  type AttachmentGetPayload<S extends boolean | null | undefined | AttachmentDefaultArgs> = $Result.GetResult<Prisma.$AttachmentPayload, S>

  type AttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AttachmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AttachmentCountAggregateInputType | true
    }

  export interface AttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Attachment'], meta: { name: 'Attachment' } }
    /**
     * Find zero or one Attachment that matches the filter.
     * @param {AttachmentFindUniqueArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AttachmentFindUniqueArgs>(args: SelectSubset<T, AttachmentFindUniqueArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Attachment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AttachmentFindUniqueOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AttachmentFindUniqueOrThrowArgs>(args: SelectSubset<T, AttachmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Attachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AttachmentFindFirstArgs>(args?: SelectSubset<T, AttachmentFindFirstArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Attachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindFirstOrThrowArgs} args - Arguments to find a Attachment
     * @example
     * // Get one Attachment
     * const attachment = await prisma.attachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AttachmentFindFirstOrThrowArgs>(args?: SelectSubset<T, AttachmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Attachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attachments
     * const attachments = await prisma.attachment.findMany()
     * 
     * // Get first 10 Attachments
     * const attachments = await prisma.attachment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attachmentWithIdOnly = await prisma.attachment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AttachmentFindManyArgs>(args?: SelectSubset<T, AttachmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Attachment.
     * @param {AttachmentCreateArgs} args - Arguments to create a Attachment.
     * @example
     * // Create one Attachment
     * const Attachment = await prisma.attachment.create({
     *   data: {
     *     // ... data to create a Attachment
     *   }
     * })
     * 
     */
    create<T extends AttachmentCreateArgs>(args: SelectSubset<T, AttachmentCreateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Attachments.
     * @param {AttachmentCreateManyArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AttachmentCreateManyArgs>(args?: SelectSubset<T, AttachmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Attachments and returns the data saved in the database.
     * @param {AttachmentCreateManyAndReturnArgs} args - Arguments to create many Attachments.
     * @example
     * // Create many Attachments
     * const attachment = await prisma.attachment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Attachments and only return the `id`
     * const attachmentWithIdOnly = await prisma.attachment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AttachmentCreateManyAndReturnArgs>(args?: SelectSubset<T, AttachmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Attachment.
     * @param {AttachmentDeleteArgs} args - Arguments to delete one Attachment.
     * @example
     * // Delete one Attachment
     * const Attachment = await prisma.attachment.delete({
     *   where: {
     *     // ... filter to delete one Attachment
     *   }
     * })
     * 
     */
    delete<T extends AttachmentDeleteArgs>(args: SelectSubset<T, AttachmentDeleteArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Attachment.
     * @param {AttachmentUpdateArgs} args - Arguments to update one Attachment.
     * @example
     * // Update one Attachment
     * const attachment = await prisma.attachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AttachmentUpdateArgs>(args: SelectSubset<T, AttachmentUpdateArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Attachments.
     * @param {AttachmentDeleteManyArgs} args - Arguments to filter Attachments to delete.
     * @example
     * // Delete a few Attachments
     * const { count } = await prisma.attachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AttachmentDeleteManyArgs>(args?: SelectSubset<T, AttachmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attachments
     * const attachment = await prisma.attachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AttachmentUpdateManyArgs>(args: SelectSubset<T, AttachmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attachment.
     * @param {AttachmentUpsertArgs} args - Arguments to update or create a Attachment.
     * @example
     * // Update or create a Attachment
     * const attachment = await prisma.attachment.upsert({
     *   create: {
     *     // ... data to create a Attachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attachment we want to update
     *   }
     * })
     */
    upsert<T extends AttachmentUpsertArgs>(args: SelectSubset<T, AttachmentUpsertArgs<ExtArgs>>): Prisma__AttachmentClient<$Result.GetResult<Prisma.$AttachmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Attachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentCountArgs} args - Arguments to filter Attachments to count.
     * @example
     * // Count the number of Attachments
     * const count = await prisma.attachment.count({
     *   where: {
     *     // ... the filter for the Attachments we want to count
     *   }
     * })
    **/
    count<T extends AttachmentCountArgs>(
      args?: Subset<T, AttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttachmentAggregateArgs>(args: Subset<T, AttachmentAggregateArgs>): Prisma.PrismaPromise<GetAttachmentAggregateType<T>>

    /**
     * Group by Attachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AttachmentGroupByArgs['orderBy'] }
        : { orderBy?: AttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Attachment model
   */
  readonly fields: AttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Attachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lead<T extends LeadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeadDefaultArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Attachment model
   */ 
  interface AttachmentFieldRefs {
    readonly id: FieldRef<"Attachment", 'String'>
    readonly attachmentUrl: FieldRef<"Attachment", 'String'>
    readonly attachmentType: FieldRef<"Attachment", 'String'>
    readonly eTag: FieldRef<"Attachment", 'String'>
    readonly attachmentName: FieldRef<"Attachment", 'String'>
    readonly leadId: FieldRef<"Attachment", 'String'>
    readonly createdAt: FieldRef<"Attachment", 'BigInt'>
    readonly updatedAt: FieldRef<"Attachment", 'BigInt'>
    readonly deletedAt: FieldRef<"Attachment", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Attachment findUnique
   */
  export type AttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findUniqueOrThrow
   */
  export type AttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment findFirst
   */
  export type AttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findFirstOrThrow
   */
  export type AttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachment to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Attachments.
     */
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment findMany
   */
  export type AttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter, which Attachments to fetch.
     */
    where?: AttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Attachments to fetch.
     */
    orderBy?: AttachmentOrderByWithRelationInput | AttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Attachments.
     */
    cursor?: AttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Attachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Attachments.
     */
    skip?: number
    distinct?: AttachmentScalarFieldEnum | AttachmentScalarFieldEnum[]
  }

  /**
   * Attachment create
   */
  export type AttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Attachment.
     */
    data: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
  }

  /**
   * Attachment createMany
   */
  export type AttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Attachment createManyAndReturn
   */
  export type AttachmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Attachments.
     */
    data: AttachmentCreateManyInput | AttachmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Attachment update
   */
  export type AttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Attachment.
     */
    data: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
    /**
     * Choose, which Attachment to update.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment updateMany
   */
  export type AttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Attachments.
     */
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyInput>
    /**
     * Filter which Attachments to update
     */
    where?: AttachmentWhereInput
  }

  /**
   * Attachment upsert
   */
  export type AttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Attachment to update in case it exists.
     */
    where: AttachmentWhereUniqueInput
    /**
     * In case the Attachment found by the `where` argument doesn't exist, create a new Attachment with this data.
     */
    create: XOR<AttachmentCreateInput, AttachmentUncheckedCreateInput>
    /**
     * In case the Attachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AttachmentUpdateInput, AttachmentUncheckedUpdateInput>
  }

  /**
   * Attachment delete
   */
  export type AttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
    /**
     * Filter which Attachment to delete.
     */
    where: AttachmentWhereUniqueInput
  }

  /**
   * Attachment deleteMany
   */
  export type AttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Attachments to delete
     */
    where?: AttachmentWhereInput
  }

  /**
   * Attachment without action
   */
  export type AttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Attachment
     */
    select?: AttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AttachmentInclude<ExtArgs> | null
  }


  /**
   * Model LeadActivity
   */

  export type AggregateLeadActivity = {
    _count: LeadActivityCountAggregateOutputType | null
    _avg: LeadActivityAvgAggregateOutputType | null
    _sum: LeadActivitySumAggregateOutputType | null
    _min: LeadActivityMinAggregateOutputType | null
    _max: LeadActivityMaxAggregateOutputType | null
  }

  export type LeadActivityAvgAggregateOutputType = {
    updatedAt: number | null
    createdAt: number | null
    deletedAt: number | null
  }

  export type LeadActivitySumAggregateOutputType = {
    updatedAt: bigint | null
    createdAt: bigint | null
    deletedAt: bigint | null
  }

  export type LeadActivityMinAggregateOutputType = {
    id: string | null
    leadId: string | null
    updatedAt: bigint | null
    createdAt: bigint | null
    deletedAt: bigint | null
    userId: string | null
    noteId: string | null
    type: $Enums.LeadActivityType | null
    orgId: string | null
  }

  export type LeadActivityMaxAggregateOutputType = {
    id: string | null
    leadId: string | null
    updatedAt: bigint | null
    createdAt: bigint | null
    deletedAt: bigint | null
    userId: string | null
    noteId: string | null
    type: $Enums.LeadActivityType | null
    orgId: string | null
  }

  export type LeadActivityCountAggregateOutputType = {
    id: number
    leadId: number
    data: number
    updatedAt: number
    createdAt: number
    deletedAt: number
    userId: number
    noteId: number
    type: number
    orgId: number
    _all: number
  }


  export type LeadActivityAvgAggregateInputType = {
    updatedAt?: true
    createdAt?: true
    deletedAt?: true
  }

  export type LeadActivitySumAggregateInputType = {
    updatedAt?: true
    createdAt?: true
    deletedAt?: true
  }

  export type LeadActivityMinAggregateInputType = {
    id?: true
    leadId?: true
    updatedAt?: true
    createdAt?: true
    deletedAt?: true
    userId?: true
    noteId?: true
    type?: true
    orgId?: true
  }

  export type LeadActivityMaxAggregateInputType = {
    id?: true
    leadId?: true
    updatedAt?: true
    createdAt?: true
    deletedAt?: true
    userId?: true
    noteId?: true
    type?: true
    orgId?: true
  }

  export type LeadActivityCountAggregateInputType = {
    id?: true
    leadId?: true
    data?: true
    updatedAt?: true
    createdAt?: true
    deletedAt?: true
    userId?: true
    noteId?: true
    type?: true
    orgId?: true
    _all?: true
  }

  export type LeadActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadActivity to aggregate.
     */
    where?: LeadActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadActivities to fetch.
     */
    orderBy?: LeadActivityOrderByWithRelationInput | LeadActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeadActivities
    **/
    _count?: true | LeadActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadActivityMaxAggregateInputType
  }

  export type GetLeadActivityAggregateType<T extends LeadActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateLeadActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeadActivity[P]>
      : GetScalarType<T[P], AggregateLeadActivity[P]>
  }




  export type LeadActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadActivityWhereInput
    orderBy?: LeadActivityOrderByWithAggregationInput | LeadActivityOrderByWithAggregationInput[]
    by: LeadActivityScalarFieldEnum[] | LeadActivityScalarFieldEnum
    having?: LeadActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadActivityCountAggregateInputType | true
    _avg?: LeadActivityAvgAggregateInputType
    _sum?: LeadActivitySumAggregateInputType
    _min?: LeadActivityMinAggregateInputType
    _max?: LeadActivityMaxAggregateInputType
  }

  export type LeadActivityGroupByOutputType = {
    id: string
    leadId: string
    data: JsonValue
    updatedAt: bigint
    createdAt: bigint
    deletedAt: bigint
    userId: string | null
    noteId: string | null
    type: $Enums.LeadActivityType
    orgId: string
    _count: LeadActivityCountAggregateOutputType | null
    _avg: LeadActivityAvgAggregateOutputType | null
    _sum: LeadActivitySumAggregateOutputType | null
    _min: LeadActivityMinAggregateOutputType | null
    _max: LeadActivityMaxAggregateOutputType | null
  }

  type GetLeadActivityGroupByPayload<T extends LeadActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadActivityGroupByOutputType[P]>
            : GetScalarType<T[P], LeadActivityGroupByOutputType[P]>
        }
      >
    >


  export type LeadActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    data?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    userId?: boolean
    noteId?: boolean
    type?: boolean
    orgId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | LeadActivity$userArgs<ExtArgs>
    note?: boolean | LeadActivity$noteArgs<ExtArgs>
  }, ExtArgs["result"]["leadActivity"]>

  export type LeadActivitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leadId?: boolean
    data?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    userId?: boolean
    noteId?: boolean
    type?: boolean
    orgId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | LeadActivity$userArgs<ExtArgs>
    note?: boolean | LeadActivity$noteArgs<ExtArgs>
  }, ExtArgs["result"]["leadActivity"]>

  export type LeadActivitySelectScalar = {
    id?: boolean
    leadId?: boolean
    data?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    deletedAt?: boolean
    userId?: boolean
    noteId?: boolean
    type?: boolean
    orgId?: boolean
  }

  export type LeadActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | LeadActivity$userArgs<ExtArgs>
    note?: boolean | LeadActivity$noteArgs<ExtArgs>
  }
  export type LeadActivityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    lead?: boolean | LeadDefaultArgs<ExtArgs>
    user?: boolean | LeadActivity$userArgs<ExtArgs>
    note?: boolean | LeadActivity$noteArgs<ExtArgs>
  }

  export type $LeadActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeadActivity"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
      lead: Prisma.$LeadPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs> | null
      note: Prisma.$LeadNotesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      leadId: string
      data: Prisma.JsonValue
      updatedAt: bigint
      createdAt: bigint
      deletedAt: bigint
      userId: string | null
      noteId: string | null
      type: $Enums.LeadActivityType
      orgId: string
    }, ExtArgs["result"]["leadActivity"]>
    composites: {}
  }

  type LeadActivityGetPayload<S extends boolean | null | undefined | LeadActivityDefaultArgs> = $Result.GetResult<Prisma.$LeadActivityPayload, S>

  type LeadActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeadActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeadActivityCountAggregateInputType | true
    }

  export interface LeadActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeadActivity'], meta: { name: 'LeadActivity' } }
    /**
     * Find zero or one LeadActivity that matches the filter.
     * @param {LeadActivityFindUniqueArgs} args - Arguments to find a LeadActivity
     * @example
     * // Get one LeadActivity
     * const leadActivity = await prisma.leadActivity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadActivityFindUniqueArgs>(args: SelectSubset<T, LeadActivityFindUniqueArgs<ExtArgs>>): Prisma__LeadActivityClient<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeadActivity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeadActivityFindUniqueOrThrowArgs} args - Arguments to find a LeadActivity
     * @example
     * // Get one LeadActivity
     * const leadActivity = await prisma.leadActivity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadActivityFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadActivityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadActivityClient<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeadActivity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadActivityFindFirstArgs} args - Arguments to find a LeadActivity
     * @example
     * // Get one LeadActivity
     * const leadActivity = await prisma.leadActivity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadActivityFindFirstArgs>(args?: SelectSubset<T, LeadActivityFindFirstArgs<ExtArgs>>): Prisma__LeadActivityClient<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeadActivity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadActivityFindFirstOrThrowArgs} args - Arguments to find a LeadActivity
     * @example
     * // Get one LeadActivity
     * const leadActivity = await prisma.leadActivity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadActivityFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadActivityFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadActivityClient<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeadActivities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadActivityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeadActivities
     * const leadActivities = await prisma.leadActivity.findMany()
     * 
     * // Get first 10 LeadActivities
     * const leadActivities = await prisma.leadActivity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadActivityWithIdOnly = await prisma.leadActivity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadActivityFindManyArgs>(args?: SelectSubset<T, LeadActivityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeadActivity.
     * @param {LeadActivityCreateArgs} args - Arguments to create a LeadActivity.
     * @example
     * // Create one LeadActivity
     * const LeadActivity = await prisma.leadActivity.create({
     *   data: {
     *     // ... data to create a LeadActivity
     *   }
     * })
     * 
     */
    create<T extends LeadActivityCreateArgs>(args: SelectSubset<T, LeadActivityCreateArgs<ExtArgs>>): Prisma__LeadActivityClient<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeadActivities.
     * @param {LeadActivityCreateManyArgs} args - Arguments to create many LeadActivities.
     * @example
     * // Create many LeadActivities
     * const leadActivity = await prisma.leadActivity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadActivityCreateManyArgs>(args?: SelectSubset<T, LeadActivityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeadActivities and returns the data saved in the database.
     * @param {LeadActivityCreateManyAndReturnArgs} args - Arguments to create many LeadActivities.
     * @example
     * // Create many LeadActivities
     * const leadActivity = await prisma.leadActivity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeadActivities and only return the `id`
     * const leadActivityWithIdOnly = await prisma.leadActivity.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadActivityCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadActivityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeadActivity.
     * @param {LeadActivityDeleteArgs} args - Arguments to delete one LeadActivity.
     * @example
     * // Delete one LeadActivity
     * const LeadActivity = await prisma.leadActivity.delete({
     *   where: {
     *     // ... filter to delete one LeadActivity
     *   }
     * })
     * 
     */
    delete<T extends LeadActivityDeleteArgs>(args: SelectSubset<T, LeadActivityDeleteArgs<ExtArgs>>): Prisma__LeadActivityClient<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeadActivity.
     * @param {LeadActivityUpdateArgs} args - Arguments to update one LeadActivity.
     * @example
     * // Update one LeadActivity
     * const leadActivity = await prisma.leadActivity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadActivityUpdateArgs>(args: SelectSubset<T, LeadActivityUpdateArgs<ExtArgs>>): Prisma__LeadActivityClient<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeadActivities.
     * @param {LeadActivityDeleteManyArgs} args - Arguments to filter LeadActivities to delete.
     * @example
     * // Delete a few LeadActivities
     * const { count } = await prisma.leadActivity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadActivityDeleteManyArgs>(args?: SelectSubset<T, LeadActivityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeadActivities
     * const leadActivity = await prisma.leadActivity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadActivityUpdateManyArgs>(args: SelectSubset<T, LeadActivityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeadActivity.
     * @param {LeadActivityUpsertArgs} args - Arguments to update or create a LeadActivity.
     * @example
     * // Update or create a LeadActivity
     * const leadActivity = await prisma.leadActivity.upsert({
     *   create: {
     *     // ... data to create a LeadActivity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeadActivity we want to update
     *   }
     * })
     */
    upsert<T extends LeadActivityUpsertArgs>(args: SelectSubset<T, LeadActivityUpsertArgs<ExtArgs>>): Prisma__LeadActivityClient<$Result.GetResult<Prisma.$LeadActivityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeadActivities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadActivityCountArgs} args - Arguments to filter LeadActivities to count.
     * @example
     * // Count the number of LeadActivities
     * const count = await prisma.leadActivity.count({
     *   where: {
     *     // ... the filter for the LeadActivities we want to count
     *   }
     * })
    **/
    count<T extends LeadActivityCountArgs>(
      args?: Subset<T, LeadActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeadActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadActivityAggregateArgs>(args: Subset<T, LeadActivityAggregateArgs>): Prisma.PrismaPromise<GetLeadActivityAggregateType<T>>

    /**
     * Group by LeadActivity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadActivityGroupByArgs['orderBy'] }
        : { orderBy?: LeadActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeadActivity model
   */
  readonly fields: LeadActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeadActivity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    lead<T extends LeadDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeadDefaultArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    user<T extends LeadActivity$userArgs<ExtArgs> = {}>(args?: Subset<T, LeadActivity$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    note<T extends LeadActivity$noteArgs<ExtArgs> = {}>(args?: Subset<T, LeadActivity$noteArgs<ExtArgs>>): Prisma__LeadNotesClient<$Result.GetResult<Prisma.$LeadNotesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeadActivity model
   */ 
  interface LeadActivityFieldRefs {
    readonly id: FieldRef<"LeadActivity", 'String'>
    readonly leadId: FieldRef<"LeadActivity", 'String'>
    readonly data: FieldRef<"LeadActivity", 'Json'>
    readonly updatedAt: FieldRef<"LeadActivity", 'BigInt'>
    readonly createdAt: FieldRef<"LeadActivity", 'BigInt'>
    readonly deletedAt: FieldRef<"LeadActivity", 'BigInt'>
    readonly userId: FieldRef<"LeadActivity", 'String'>
    readonly noteId: FieldRef<"LeadActivity", 'String'>
    readonly type: FieldRef<"LeadActivity", 'LeadActivityType'>
    readonly orgId: FieldRef<"LeadActivity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LeadActivity findUnique
   */
  export type LeadActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    /**
     * Filter, which LeadActivity to fetch.
     */
    where: LeadActivityWhereUniqueInput
  }

  /**
   * LeadActivity findUniqueOrThrow
   */
  export type LeadActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    /**
     * Filter, which LeadActivity to fetch.
     */
    where: LeadActivityWhereUniqueInput
  }

  /**
   * LeadActivity findFirst
   */
  export type LeadActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    /**
     * Filter, which LeadActivity to fetch.
     */
    where?: LeadActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadActivities to fetch.
     */
    orderBy?: LeadActivityOrderByWithRelationInput | LeadActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadActivities.
     */
    cursor?: LeadActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadActivities.
     */
    distinct?: LeadActivityScalarFieldEnum | LeadActivityScalarFieldEnum[]
  }

  /**
   * LeadActivity findFirstOrThrow
   */
  export type LeadActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    /**
     * Filter, which LeadActivity to fetch.
     */
    where?: LeadActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadActivities to fetch.
     */
    orderBy?: LeadActivityOrderByWithRelationInput | LeadActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadActivities.
     */
    cursor?: LeadActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadActivities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadActivities.
     */
    distinct?: LeadActivityScalarFieldEnum | LeadActivityScalarFieldEnum[]
  }

  /**
   * LeadActivity findMany
   */
  export type LeadActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    /**
     * Filter, which LeadActivities to fetch.
     */
    where?: LeadActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadActivities to fetch.
     */
    orderBy?: LeadActivityOrderByWithRelationInput | LeadActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeadActivities.
     */
    cursor?: LeadActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadActivities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadActivities.
     */
    skip?: number
    distinct?: LeadActivityScalarFieldEnum | LeadActivityScalarFieldEnum[]
  }

  /**
   * LeadActivity create
   */
  export type LeadActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a LeadActivity.
     */
    data: XOR<LeadActivityCreateInput, LeadActivityUncheckedCreateInput>
  }

  /**
   * LeadActivity createMany
   */
  export type LeadActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeadActivities.
     */
    data: LeadActivityCreateManyInput | LeadActivityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeadActivity createManyAndReturn
   */
  export type LeadActivityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeadActivities.
     */
    data: LeadActivityCreateManyInput | LeadActivityCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadActivity update
   */
  export type LeadActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a LeadActivity.
     */
    data: XOR<LeadActivityUpdateInput, LeadActivityUncheckedUpdateInput>
    /**
     * Choose, which LeadActivity to update.
     */
    where: LeadActivityWhereUniqueInput
  }

  /**
   * LeadActivity updateMany
   */
  export type LeadActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeadActivities.
     */
    data: XOR<LeadActivityUpdateManyMutationInput, LeadActivityUncheckedUpdateManyInput>
    /**
     * Filter which LeadActivities to update
     */
    where?: LeadActivityWhereInput
  }

  /**
   * LeadActivity upsert
   */
  export type LeadActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the LeadActivity to update in case it exists.
     */
    where: LeadActivityWhereUniqueInput
    /**
     * In case the LeadActivity found by the `where` argument doesn't exist, create a new LeadActivity with this data.
     */
    create: XOR<LeadActivityCreateInput, LeadActivityUncheckedCreateInput>
    /**
     * In case the LeadActivity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadActivityUpdateInput, LeadActivityUncheckedUpdateInput>
  }

  /**
   * LeadActivity delete
   */
  export type LeadActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
    /**
     * Filter which LeadActivity to delete.
     */
    where: LeadActivityWhereUniqueInput
  }

  /**
   * LeadActivity deleteMany
   */
  export type LeadActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadActivities to delete
     */
    where?: LeadActivityWhereInput
  }

  /**
   * LeadActivity.user
   */
  export type LeadActivity$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * LeadActivity.note
   */
  export type LeadActivity$noteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadNotes
     */
    select?: LeadNotesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadNotesInclude<ExtArgs> | null
    where?: LeadNotesWhereInput
  }

  /**
   * LeadActivity without action
   */
  export type LeadActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadActivity
     */
    select?: LeadActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadActivityInclude<ExtArgs> | null
  }


  /**
   * Model Email
   */

  export type AggregateEmail = {
    _count: EmailCountAggregateOutputType | null
    _avg: EmailAvgAggregateOutputType | null
    _sum: EmailSumAggregateOutputType | null
    _min: EmailMinAggregateOutputType | null
    _max: EmailMaxAggregateOutputType | null
  }

  export type EmailAvgAggregateOutputType = {
    openedAt: number | null
    clickedAt: number | null
    sentAt: number | null
    deletedAt: number | null
  }

  export type EmailSumAggregateOutputType = {
    openedAt: bigint | null
    clickedAt: bigint | null
    sentAt: bigint | null
    deletedAt: bigint | null
  }

  export type EmailMinAggregateOutputType = {
    id: string | null
    replyTo: string | null
    status: $Enums.EmailStatus | null
    subject: string | null
    body: string | null
    html: string | null
    trackingId: string | null
    messageId: string | null
    threadId: string | null
    historyId: string | null
    isOpened: boolean | null
    openedAt: bigint | null
    isClicked: boolean | null
    clickedAt: bigint | null
    sentAt: bigint | null
    deletedAt: bigint | null
    integrationId: string | null
    organizationId: string | null
    leadId: string | null
    contactId: string | null
    source: $Enums.IntegrationType | null
  }

  export type EmailMaxAggregateOutputType = {
    id: string | null
    replyTo: string | null
    status: $Enums.EmailStatus | null
    subject: string | null
    body: string | null
    html: string | null
    trackingId: string | null
    messageId: string | null
    threadId: string | null
    historyId: string | null
    isOpened: boolean | null
    openedAt: bigint | null
    isClicked: boolean | null
    clickedAt: bigint | null
    sentAt: bigint | null
    deletedAt: bigint | null
    integrationId: string | null
    organizationId: string | null
    leadId: string | null
    contactId: string | null
    source: $Enums.IntegrationType | null
  }

  export type EmailCountAggregateOutputType = {
    id: number
    from: number
    to: number
    replyTo: number
    cc: number
    bcc: number
    status: number
    subject: number
    body: number
    html: number
    trackingId: number
    messageId: number
    threadId: number
    historyId: number
    labelIds: number
    isOpened: number
    openedAt: number
    isClicked: number
    clickedAt: number
    sentAt: number
    deletedAt: number
    integrationId: number
    organizationId: number
    leadId: number
    contactId: number
    source: number
    _all: number
  }


  export type EmailAvgAggregateInputType = {
    openedAt?: true
    clickedAt?: true
    sentAt?: true
    deletedAt?: true
  }

  export type EmailSumAggregateInputType = {
    openedAt?: true
    clickedAt?: true
    sentAt?: true
    deletedAt?: true
  }

  export type EmailMinAggregateInputType = {
    id?: true
    replyTo?: true
    status?: true
    subject?: true
    body?: true
    html?: true
    trackingId?: true
    messageId?: true
    threadId?: true
    historyId?: true
    isOpened?: true
    openedAt?: true
    isClicked?: true
    clickedAt?: true
    sentAt?: true
    deletedAt?: true
    integrationId?: true
    organizationId?: true
    leadId?: true
    contactId?: true
    source?: true
  }

  export type EmailMaxAggregateInputType = {
    id?: true
    replyTo?: true
    status?: true
    subject?: true
    body?: true
    html?: true
    trackingId?: true
    messageId?: true
    threadId?: true
    historyId?: true
    isOpened?: true
    openedAt?: true
    isClicked?: true
    clickedAt?: true
    sentAt?: true
    deletedAt?: true
    integrationId?: true
    organizationId?: true
    leadId?: true
    contactId?: true
    source?: true
  }

  export type EmailCountAggregateInputType = {
    id?: true
    from?: true
    to?: true
    replyTo?: true
    cc?: true
    bcc?: true
    status?: true
    subject?: true
    body?: true
    html?: true
    trackingId?: true
    messageId?: true
    threadId?: true
    historyId?: true
    labelIds?: true
    isOpened?: true
    openedAt?: true
    isClicked?: true
    clickedAt?: true
    sentAt?: true
    deletedAt?: true
    integrationId?: true
    organizationId?: true
    leadId?: true
    contactId?: true
    source?: true
    _all?: true
  }

  export type EmailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Email to aggregate.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Emails
    **/
    _count?: true | EmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailMaxAggregateInputType
  }

  export type GetEmailAggregateType<T extends EmailAggregateArgs> = {
        [P in keyof T & keyof AggregateEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmail[P]>
      : GetScalarType<T[P], AggregateEmail[P]>
  }




  export type EmailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailWhereInput
    orderBy?: EmailOrderByWithAggregationInput | EmailOrderByWithAggregationInput[]
    by: EmailScalarFieldEnum[] | EmailScalarFieldEnum
    having?: EmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailCountAggregateInputType | true
    _avg?: EmailAvgAggregateInputType
    _sum?: EmailSumAggregateInputType
    _min?: EmailMinAggregateInputType
    _max?: EmailMaxAggregateInputType
  }

  export type EmailGroupByOutputType = {
    id: string
    from: JsonValue
    to: string[]
    replyTo: string | null
    cc: string[]
    bcc: string[]
    status: $Enums.EmailStatus
    subject: string | null
    body: string
    html: string | null
    trackingId: string | null
    messageId: string | null
    threadId: string | null
    historyId: string | null
    labelIds: string[]
    isOpened: boolean
    openedAt: bigint
    isClicked: boolean
    clickedAt: bigint
    sentAt: bigint
    deletedAt: bigint
    integrationId: string
    organizationId: string
    leadId: string | null
    contactId: string | null
    source: $Enums.IntegrationType
    _count: EmailCountAggregateOutputType | null
    _avg: EmailAvgAggregateOutputType | null
    _sum: EmailSumAggregateOutputType | null
    _min: EmailMinAggregateOutputType | null
    _max: EmailMaxAggregateOutputType | null
  }

  type GetEmailGroupByPayload<T extends EmailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailGroupByOutputType[P]>
            : GetScalarType<T[P], EmailGroupByOutputType[P]>
        }
      >
    >


  export type EmailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    from?: boolean
    to?: boolean
    replyTo?: boolean
    cc?: boolean
    bcc?: boolean
    status?: boolean
    subject?: boolean
    body?: boolean
    html?: boolean
    trackingId?: boolean
    messageId?: boolean
    threadId?: boolean
    historyId?: boolean
    labelIds?: boolean
    isOpened?: boolean
    openedAt?: boolean
    isClicked?: boolean
    clickedAt?: boolean
    sentAt?: boolean
    deletedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    leadId?: boolean
    contactId?: boolean
    source?: boolean
    contact?: boolean | Email$contactArgs<ExtArgs>
    lead?: boolean | Email$leadArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    EmailQueue?: boolean | Email$EmailQueueArgs<ExtArgs>
    _count?: boolean | EmailCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["email"]>

  export type EmailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    from?: boolean
    to?: boolean
    replyTo?: boolean
    cc?: boolean
    bcc?: boolean
    status?: boolean
    subject?: boolean
    body?: boolean
    html?: boolean
    trackingId?: boolean
    messageId?: boolean
    threadId?: boolean
    historyId?: boolean
    labelIds?: boolean
    isOpened?: boolean
    openedAt?: boolean
    isClicked?: boolean
    clickedAt?: boolean
    sentAt?: boolean
    deletedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    leadId?: boolean
    contactId?: boolean
    source?: boolean
    contact?: boolean | Email$contactArgs<ExtArgs>
    lead?: boolean | Email$leadArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["email"]>

  export type EmailSelectScalar = {
    id?: boolean
    from?: boolean
    to?: boolean
    replyTo?: boolean
    cc?: boolean
    bcc?: boolean
    status?: boolean
    subject?: boolean
    body?: boolean
    html?: boolean
    trackingId?: boolean
    messageId?: boolean
    threadId?: boolean
    historyId?: boolean
    labelIds?: boolean
    isOpened?: boolean
    openedAt?: boolean
    isClicked?: boolean
    clickedAt?: boolean
    sentAt?: boolean
    deletedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    leadId?: boolean
    contactId?: boolean
    source?: boolean
  }

  export type EmailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | Email$contactArgs<ExtArgs>
    lead?: boolean | Email$leadArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    EmailQueue?: boolean | Email$EmailQueueArgs<ExtArgs>
    _count?: boolean | EmailCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EmailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    contact?: boolean | Email$contactArgs<ExtArgs>
    lead?: boolean | Email$leadArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $EmailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Email"
    objects: {
      contact: Prisma.$ContactPayload<ExtArgs> | null
      lead: Prisma.$LeadPayload<ExtArgs> | null
      organization: Prisma.$OrganizationPayload<ExtArgs>
      EmailQueue: Prisma.$EmailQueuePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      from: Prisma.JsonValue
      to: string[]
      replyTo: string | null
      cc: string[]
      bcc: string[]
      status: $Enums.EmailStatus
      subject: string | null
      body: string
      html: string | null
      trackingId: string | null
      messageId: string | null
      threadId: string | null
      historyId: string | null
      labelIds: string[]
      isOpened: boolean
      openedAt: bigint
      isClicked: boolean
      clickedAt: bigint
      sentAt: bigint
      deletedAt: bigint
      integrationId: string
      organizationId: string
      leadId: string | null
      contactId: string | null
      source: $Enums.IntegrationType
    }, ExtArgs["result"]["email"]>
    composites: {}
  }

  type EmailGetPayload<S extends boolean | null | undefined | EmailDefaultArgs> = $Result.GetResult<Prisma.$EmailPayload, S>

  type EmailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmailCountAggregateInputType | true
    }

  export interface EmailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Email'], meta: { name: 'Email' } }
    /**
     * Find zero or one Email that matches the filter.
     * @param {EmailFindUniqueArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailFindUniqueArgs>(args: SelectSubset<T, EmailFindUniqueArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Email that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmailFindUniqueOrThrowArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Email that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindFirstArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailFindFirstArgs>(args?: SelectSubset<T, EmailFindFirstArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Email that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindFirstOrThrowArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Emails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Emails
     * const emails = await prisma.email.findMany()
     * 
     * // Get first 10 Emails
     * const emails = await prisma.email.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailWithIdOnly = await prisma.email.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailFindManyArgs>(args?: SelectSubset<T, EmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Email.
     * @param {EmailCreateArgs} args - Arguments to create a Email.
     * @example
     * // Create one Email
     * const Email = await prisma.email.create({
     *   data: {
     *     // ... data to create a Email
     *   }
     * })
     * 
     */
    create<T extends EmailCreateArgs>(args: SelectSubset<T, EmailCreateArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Emails.
     * @param {EmailCreateManyArgs} args - Arguments to create many Emails.
     * @example
     * // Create many Emails
     * const email = await prisma.email.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailCreateManyArgs>(args?: SelectSubset<T, EmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Emails and returns the data saved in the database.
     * @param {EmailCreateManyAndReturnArgs} args - Arguments to create many Emails.
     * @example
     * // Create many Emails
     * const email = await prisma.email.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Emails and only return the `id`
     * const emailWithIdOnly = await prisma.email.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Email.
     * @param {EmailDeleteArgs} args - Arguments to delete one Email.
     * @example
     * // Delete one Email
     * const Email = await prisma.email.delete({
     *   where: {
     *     // ... filter to delete one Email
     *   }
     * })
     * 
     */
    delete<T extends EmailDeleteArgs>(args: SelectSubset<T, EmailDeleteArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Email.
     * @param {EmailUpdateArgs} args - Arguments to update one Email.
     * @example
     * // Update one Email
     * const email = await prisma.email.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailUpdateArgs>(args: SelectSubset<T, EmailUpdateArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Emails.
     * @param {EmailDeleteManyArgs} args - Arguments to filter Emails to delete.
     * @example
     * // Delete a few Emails
     * const { count } = await prisma.email.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailDeleteManyArgs>(args?: SelectSubset<T, EmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Emails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Emails
     * const email = await prisma.email.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailUpdateManyArgs>(args: SelectSubset<T, EmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Email.
     * @param {EmailUpsertArgs} args - Arguments to update or create a Email.
     * @example
     * // Update or create a Email
     * const email = await prisma.email.upsert({
     *   create: {
     *     // ... data to create a Email
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Email we want to update
     *   }
     * })
     */
    upsert<T extends EmailUpsertArgs>(args: SelectSubset<T, EmailUpsertArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Emails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCountArgs} args - Arguments to filter Emails to count.
     * @example
     * // Count the number of Emails
     * const count = await prisma.email.count({
     *   where: {
     *     // ... the filter for the Emails we want to count
     *   }
     * })
    **/
    count<T extends EmailCountArgs>(
      args?: Subset<T, EmailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Email.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailAggregateArgs>(args: Subset<T, EmailAggregateArgs>): Prisma.PrismaPromise<GetEmailAggregateType<T>>

    /**
     * Group by Email.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailGroupByArgs['orderBy'] }
        : { orderBy?: EmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Email model
   */
  readonly fields: EmailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Email.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    contact<T extends Email$contactArgs<ExtArgs> = {}>(args?: Subset<T, Email$contactArgs<ExtArgs>>): Prisma__ContactClient<$Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    lead<T extends Email$leadArgs<ExtArgs> = {}>(args?: Subset<T, Email$leadArgs<ExtArgs>>): Prisma__LeadClient<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    EmailQueue<T extends Email$EmailQueueArgs<ExtArgs> = {}>(args?: Subset<T, Email$EmailQueueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Email model
   */ 
  interface EmailFieldRefs {
    readonly id: FieldRef<"Email", 'String'>
    readonly from: FieldRef<"Email", 'Json'>
    readonly to: FieldRef<"Email", 'String[]'>
    readonly replyTo: FieldRef<"Email", 'String'>
    readonly cc: FieldRef<"Email", 'String[]'>
    readonly bcc: FieldRef<"Email", 'String[]'>
    readonly status: FieldRef<"Email", 'EmailStatus'>
    readonly subject: FieldRef<"Email", 'String'>
    readonly body: FieldRef<"Email", 'String'>
    readonly html: FieldRef<"Email", 'String'>
    readonly trackingId: FieldRef<"Email", 'String'>
    readonly messageId: FieldRef<"Email", 'String'>
    readonly threadId: FieldRef<"Email", 'String'>
    readonly historyId: FieldRef<"Email", 'String'>
    readonly labelIds: FieldRef<"Email", 'String[]'>
    readonly isOpened: FieldRef<"Email", 'Boolean'>
    readonly openedAt: FieldRef<"Email", 'BigInt'>
    readonly isClicked: FieldRef<"Email", 'Boolean'>
    readonly clickedAt: FieldRef<"Email", 'BigInt'>
    readonly sentAt: FieldRef<"Email", 'BigInt'>
    readonly deletedAt: FieldRef<"Email", 'BigInt'>
    readonly integrationId: FieldRef<"Email", 'String'>
    readonly organizationId: FieldRef<"Email", 'String'>
    readonly leadId: FieldRef<"Email", 'String'>
    readonly contactId: FieldRef<"Email", 'String'>
    readonly source: FieldRef<"Email", 'IntegrationType'>
  }
    

  // Custom InputTypes
  /**
   * Email findUnique
   */
  export type EmailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email findUniqueOrThrow
   */
  export type EmailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email findFirst
   */
  export type EmailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emails.
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emails.
     */
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Email findFirstOrThrow
   */
  export type EmailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Email to fetch.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emails.
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emails.
     */
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Email findMany
   */
  export type EmailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter, which Emails to fetch.
     */
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     */
    orderBy?: EmailOrderByWithRelationInput | EmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Emails.
     */
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     */
    skip?: number
    distinct?: EmailScalarFieldEnum | EmailScalarFieldEnum[]
  }

  /**
   * Email create
   */
  export type EmailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * The data needed to create a Email.
     */
    data: XOR<EmailCreateInput, EmailUncheckedCreateInput>
  }

  /**
   * Email createMany
   */
  export type EmailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Emails.
     */
    data: EmailCreateManyInput | EmailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Email createManyAndReturn
   */
  export type EmailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Emails.
     */
    data: EmailCreateManyInput | EmailCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Email update
   */
  export type EmailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * The data needed to update a Email.
     */
    data: XOR<EmailUpdateInput, EmailUncheckedUpdateInput>
    /**
     * Choose, which Email to update.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email updateMany
   */
  export type EmailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Emails.
     */
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyInput>
    /**
     * Filter which Emails to update
     */
    where?: EmailWhereInput
  }

  /**
   * Email upsert
   */
  export type EmailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * The filter to search for the Email to update in case it exists.
     */
    where: EmailWhereUniqueInput
    /**
     * In case the Email found by the `where` argument doesn't exist, create a new Email with this data.
     */
    create: XOR<EmailCreateInput, EmailUncheckedCreateInput>
    /**
     * In case the Email was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailUpdateInput, EmailUncheckedUpdateInput>
  }

  /**
   * Email delete
   */
  export type EmailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
    /**
     * Filter which Email to delete.
     */
    where: EmailWhereUniqueInput
  }

  /**
   * Email deleteMany
   */
  export type EmailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Emails to delete
     */
    where?: EmailWhereInput
  }

  /**
   * Email.contact
   */
  export type Email$contactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Contact
     */
    select?: ContactSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ContactInclude<ExtArgs> | null
    where?: ContactWhereInput
  }

  /**
   * Email.lead
   */
  export type Email$leadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    where?: LeadWhereInput
  }

  /**
   * Email.EmailQueue
   */
  export type Email$EmailQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    where?: EmailQueueWhereInput
    orderBy?: EmailQueueOrderByWithRelationInput | EmailQueueOrderByWithRelationInput[]
    cursor?: EmailQueueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EmailQueueScalarFieldEnum | EmailQueueScalarFieldEnum[]
  }

  /**
   * Email without action
   */
  export type EmailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Email
     */
    select?: EmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailInclude<ExtArgs> | null
  }


  /**
   * Model EmailQueue
   */

  export type AggregateEmailQueue = {
    _count: EmailQueueCountAggregateOutputType | null
    _avg: EmailQueueAvgAggregateOutputType | null
    _sum: EmailQueueSumAggregateOutputType | null
    _min: EmailQueueMinAggregateOutputType | null
    _max: EmailQueueMaxAggregateOutputType | null
  }

  export type EmailQueueAvgAggregateOutputType = {
    scheduledAt: number | null
    retryCount: number | null
  }

  export type EmailQueueSumAggregateOutputType = {
    scheduledAt: bigint | null
    retryCount: number | null
  }

  export type EmailQueueMinAggregateOutputType = {
    id: string | null
    emailId: string | null
    scheduledAt: bigint | null
    status: $Enums.QueueStatus | null
    retryCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailQueueMaxAggregateOutputType = {
    id: string | null
    emailId: string | null
    scheduledAt: bigint | null
    status: $Enums.QueueStatus | null
    retryCount: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type EmailQueueCountAggregateOutputType = {
    id: number
    emailId: number
    scheduledAt: number
    status: number
    retryCount: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type EmailQueueAvgAggregateInputType = {
    scheduledAt?: true
    retryCount?: true
  }

  export type EmailQueueSumAggregateInputType = {
    scheduledAt?: true
    retryCount?: true
  }

  export type EmailQueueMinAggregateInputType = {
    id?: true
    emailId?: true
    scheduledAt?: true
    status?: true
    retryCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailQueueMaxAggregateInputType = {
    id?: true
    emailId?: true
    scheduledAt?: true
    status?: true
    retryCount?: true
    createdAt?: true
    updatedAt?: true
  }

  export type EmailQueueCountAggregateInputType = {
    id?: true
    emailId?: true
    scheduledAt?: true
    status?: true
    retryCount?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type EmailQueueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailQueue to aggregate.
     */
    where?: EmailQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailQueues to fetch.
     */
    orderBy?: EmailQueueOrderByWithRelationInput | EmailQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EmailQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EmailQueues
    **/
    _count?: true | EmailQueueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EmailQueueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EmailQueueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailQueueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailQueueMaxAggregateInputType
  }

  export type GetEmailQueueAggregateType<T extends EmailQueueAggregateArgs> = {
        [P in keyof T & keyof AggregateEmailQueue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmailQueue[P]>
      : GetScalarType<T[P], AggregateEmailQueue[P]>
  }




  export type EmailQueueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EmailQueueWhereInput
    orderBy?: EmailQueueOrderByWithAggregationInput | EmailQueueOrderByWithAggregationInput[]
    by: EmailQueueScalarFieldEnum[] | EmailQueueScalarFieldEnum
    having?: EmailQueueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailQueueCountAggregateInputType | true
    _avg?: EmailQueueAvgAggregateInputType
    _sum?: EmailQueueSumAggregateInputType
    _min?: EmailQueueMinAggregateInputType
    _max?: EmailQueueMaxAggregateInputType
  }

  export type EmailQueueGroupByOutputType = {
    id: string
    emailId: string
    scheduledAt: bigint
    status: $Enums.QueueStatus
    retryCount: number
    createdAt: Date
    updatedAt: Date
    _count: EmailQueueCountAggregateOutputType | null
    _avg: EmailQueueAvgAggregateOutputType | null
    _sum: EmailQueueSumAggregateOutputType | null
    _min: EmailQueueMinAggregateOutputType | null
    _max: EmailQueueMaxAggregateOutputType | null
  }

  type GetEmailQueueGroupByPayload<T extends EmailQueueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EmailQueueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailQueueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailQueueGroupByOutputType[P]>
            : GetScalarType<T[P], EmailQueueGroupByOutputType[P]>
        }
      >
    >


  export type EmailQueueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    emailId?: boolean
    scheduledAt?: boolean
    status?: boolean
    retryCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean | EmailDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailQueue"]>

  export type EmailQueueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    emailId?: boolean
    scheduledAt?: boolean
    status?: boolean
    retryCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    email?: boolean | EmailDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["emailQueue"]>

  export type EmailQueueSelectScalar = {
    id?: boolean
    emailId?: boolean
    scheduledAt?: boolean
    status?: boolean
    retryCount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type EmailQueueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    email?: boolean | EmailDefaultArgs<ExtArgs>
  }
  export type EmailQueueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    email?: boolean | EmailDefaultArgs<ExtArgs>
  }

  export type $EmailQueuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EmailQueue"
    objects: {
      email: Prisma.$EmailPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      emailId: string
      scheduledAt: bigint
      status: $Enums.QueueStatus
      retryCount: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["emailQueue"]>
    composites: {}
  }

  type EmailQueueGetPayload<S extends boolean | null | undefined | EmailQueueDefaultArgs> = $Result.GetResult<Prisma.$EmailQueuePayload, S>

  type EmailQueueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EmailQueueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EmailQueueCountAggregateInputType | true
    }

  export interface EmailQueueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EmailQueue'], meta: { name: 'EmailQueue' } }
    /**
     * Find zero or one EmailQueue that matches the filter.
     * @param {EmailQueueFindUniqueArgs} args - Arguments to find a EmailQueue
     * @example
     * // Get one EmailQueue
     * const emailQueue = await prisma.emailQueue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EmailQueueFindUniqueArgs>(args: SelectSubset<T, EmailQueueFindUniqueArgs<ExtArgs>>): Prisma__EmailQueueClient<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one EmailQueue that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EmailQueueFindUniqueOrThrowArgs} args - Arguments to find a EmailQueue
     * @example
     * // Get one EmailQueue
     * const emailQueue = await prisma.emailQueue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EmailQueueFindUniqueOrThrowArgs>(args: SelectSubset<T, EmailQueueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EmailQueueClient<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first EmailQueue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailQueueFindFirstArgs} args - Arguments to find a EmailQueue
     * @example
     * // Get one EmailQueue
     * const emailQueue = await prisma.emailQueue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EmailQueueFindFirstArgs>(args?: SelectSubset<T, EmailQueueFindFirstArgs<ExtArgs>>): Prisma__EmailQueueClient<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first EmailQueue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailQueueFindFirstOrThrowArgs} args - Arguments to find a EmailQueue
     * @example
     * // Get one EmailQueue
     * const emailQueue = await prisma.emailQueue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EmailQueueFindFirstOrThrowArgs>(args?: SelectSubset<T, EmailQueueFindFirstOrThrowArgs<ExtArgs>>): Prisma__EmailQueueClient<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more EmailQueues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailQueueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EmailQueues
     * const emailQueues = await prisma.emailQueue.findMany()
     * 
     * // Get first 10 EmailQueues
     * const emailQueues = await prisma.emailQueue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailQueueWithIdOnly = await prisma.emailQueue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EmailQueueFindManyArgs>(args?: SelectSubset<T, EmailQueueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a EmailQueue.
     * @param {EmailQueueCreateArgs} args - Arguments to create a EmailQueue.
     * @example
     * // Create one EmailQueue
     * const EmailQueue = await prisma.emailQueue.create({
     *   data: {
     *     // ... data to create a EmailQueue
     *   }
     * })
     * 
     */
    create<T extends EmailQueueCreateArgs>(args: SelectSubset<T, EmailQueueCreateArgs<ExtArgs>>): Prisma__EmailQueueClient<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many EmailQueues.
     * @param {EmailQueueCreateManyArgs} args - Arguments to create many EmailQueues.
     * @example
     * // Create many EmailQueues
     * const emailQueue = await prisma.emailQueue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EmailQueueCreateManyArgs>(args?: SelectSubset<T, EmailQueueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many EmailQueues and returns the data saved in the database.
     * @param {EmailQueueCreateManyAndReturnArgs} args - Arguments to create many EmailQueues.
     * @example
     * // Create many EmailQueues
     * const emailQueue = await prisma.emailQueue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many EmailQueues and only return the `id`
     * const emailQueueWithIdOnly = await prisma.emailQueue.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EmailQueueCreateManyAndReturnArgs>(args?: SelectSubset<T, EmailQueueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a EmailQueue.
     * @param {EmailQueueDeleteArgs} args - Arguments to delete one EmailQueue.
     * @example
     * // Delete one EmailQueue
     * const EmailQueue = await prisma.emailQueue.delete({
     *   where: {
     *     // ... filter to delete one EmailQueue
     *   }
     * })
     * 
     */
    delete<T extends EmailQueueDeleteArgs>(args: SelectSubset<T, EmailQueueDeleteArgs<ExtArgs>>): Prisma__EmailQueueClient<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one EmailQueue.
     * @param {EmailQueueUpdateArgs} args - Arguments to update one EmailQueue.
     * @example
     * // Update one EmailQueue
     * const emailQueue = await prisma.emailQueue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EmailQueueUpdateArgs>(args: SelectSubset<T, EmailQueueUpdateArgs<ExtArgs>>): Prisma__EmailQueueClient<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more EmailQueues.
     * @param {EmailQueueDeleteManyArgs} args - Arguments to filter EmailQueues to delete.
     * @example
     * // Delete a few EmailQueues
     * const { count } = await prisma.emailQueue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EmailQueueDeleteManyArgs>(args?: SelectSubset<T, EmailQueueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EmailQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailQueueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EmailQueues
     * const emailQueue = await prisma.emailQueue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EmailQueueUpdateManyArgs>(args: SelectSubset<T, EmailQueueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EmailQueue.
     * @param {EmailQueueUpsertArgs} args - Arguments to update or create a EmailQueue.
     * @example
     * // Update or create a EmailQueue
     * const emailQueue = await prisma.emailQueue.upsert({
     *   create: {
     *     // ... data to create a EmailQueue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EmailQueue we want to update
     *   }
     * })
     */
    upsert<T extends EmailQueueUpsertArgs>(args: SelectSubset<T, EmailQueueUpsertArgs<ExtArgs>>): Prisma__EmailQueueClient<$Result.GetResult<Prisma.$EmailQueuePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of EmailQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailQueueCountArgs} args - Arguments to filter EmailQueues to count.
     * @example
     * // Count the number of EmailQueues
     * const count = await prisma.emailQueue.count({
     *   where: {
     *     // ... the filter for the EmailQueues we want to count
     *   }
     * })
    **/
    count<T extends EmailQueueCountArgs>(
      args?: Subset<T, EmailQueueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailQueueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EmailQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailQueueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailQueueAggregateArgs>(args: Subset<T, EmailQueueAggregateArgs>): Prisma.PrismaPromise<GetEmailQueueAggregateType<T>>

    /**
     * Group by EmailQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailQueueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailQueueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailQueueGroupByArgs['orderBy'] }
        : { orderBy?: EmailQueueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailQueueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailQueueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EmailQueue model
   */
  readonly fields: EmailQueueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EmailQueue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EmailQueueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    email<T extends EmailDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EmailDefaultArgs<ExtArgs>>): Prisma__EmailClient<$Result.GetResult<Prisma.$EmailPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EmailQueue model
   */ 
  interface EmailQueueFieldRefs {
    readonly id: FieldRef<"EmailQueue", 'String'>
    readonly emailId: FieldRef<"EmailQueue", 'String'>
    readonly scheduledAt: FieldRef<"EmailQueue", 'BigInt'>
    readonly status: FieldRef<"EmailQueue", 'QueueStatus'>
    readonly retryCount: FieldRef<"EmailQueue", 'Int'>
    readonly createdAt: FieldRef<"EmailQueue", 'DateTime'>
    readonly updatedAt: FieldRef<"EmailQueue", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * EmailQueue findUnique
   */
  export type EmailQueueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    /**
     * Filter, which EmailQueue to fetch.
     */
    where: EmailQueueWhereUniqueInput
  }

  /**
   * EmailQueue findUniqueOrThrow
   */
  export type EmailQueueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    /**
     * Filter, which EmailQueue to fetch.
     */
    where: EmailQueueWhereUniqueInput
  }

  /**
   * EmailQueue findFirst
   */
  export type EmailQueueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    /**
     * Filter, which EmailQueue to fetch.
     */
    where?: EmailQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailQueues to fetch.
     */
    orderBy?: EmailQueueOrderByWithRelationInput | EmailQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailQueues.
     */
    cursor?: EmailQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailQueues.
     */
    distinct?: EmailQueueScalarFieldEnum | EmailQueueScalarFieldEnum[]
  }

  /**
   * EmailQueue findFirstOrThrow
   */
  export type EmailQueueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    /**
     * Filter, which EmailQueue to fetch.
     */
    where?: EmailQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailQueues to fetch.
     */
    orderBy?: EmailQueueOrderByWithRelationInput | EmailQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EmailQueues.
     */
    cursor?: EmailQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EmailQueues.
     */
    distinct?: EmailQueueScalarFieldEnum | EmailQueueScalarFieldEnum[]
  }

  /**
   * EmailQueue findMany
   */
  export type EmailQueueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    /**
     * Filter, which EmailQueues to fetch.
     */
    where?: EmailQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EmailQueues to fetch.
     */
    orderBy?: EmailQueueOrderByWithRelationInput | EmailQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EmailQueues.
     */
    cursor?: EmailQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EmailQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EmailQueues.
     */
    skip?: number
    distinct?: EmailQueueScalarFieldEnum | EmailQueueScalarFieldEnum[]
  }

  /**
   * EmailQueue create
   */
  export type EmailQueueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    /**
     * The data needed to create a EmailQueue.
     */
    data: XOR<EmailQueueCreateInput, EmailQueueUncheckedCreateInput>
  }

  /**
   * EmailQueue createMany
   */
  export type EmailQueueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EmailQueues.
     */
    data: EmailQueueCreateManyInput | EmailQueueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EmailQueue createManyAndReturn
   */
  export type EmailQueueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many EmailQueues.
     */
    data: EmailQueueCreateManyInput | EmailQueueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * EmailQueue update
   */
  export type EmailQueueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    /**
     * The data needed to update a EmailQueue.
     */
    data: XOR<EmailQueueUpdateInput, EmailQueueUncheckedUpdateInput>
    /**
     * Choose, which EmailQueue to update.
     */
    where: EmailQueueWhereUniqueInput
  }

  /**
   * EmailQueue updateMany
   */
  export type EmailQueueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EmailQueues.
     */
    data: XOR<EmailQueueUpdateManyMutationInput, EmailQueueUncheckedUpdateManyInput>
    /**
     * Filter which EmailQueues to update
     */
    where?: EmailQueueWhereInput
  }

  /**
   * EmailQueue upsert
   */
  export type EmailQueueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    /**
     * The filter to search for the EmailQueue to update in case it exists.
     */
    where: EmailQueueWhereUniqueInput
    /**
     * In case the EmailQueue found by the `where` argument doesn't exist, create a new EmailQueue with this data.
     */
    create: XOR<EmailQueueCreateInput, EmailQueueUncheckedCreateInput>
    /**
     * In case the EmailQueue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EmailQueueUpdateInput, EmailQueueUncheckedUpdateInput>
  }

  /**
   * EmailQueue delete
   */
  export type EmailQueueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
    /**
     * Filter which EmailQueue to delete.
     */
    where: EmailQueueWhereUniqueInput
  }

  /**
   * EmailQueue deleteMany
   */
  export type EmailQueueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EmailQueues to delete
     */
    where?: EmailQueueWhereInput
  }

  /**
   * EmailQueue without action
   */
  export type EmailQueueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EmailQueue
     */
    select?: EmailQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EmailQueueInclude<ExtArgs> | null
  }


  /**
   * Model Integration
   */

  export type AggregateIntegration = {
    _count: IntegrationCountAggregateOutputType | null
    _avg: IntegrationAvgAggregateOutputType | null
    _sum: IntegrationSumAggregateOutputType | null
    _min: IntegrationMinAggregateOutputType | null
    _max: IntegrationMaxAggregateOutputType | null
  }

  export type IntegrationAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type IntegrationSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type IntegrationMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    description: string | null
    type: $Enums.IntegrationType | null
    category: $Enums.IntegrationCategory | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    orgMemberId: string | null
    isSingular: boolean | null
    sharedType: $Enums.IntegrationSharingType | null
  }

  export type IntegrationMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    description: string | null
    type: $Enums.IntegrationType | null
    category: $Enums.IntegrationCategory | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    orgMemberId: string | null
    isSingular: boolean | null
    sharedType: $Enums.IntegrationSharingType | null
  }

  export type IntegrationCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    data: number
    description: number
    type: number
    category: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    orgMemberId: number
    isSingular: number
    sharedType: number
    _all: number
  }


  export type IntegrationAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type IntegrationSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type IntegrationMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    description?: true
    type?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    orgMemberId?: true
    isSingular?: true
    sharedType?: true
  }

  export type IntegrationMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    description?: true
    type?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    orgMemberId?: true
    isSingular?: true
    sharedType?: true
  }

  export type IntegrationCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    data?: true
    description?: true
    type?: true
    category?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    orgMemberId?: true
    isSingular?: true
    sharedType?: true
    _all?: true
  }

  export type IntegrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Integration to aggregate.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Integrations
    **/
    _count?: true | IntegrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IntegrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IntegrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntegrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntegrationMaxAggregateInputType
  }

  export type GetIntegrationAggregateType<T extends IntegrationAggregateArgs> = {
        [P in keyof T & keyof AggregateIntegration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntegration[P]>
      : GetScalarType<T[P], AggregateIntegration[P]>
  }




  export type IntegrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntegrationWhereInput
    orderBy?: IntegrationOrderByWithAggregationInput | IntegrationOrderByWithAggregationInput[]
    by: IntegrationScalarFieldEnum[] | IntegrationScalarFieldEnum
    having?: IntegrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntegrationCountAggregateInputType | true
    _avg?: IntegrationAvgAggregateInputType
    _sum?: IntegrationSumAggregateInputType
    _min?: IntegrationMinAggregateInputType
    _max?: IntegrationMaxAggregateInputType
  }

  export type IntegrationGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    data: JsonValue
    description: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint | null
    orgMemberId: string | null
    isSingular: boolean
    sharedType: $Enums.IntegrationSharingType
    _count: IntegrationCountAggregateOutputType | null
    _avg: IntegrationAvgAggregateOutputType | null
    _sum: IntegrationSumAggregateOutputType | null
    _min: IntegrationMinAggregateOutputType | null
    _max: IntegrationMaxAggregateOutputType | null
  }

  type GetIntegrationGroupByPayload<T extends IntegrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntegrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntegrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntegrationGroupByOutputType[P]>
            : GetScalarType<T[P], IntegrationGroupByOutputType[P]>
        }
      >
    >


  export type IntegrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    data?: boolean
    description?: boolean
    type?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    orgMemberId?: boolean
    isSingular?: boolean
    sharedType?: boolean
    members?: boolean | Integration$membersArgs<ExtArgs>
    Project?: boolean | Integration$ProjectArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    Lead?: boolean | Integration$LeadArgs<ExtArgs>
    LeadProject?: boolean | Integration$LeadProjectArgs<ExtArgs>
    Jobs?: boolean | Integration$JobsArgs<ExtArgs>
    mailServiceFromEmail?: boolean | Integration$mailServiceFromEmailArgs<ExtArgs>
    _count?: boolean | IntegrationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integration"]>

  export type IntegrationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    data?: boolean
    description?: boolean
    type?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    orgMemberId?: boolean
    isSingular?: boolean
    sharedType?: boolean
    members?: boolean | Integration$membersArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["integration"]>

  export type IntegrationSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    data?: boolean
    description?: boolean
    type?: boolean
    category?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    orgMemberId?: boolean
    isSingular?: boolean
    sharedType?: boolean
  }

  export type IntegrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Integration$membersArgs<ExtArgs>
    Project?: boolean | Integration$ProjectArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    Lead?: boolean | Integration$LeadArgs<ExtArgs>
    LeadProject?: boolean | Integration$LeadProjectArgs<ExtArgs>
    Jobs?: boolean | Integration$JobsArgs<ExtArgs>
    mailServiceFromEmail?: boolean | Integration$mailServiceFromEmailArgs<ExtArgs>
    _count?: boolean | IntegrationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type IntegrationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Integration$membersArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $IntegrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Integration"
    objects: {
      members: Prisma.$OrgMemberPayload<ExtArgs> | null
      Project: Prisma.$ProjectPayload<ExtArgs>[]
      organization: Prisma.$OrganizationPayload<ExtArgs>
      Lead: Prisma.$LeadPayload<ExtArgs>[]
      LeadProject: Prisma.$LeadProjectPayload<ExtArgs>[]
      Jobs: Prisma.$JobPayload<ExtArgs>[]
      mailServiceFromEmail: Prisma.$MailServiceFromEmailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      organizationId: string
      name: string
      data: Prisma.JsonValue
      description: string | null
      type: $Enums.IntegrationType
      category: $Enums.IntegrationCategory
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint | null
      orgMemberId: string | null
      isSingular: boolean
      sharedType: $Enums.IntegrationSharingType
    }, ExtArgs["result"]["integration"]>
    composites: {}
  }

  type IntegrationGetPayload<S extends boolean | null | undefined | IntegrationDefaultArgs> = $Result.GetResult<Prisma.$IntegrationPayload, S>

  type IntegrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IntegrationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: IntegrationCountAggregateInputType | true
    }

  export interface IntegrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Integration'], meta: { name: 'Integration' } }
    /**
     * Find zero or one Integration that matches the filter.
     * @param {IntegrationFindUniqueArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntegrationFindUniqueArgs>(args: SelectSubset<T, IntegrationFindUniqueArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Integration that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {IntegrationFindUniqueOrThrowArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntegrationFindUniqueOrThrowArgs>(args: SelectSubset<T, IntegrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Integration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindFirstArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntegrationFindFirstArgs>(args?: SelectSubset<T, IntegrationFindFirstArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Integration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindFirstOrThrowArgs} args - Arguments to find a Integration
     * @example
     * // Get one Integration
     * const integration = await prisma.integration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntegrationFindFirstOrThrowArgs>(args?: SelectSubset<T, IntegrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Integrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Integrations
     * const integrations = await prisma.integration.findMany()
     * 
     * // Get first 10 Integrations
     * const integrations = await prisma.integration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const integrationWithIdOnly = await prisma.integration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntegrationFindManyArgs>(args?: SelectSubset<T, IntegrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Integration.
     * @param {IntegrationCreateArgs} args - Arguments to create a Integration.
     * @example
     * // Create one Integration
     * const Integration = await prisma.integration.create({
     *   data: {
     *     // ... data to create a Integration
     *   }
     * })
     * 
     */
    create<T extends IntegrationCreateArgs>(args: SelectSubset<T, IntegrationCreateArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Integrations.
     * @param {IntegrationCreateManyArgs} args - Arguments to create many Integrations.
     * @example
     * // Create many Integrations
     * const integration = await prisma.integration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntegrationCreateManyArgs>(args?: SelectSubset<T, IntegrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Integrations and returns the data saved in the database.
     * @param {IntegrationCreateManyAndReturnArgs} args - Arguments to create many Integrations.
     * @example
     * // Create many Integrations
     * const integration = await prisma.integration.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Integrations and only return the `id`
     * const integrationWithIdOnly = await prisma.integration.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IntegrationCreateManyAndReturnArgs>(args?: SelectSubset<T, IntegrationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Integration.
     * @param {IntegrationDeleteArgs} args - Arguments to delete one Integration.
     * @example
     * // Delete one Integration
     * const Integration = await prisma.integration.delete({
     *   where: {
     *     // ... filter to delete one Integration
     *   }
     * })
     * 
     */
    delete<T extends IntegrationDeleteArgs>(args: SelectSubset<T, IntegrationDeleteArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Integration.
     * @param {IntegrationUpdateArgs} args - Arguments to update one Integration.
     * @example
     * // Update one Integration
     * const integration = await prisma.integration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntegrationUpdateArgs>(args: SelectSubset<T, IntegrationUpdateArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Integrations.
     * @param {IntegrationDeleteManyArgs} args - Arguments to filter Integrations to delete.
     * @example
     * // Delete a few Integrations
     * const { count } = await prisma.integration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntegrationDeleteManyArgs>(args?: SelectSubset<T, IntegrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Integrations
     * const integration = await prisma.integration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntegrationUpdateManyArgs>(args: SelectSubset<T, IntegrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Integration.
     * @param {IntegrationUpsertArgs} args - Arguments to update or create a Integration.
     * @example
     * // Update or create a Integration
     * const integration = await prisma.integration.upsert({
     *   create: {
     *     // ... data to create a Integration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Integration we want to update
     *   }
     * })
     */
    upsert<T extends IntegrationUpsertArgs>(args: SelectSubset<T, IntegrationUpsertArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Integrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationCountArgs} args - Arguments to filter Integrations to count.
     * @example
     * // Count the number of Integrations
     * const count = await prisma.integration.count({
     *   where: {
     *     // ... the filter for the Integrations we want to count
     *   }
     * })
    **/
    count<T extends IntegrationCountArgs>(
      args?: Subset<T, IntegrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntegrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Integration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntegrationAggregateArgs>(args: Subset<T, IntegrationAggregateArgs>): Prisma.PrismaPromise<GetIntegrationAggregateType<T>>

    /**
     * Group by Integration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntegrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntegrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntegrationGroupByArgs['orderBy'] }
        : { orderBy?: IntegrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntegrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntegrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Integration model
   */
  readonly fields: IntegrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Integration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntegrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Integration$membersArgs<ExtArgs> = {}>(args?: Subset<T, Integration$membersArgs<ExtArgs>>): Prisma__OrgMemberClient<$Result.GetResult<Prisma.$OrgMemberPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    Project<T extends Integration$ProjectArgs<ExtArgs> = {}>(args?: Subset<T, Integration$ProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    Lead<T extends Integration$LeadArgs<ExtArgs> = {}>(args?: Subset<T, Integration$LeadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany"> | Null>
    LeadProject<T extends Integration$LeadProjectArgs<ExtArgs> = {}>(args?: Subset<T, Integration$LeadProjectArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadProjectPayload<ExtArgs>, T, "findMany"> | Null>
    Jobs<T extends Integration$JobsArgs<ExtArgs> = {}>(args?: Subset<T, Integration$JobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany"> | Null>
    mailServiceFromEmail<T extends Integration$mailServiceFromEmailArgs<ExtArgs> = {}>(args?: Subset<T, Integration$mailServiceFromEmailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Integration model
   */ 
  interface IntegrationFieldRefs {
    readonly id: FieldRef<"Integration", 'String'>
    readonly organizationId: FieldRef<"Integration", 'String'>
    readonly name: FieldRef<"Integration", 'String'>
    readonly data: FieldRef<"Integration", 'Json'>
    readonly description: FieldRef<"Integration", 'String'>
    readonly type: FieldRef<"Integration", 'IntegrationType'>
    readonly category: FieldRef<"Integration", 'IntegrationCategory'>
    readonly createdAt: FieldRef<"Integration", 'BigInt'>
    readonly updatedAt: FieldRef<"Integration", 'BigInt'>
    readonly deletedAt: FieldRef<"Integration", 'BigInt'>
    readonly orgMemberId: FieldRef<"Integration", 'String'>
    readonly isSingular: FieldRef<"Integration", 'Boolean'>
    readonly sharedType: FieldRef<"Integration", 'IntegrationSharingType'>
  }
    

  // Custom InputTypes
  /**
   * Integration findUnique
   */
  export type IntegrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration findUniqueOrThrow
   */
  export type IntegrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration findFirst
   */
  export type IntegrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Integrations.
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Integrations.
     */
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Integration findFirstOrThrow
   */
  export type IntegrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integration to fetch.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Integrations.
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Integrations.
     */
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Integration findMany
   */
  export type IntegrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter, which Integrations to fetch.
     */
    where?: IntegrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Integrations to fetch.
     */
    orderBy?: IntegrationOrderByWithRelationInput | IntegrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Integrations.
     */
    cursor?: IntegrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Integrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Integrations.
     */
    skip?: number
    distinct?: IntegrationScalarFieldEnum | IntegrationScalarFieldEnum[]
  }

  /**
   * Integration create
   */
  export type IntegrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * The data needed to create a Integration.
     */
    data: XOR<IntegrationCreateInput, IntegrationUncheckedCreateInput>
  }

  /**
   * Integration createMany
   */
  export type IntegrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Integrations.
     */
    data: IntegrationCreateManyInput | IntegrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Integration createManyAndReturn
   */
  export type IntegrationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Integrations.
     */
    data: IntegrationCreateManyInput | IntegrationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Integration update
   */
  export type IntegrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * The data needed to update a Integration.
     */
    data: XOR<IntegrationUpdateInput, IntegrationUncheckedUpdateInput>
    /**
     * Choose, which Integration to update.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration updateMany
   */
  export type IntegrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Integrations.
     */
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyInput>
    /**
     * Filter which Integrations to update
     */
    where?: IntegrationWhereInput
  }

  /**
   * Integration upsert
   */
  export type IntegrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * The filter to search for the Integration to update in case it exists.
     */
    where: IntegrationWhereUniqueInput
    /**
     * In case the Integration found by the `where` argument doesn't exist, create a new Integration with this data.
     */
    create: XOR<IntegrationCreateInput, IntegrationUncheckedCreateInput>
    /**
     * In case the Integration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntegrationUpdateInput, IntegrationUncheckedUpdateInput>
  }

  /**
   * Integration delete
   */
  export type IntegrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
    /**
     * Filter which Integration to delete.
     */
    where: IntegrationWhereUniqueInput
  }

  /**
   * Integration deleteMany
   */
  export type IntegrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Integrations to delete
     */
    where?: IntegrationWhereInput
  }

  /**
   * Integration.members
   */
  export type Integration$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrgMember
     */
    select?: OrgMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrgMemberInclude<ExtArgs> | null
    where?: OrgMemberWhereInput
  }

  /**
   * Integration.Project
   */
  export type Integration$ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Integration.Lead
   */
  export type Integration$LeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    where?: LeadWhereInput
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    cursor?: LeadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * Integration.LeadProject
   */
  export type Integration$LeadProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadProject
     */
    select?: LeadProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadProjectInclude<ExtArgs> | null
    where?: LeadProjectWhereInput
    orderBy?: LeadProjectOrderByWithRelationInput | LeadProjectOrderByWithRelationInput[]
    cursor?: LeadProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadProjectScalarFieldEnum | LeadProjectScalarFieldEnum[]
  }

  /**
   * Integration.Jobs
   */
  export type Integration$JobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    where?: JobWhereInput
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    cursor?: JobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Integration.mailServiceFromEmail
   */
  export type Integration$mailServiceFromEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    where?: MailServiceFromEmailWhereInput
    orderBy?: MailServiceFromEmailOrderByWithRelationInput | MailServiceFromEmailOrderByWithRelationInput[]
    cursor?: MailServiceFromEmailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MailServiceFromEmailScalarFieldEnum | MailServiceFromEmailScalarFieldEnum[]
  }

  /**
   * Integration without action
   */
  export type IntegrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Integration
     */
    select?: IntegrationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntegrationInclude<ExtArgs> | null
  }


  /**
   * Model MailServiceFromEmail
   */

  export type AggregateMailServiceFromEmail = {
    _count: MailServiceFromEmailCountAggregateOutputType | null
    _avg: MailServiceFromEmailAvgAggregateOutputType | null
    _sum: MailServiceFromEmailSumAggregateOutputType | null
    _min: MailServiceFromEmailMinAggregateOutputType | null
    _max: MailServiceFromEmailMaxAggregateOutputType | null
  }

  export type MailServiceFromEmailAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
  }

  export type MailServiceFromEmailSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
  }

  export type MailServiceFromEmailMinAggregateOutputType = {
    id: string | null
    fromName: string | null
    fromEmail: string | null
    replyTo: string | null
    type: $Enums.IntegrationType | null
    integrationId: string | null
    organizationId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
  }

  export type MailServiceFromEmailMaxAggregateOutputType = {
    id: string | null
    fromName: string | null
    fromEmail: string | null
    replyTo: string | null
    type: $Enums.IntegrationType | null
    integrationId: string | null
    organizationId: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
  }

  export type MailServiceFromEmailCountAggregateOutputType = {
    id: number
    fromName: number
    fromEmail: number
    replyTo: number
    type: number
    integrationId: number
    organizationId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MailServiceFromEmailAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
  }

  export type MailServiceFromEmailSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
  }

  export type MailServiceFromEmailMinAggregateInputType = {
    id?: true
    fromName?: true
    fromEmail?: true
    replyTo?: true
    type?: true
    integrationId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MailServiceFromEmailMaxAggregateInputType = {
    id?: true
    fromName?: true
    fromEmail?: true
    replyTo?: true
    type?: true
    integrationId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MailServiceFromEmailCountAggregateInputType = {
    id?: true
    fromName?: true
    fromEmail?: true
    replyTo?: true
    type?: true
    integrationId?: true
    organizationId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MailServiceFromEmailAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MailServiceFromEmail to aggregate.
     */
    where?: MailServiceFromEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MailServiceFromEmails to fetch.
     */
    orderBy?: MailServiceFromEmailOrderByWithRelationInput | MailServiceFromEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MailServiceFromEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MailServiceFromEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MailServiceFromEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MailServiceFromEmails
    **/
    _count?: true | MailServiceFromEmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MailServiceFromEmailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MailServiceFromEmailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MailServiceFromEmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MailServiceFromEmailMaxAggregateInputType
  }

  export type GetMailServiceFromEmailAggregateType<T extends MailServiceFromEmailAggregateArgs> = {
        [P in keyof T & keyof AggregateMailServiceFromEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMailServiceFromEmail[P]>
      : GetScalarType<T[P], AggregateMailServiceFromEmail[P]>
  }




  export type MailServiceFromEmailGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MailServiceFromEmailWhereInput
    orderBy?: MailServiceFromEmailOrderByWithAggregationInput | MailServiceFromEmailOrderByWithAggregationInput[]
    by: MailServiceFromEmailScalarFieldEnum[] | MailServiceFromEmailScalarFieldEnum
    having?: MailServiceFromEmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MailServiceFromEmailCountAggregateInputType | true
    _avg?: MailServiceFromEmailAvgAggregateInputType
    _sum?: MailServiceFromEmailSumAggregateInputType
    _min?: MailServiceFromEmailMinAggregateInputType
    _max?: MailServiceFromEmailMaxAggregateInputType
  }

  export type MailServiceFromEmailGroupByOutputType = {
    id: string
    fromName: string
    fromEmail: string
    replyTo: string | null
    type: $Enums.IntegrationType
    integrationId: string
    organizationId: string
    createdAt: bigint
    updatedAt: bigint
    _count: MailServiceFromEmailCountAggregateOutputType | null
    _avg: MailServiceFromEmailAvgAggregateOutputType | null
    _sum: MailServiceFromEmailSumAggregateOutputType | null
    _min: MailServiceFromEmailMinAggregateOutputType | null
    _max: MailServiceFromEmailMaxAggregateOutputType | null
  }

  type GetMailServiceFromEmailGroupByPayload<T extends MailServiceFromEmailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MailServiceFromEmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MailServiceFromEmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MailServiceFromEmailGroupByOutputType[P]>
            : GetScalarType<T[P], MailServiceFromEmailGroupByOutputType[P]>
        }
      >
    >


  export type MailServiceFromEmailSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromName?: boolean
    fromEmail?: boolean
    replyTo?: boolean
    type?: boolean
    integrationId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mailServiceFromEmail"]>

  export type MailServiceFromEmailSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromName?: boolean
    fromEmail?: boolean
    replyTo?: boolean
    type?: boolean
    integrationId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mailServiceFromEmail"]>

  export type MailServiceFromEmailSelectScalar = {
    id?: boolean
    fromName?: boolean
    fromEmail?: boolean
    replyTo?: boolean
    type?: boolean
    integrationId?: boolean
    organizationId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MailServiceFromEmailInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type MailServiceFromEmailIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $MailServiceFromEmailPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MailServiceFromEmail"
    objects: {
      integration: Prisma.$IntegrationPayload<ExtArgs>
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fromName: string
      fromEmail: string
      replyTo: string | null
      type: $Enums.IntegrationType
      integrationId: string
      organizationId: string
      createdAt: bigint
      updatedAt: bigint
    }, ExtArgs["result"]["mailServiceFromEmail"]>
    composites: {}
  }

  type MailServiceFromEmailGetPayload<S extends boolean | null | undefined | MailServiceFromEmailDefaultArgs> = $Result.GetResult<Prisma.$MailServiceFromEmailPayload, S>

  type MailServiceFromEmailCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MailServiceFromEmailFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MailServiceFromEmailCountAggregateInputType | true
    }

  export interface MailServiceFromEmailDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MailServiceFromEmail'], meta: { name: 'MailServiceFromEmail' } }
    /**
     * Find zero or one MailServiceFromEmail that matches the filter.
     * @param {MailServiceFromEmailFindUniqueArgs} args - Arguments to find a MailServiceFromEmail
     * @example
     * // Get one MailServiceFromEmail
     * const mailServiceFromEmail = await prisma.mailServiceFromEmail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MailServiceFromEmailFindUniqueArgs>(args: SelectSubset<T, MailServiceFromEmailFindUniqueArgs<ExtArgs>>): Prisma__MailServiceFromEmailClient<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one MailServiceFromEmail that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MailServiceFromEmailFindUniqueOrThrowArgs} args - Arguments to find a MailServiceFromEmail
     * @example
     * // Get one MailServiceFromEmail
     * const mailServiceFromEmail = await prisma.mailServiceFromEmail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MailServiceFromEmailFindUniqueOrThrowArgs>(args: SelectSubset<T, MailServiceFromEmailFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MailServiceFromEmailClient<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first MailServiceFromEmail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailServiceFromEmailFindFirstArgs} args - Arguments to find a MailServiceFromEmail
     * @example
     * // Get one MailServiceFromEmail
     * const mailServiceFromEmail = await prisma.mailServiceFromEmail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MailServiceFromEmailFindFirstArgs>(args?: SelectSubset<T, MailServiceFromEmailFindFirstArgs<ExtArgs>>): Prisma__MailServiceFromEmailClient<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first MailServiceFromEmail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailServiceFromEmailFindFirstOrThrowArgs} args - Arguments to find a MailServiceFromEmail
     * @example
     * // Get one MailServiceFromEmail
     * const mailServiceFromEmail = await prisma.mailServiceFromEmail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MailServiceFromEmailFindFirstOrThrowArgs>(args?: SelectSubset<T, MailServiceFromEmailFindFirstOrThrowArgs<ExtArgs>>): Prisma__MailServiceFromEmailClient<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more MailServiceFromEmails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailServiceFromEmailFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MailServiceFromEmails
     * const mailServiceFromEmails = await prisma.mailServiceFromEmail.findMany()
     * 
     * // Get first 10 MailServiceFromEmails
     * const mailServiceFromEmails = await prisma.mailServiceFromEmail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const mailServiceFromEmailWithIdOnly = await prisma.mailServiceFromEmail.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MailServiceFromEmailFindManyArgs>(args?: SelectSubset<T, MailServiceFromEmailFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a MailServiceFromEmail.
     * @param {MailServiceFromEmailCreateArgs} args - Arguments to create a MailServiceFromEmail.
     * @example
     * // Create one MailServiceFromEmail
     * const MailServiceFromEmail = await prisma.mailServiceFromEmail.create({
     *   data: {
     *     // ... data to create a MailServiceFromEmail
     *   }
     * })
     * 
     */
    create<T extends MailServiceFromEmailCreateArgs>(args: SelectSubset<T, MailServiceFromEmailCreateArgs<ExtArgs>>): Prisma__MailServiceFromEmailClient<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many MailServiceFromEmails.
     * @param {MailServiceFromEmailCreateManyArgs} args - Arguments to create many MailServiceFromEmails.
     * @example
     * // Create many MailServiceFromEmails
     * const mailServiceFromEmail = await prisma.mailServiceFromEmail.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MailServiceFromEmailCreateManyArgs>(args?: SelectSubset<T, MailServiceFromEmailCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MailServiceFromEmails and returns the data saved in the database.
     * @param {MailServiceFromEmailCreateManyAndReturnArgs} args - Arguments to create many MailServiceFromEmails.
     * @example
     * // Create many MailServiceFromEmails
     * const mailServiceFromEmail = await prisma.mailServiceFromEmail.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MailServiceFromEmails and only return the `id`
     * const mailServiceFromEmailWithIdOnly = await prisma.mailServiceFromEmail.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MailServiceFromEmailCreateManyAndReturnArgs>(args?: SelectSubset<T, MailServiceFromEmailCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a MailServiceFromEmail.
     * @param {MailServiceFromEmailDeleteArgs} args - Arguments to delete one MailServiceFromEmail.
     * @example
     * // Delete one MailServiceFromEmail
     * const MailServiceFromEmail = await prisma.mailServiceFromEmail.delete({
     *   where: {
     *     // ... filter to delete one MailServiceFromEmail
     *   }
     * })
     * 
     */
    delete<T extends MailServiceFromEmailDeleteArgs>(args: SelectSubset<T, MailServiceFromEmailDeleteArgs<ExtArgs>>): Prisma__MailServiceFromEmailClient<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one MailServiceFromEmail.
     * @param {MailServiceFromEmailUpdateArgs} args - Arguments to update one MailServiceFromEmail.
     * @example
     * // Update one MailServiceFromEmail
     * const mailServiceFromEmail = await prisma.mailServiceFromEmail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MailServiceFromEmailUpdateArgs>(args: SelectSubset<T, MailServiceFromEmailUpdateArgs<ExtArgs>>): Prisma__MailServiceFromEmailClient<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more MailServiceFromEmails.
     * @param {MailServiceFromEmailDeleteManyArgs} args - Arguments to filter MailServiceFromEmails to delete.
     * @example
     * // Delete a few MailServiceFromEmails
     * const { count } = await prisma.mailServiceFromEmail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MailServiceFromEmailDeleteManyArgs>(args?: SelectSubset<T, MailServiceFromEmailDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MailServiceFromEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailServiceFromEmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MailServiceFromEmails
     * const mailServiceFromEmail = await prisma.mailServiceFromEmail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MailServiceFromEmailUpdateManyArgs>(args: SelectSubset<T, MailServiceFromEmailUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MailServiceFromEmail.
     * @param {MailServiceFromEmailUpsertArgs} args - Arguments to update or create a MailServiceFromEmail.
     * @example
     * // Update or create a MailServiceFromEmail
     * const mailServiceFromEmail = await prisma.mailServiceFromEmail.upsert({
     *   create: {
     *     // ... data to create a MailServiceFromEmail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MailServiceFromEmail we want to update
     *   }
     * })
     */
    upsert<T extends MailServiceFromEmailUpsertArgs>(args: SelectSubset<T, MailServiceFromEmailUpsertArgs<ExtArgs>>): Prisma__MailServiceFromEmailClient<$Result.GetResult<Prisma.$MailServiceFromEmailPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of MailServiceFromEmails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailServiceFromEmailCountArgs} args - Arguments to filter MailServiceFromEmails to count.
     * @example
     * // Count the number of MailServiceFromEmails
     * const count = await prisma.mailServiceFromEmail.count({
     *   where: {
     *     // ... the filter for the MailServiceFromEmails we want to count
     *   }
     * })
    **/
    count<T extends MailServiceFromEmailCountArgs>(
      args?: Subset<T, MailServiceFromEmailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MailServiceFromEmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MailServiceFromEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailServiceFromEmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MailServiceFromEmailAggregateArgs>(args: Subset<T, MailServiceFromEmailAggregateArgs>): Prisma.PrismaPromise<GetMailServiceFromEmailAggregateType<T>>

    /**
     * Group by MailServiceFromEmail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MailServiceFromEmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MailServiceFromEmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MailServiceFromEmailGroupByArgs['orderBy'] }
        : { orderBy?: MailServiceFromEmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MailServiceFromEmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMailServiceFromEmailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MailServiceFromEmail model
   */
  readonly fields: MailServiceFromEmailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MailServiceFromEmail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MailServiceFromEmailClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    integration<T extends IntegrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IntegrationDefaultArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MailServiceFromEmail model
   */ 
  interface MailServiceFromEmailFieldRefs {
    readonly id: FieldRef<"MailServiceFromEmail", 'String'>
    readonly fromName: FieldRef<"MailServiceFromEmail", 'String'>
    readonly fromEmail: FieldRef<"MailServiceFromEmail", 'String'>
    readonly replyTo: FieldRef<"MailServiceFromEmail", 'String'>
    readonly type: FieldRef<"MailServiceFromEmail", 'IntegrationType'>
    readonly integrationId: FieldRef<"MailServiceFromEmail", 'String'>
    readonly organizationId: FieldRef<"MailServiceFromEmail", 'String'>
    readonly createdAt: FieldRef<"MailServiceFromEmail", 'BigInt'>
    readonly updatedAt: FieldRef<"MailServiceFromEmail", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * MailServiceFromEmail findUnique
   */
  export type MailServiceFromEmailFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    /**
     * Filter, which MailServiceFromEmail to fetch.
     */
    where: MailServiceFromEmailWhereUniqueInput
  }

  /**
   * MailServiceFromEmail findUniqueOrThrow
   */
  export type MailServiceFromEmailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    /**
     * Filter, which MailServiceFromEmail to fetch.
     */
    where: MailServiceFromEmailWhereUniqueInput
  }

  /**
   * MailServiceFromEmail findFirst
   */
  export type MailServiceFromEmailFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    /**
     * Filter, which MailServiceFromEmail to fetch.
     */
    where?: MailServiceFromEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MailServiceFromEmails to fetch.
     */
    orderBy?: MailServiceFromEmailOrderByWithRelationInput | MailServiceFromEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MailServiceFromEmails.
     */
    cursor?: MailServiceFromEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MailServiceFromEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MailServiceFromEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MailServiceFromEmails.
     */
    distinct?: MailServiceFromEmailScalarFieldEnum | MailServiceFromEmailScalarFieldEnum[]
  }

  /**
   * MailServiceFromEmail findFirstOrThrow
   */
  export type MailServiceFromEmailFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    /**
     * Filter, which MailServiceFromEmail to fetch.
     */
    where?: MailServiceFromEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MailServiceFromEmails to fetch.
     */
    orderBy?: MailServiceFromEmailOrderByWithRelationInput | MailServiceFromEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MailServiceFromEmails.
     */
    cursor?: MailServiceFromEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MailServiceFromEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MailServiceFromEmails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MailServiceFromEmails.
     */
    distinct?: MailServiceFromEmailScalarFieldEnum | MailServiceFromEmailScalarFieldEnum[]
  }

  /**
   * MailServiceFromEmail findMany
   */
  export type MailServiceFromEmailFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    /**
     * Filter, which MailServiceFromEmails to fetch.
     */
    where?: MailServiceFromEmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MailServiceFromEmails to fetch.
     */
    orderBy?: MailServiceFromEmailOrderByWithRelationInput | MailServiceFromEmailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MailServiceFromEmails.
     */
    cursor?: MailServiceFromEmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MailServiceFromEmails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MailServiceFromEmails.
     */
    skip?: number
    distinct?: MailServiceFromEmailScalarFieldEnum | MailServiceFromEmailScalarFieldEnum[]
  }

  /**
   * MailServiceFromEmail create
   */
  export type MailServiceFromEmailCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    /**
     * The data needed to create a MailServiceFromEmail.
     */
    data: XOR<MailServiceFromEmailCreateInput, MailServiceFromEmailUncheckedCreateInput>
  }

  /**
   * MailServiceFromEmail createMany
   */
  export type MailServiceFromEmailCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MailServiceFromEmails.
     */
    data: MailServiceFromEmailCreateManyInput | MailServiceFromEmailCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MailServiceFromEmail createManyAndReturn
   */
  export type MailServiceFromEmailCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many MailServiceFromEmails.
     */
    data: MailServiceFromEmailCreateManyInput | MailServiceFromEmailCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * MailServiceFromEmail update
   */
  export type MailServiceFromEmailUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    /**
     * The data needed to update a MailServiceFromEmail.
     */
    data: XOR<MailServiceFromEmailUpdateInput, MailServiceFromEmailUncheckedUpdateInput>
    /**
     * Choose, which MailServiceFromEmail to update.
     */
    where: MailServiceFromEmailWhereUniqueInput
  }

  /**
   * MailServiceFromEmail updateMany
   */
  export type MailServiceFromEmailUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MailServiceFromEmails.
     */
    data: XOR<MailServiceFromEmailUpdateManyMutationInput, MailServiceFromEmailUncheckedUpdateManyInput>
    /**
     * Filter which MailServiceFromEmails to update
     */
    where?: MailServiceFromEmailWhereInput
  }

  /**
   * MailServiceFromEmail upsert
   */
  export type MailServiceFromEmailUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    /**
     * The filter to search for the MailServiceFromEmail to update in case it exists.
     */
    where: MailServiceFromEmailWhereUniqueInput
    /**
     * In case the MailServiceFromEmail found by the `where` argument doesn't exist, create a new MailServiceFromEmail with this data.
     */
    create: XOR<MailServiceFromEmailCreateInput, MailServiceFromEmailUncheckedCreateInput>
    /**
     * In case the MailServiceFromEmail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MailServiceFromEmailUpdateInput, MailServiceFromEmailUncheckedUpdateInput>
  }

  /**
   * MailServiceFromEmail delete
   */
  export type MailServiceFromEmailDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
    /**
     * Filter which MailServiceFromEmail to delete.
     */
    where: MailServiceFromEmailWhereUniqueInput
  }

  /**
   * MailServiceFromEmail deleteMany
   */
  export type MailServiceFromEmailDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MailServiceFromEmails to delete
     */
    where?: MailServiceFromEmailWhereInput
  }

  /**
   * MailServiceFromEmail without action
   */
  export type MailServiceFromEmailDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MailServiceFromEmail
     */
    select?: MailServiceFromEmailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MailServiceFromEmailInclude<ExtArgs> | null
  }


  /**
   * Model UnsubscribeLink
   */

  export type AggregateUnsubscribeLink = {
    _count: UnsubscribeLinkCountAggregateOutputType | null
    _min: UnsubscribeLinkMinAggregateOutputType | null
    _max: UnsubscribeLinkMaxAggregateOutputType | null
  }

  export type UnsubscribeLinkMinAggregateOutputType = {
    id: string | null
    name: string | null
    message: string | null
    anchorText: string | null
    isActive: boolean | null
    organizationId: string | null
  }

  export type UnsubscribeLinkMaxAggregateOutputType = {
    id: string | null
    name: string | null
    message: string | null
    anchorText: string | null
    isActive: boolean | null
    organizationId: string | null
  }

  export type UnsubscribeLinkCountAggregateOutputType = {
    id: number
    name: number
    message: number
    anchorText: number
    isActive: number
    organizationId: number
    _all: number
  }


  export type UnsubscribeLinkMinAggregateInputType = {
    id?: true
    name?: true
    message?: true
    anchorText?: true
    isActive?: true
    organizationId?: true
  }

  export type UnsubscribeLinkMaxAggregateInputType = {
    id?: true
    name?: true
    message?: true
    anchorText?: true
    isActive?: true
    organizationId?: true
  }

  export type UnsubscribeLinkCountAggregateInputType = {
    id?: true
    name?: true
    message?: true
    anchorText?: true
    isActive?: true
    organizationId?: true
    _all?: true
  }

  export type UnsubscribeLinkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UnsubscribeLink to aggregate.
     */
    where?: UnsubscribeLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnsubscribeLinks to fetch.
     */
    orderBy?: UnsubscribeLinkOrderByWithRelationInput | UnsubscribeLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UnsubscribeLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnsubscribeLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnsubscribeLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UnsubscribeLinks
    **/
    _count?: true | UnsubscribeLinkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UnsubscribeLinkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UnsubscribeLinkMaxAggregateInputType
  }

  export type GetUnsubscribeLinkAggregateType<T extends UnsubscribeLinkAggregateArgs> = {
        [P in keyof T & keyof AggregateUnsubscribeLink]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUnsubscribeLink[P]>
      : GetScalarType<T[P], AggregateUnsubscribeLink[P]>
  }




  export type UnsubscribeLinkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UnsubscribeLinkWhereInput
    orderBy?: UnsubscribeLinkOrderByWithAggregationInput | UnsubscribeLinkOrderByWithAggregationInput[]
    by: UnsubscribeLinkScalarFieldEnum[] | UnsubscribeLinkScalarFieldEnum
    having?: UnsubscribeLinkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UnsubscribeLinkCountAggregateInputType | true
    _min?: UnsubscribeLinkMinAggregateInputType
    _max?: UnsubscribeLinkMaxAggregateInputType
  }

  export type UnsubscribeLinkGroupByOutputType = {
    id: string
    name: string
    message: string | null
    anchorText: string
    isActive: boolean
    organizationId: string
    _count: UnsubscribeLinkCountAggregateOutputType | null
    _min: UnsubscribeLinkMinAggregateOutputType | null
    _max: UnsubscribeLinkMaxAggregateOutputType | null
  }

  type GetUnsubscribeLinkGroupByPayload<T extends UnsubscribeLinkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UnsubscribeLinkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UnsubscribeLinkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UnsubscribeLinkGroupByOutputType[P]>
            : GetScalarType<T[P], UnsubscribeLinkGroupByOutputType[P]>
        }
      >
    >


  export type UnsubscribeLinkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    message?: boolean
    anchorText?: boolean
    isActive?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unsubscribeLink"]>

  export type UnsubscribeLinkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    message?: boolean
    anchorText?: boolean
    isActive?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["unsubscribeLink"]>

  export type UnsubscribeLinkSelectScalar = {
    id?: boolean
    name?: boolean
    message?: boolean
    anchorText?: boolean
    isActive?: boolean
    organizationId?: boolean
  }

  export type UnsubscribeLinkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type UnsubscribeLinkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $UnsubscribeLinkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UnsubscribeLink"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      message: string | null
      anchorText: string
      isActive: boolean
      organizationId: string
    }, ExtArgs["result"]["unsubscribeLink"]>
    composites: {}
  }

  type UnsubscribeLinkGetPayload<S extends boolean | null | undefined | UnsubscribeLinkDefaultArgs> = $Result.GetResult<Prisma.$UnsubscribeLinkPayload, S>

  type UnsubscribeLinkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UnsubscribeLinkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UnsubscribeLinkCountAggregateInputType | true
    }

  export interface UnsubscribeLinkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UnsubscribeLink'], meta: { name: 'UnsubscribeLink' } }
    /**
     * Find zero or one UnsubscribeLink that matches the filter.
     * @param {UnsubscribeLinkFindUniqueArgs} args - Arguments to find a UnsubscribeLink
     * @example
     * // Get one UnsubscribeLink
     * const unsubscribeLink = await prisma.unsubscribeLink.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UnsubscribeLinkFindUniqueArgs>(args: SelectSubset<T, UnsubscribeLinkFindUniqueArgs<ExtArgs>>): Prisma__UnsubscribeLinkClient<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UnsubscribeLink that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UnsubscribeLinkFindUniqueOrThrowArgs} args - Arguments to find a UnsubscribeLink
     * @example
     * // Get one UnsubscribeLink
     * const unsubscribeLink = await prisma.unsubscribeLink.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UnsubscribeLinkFindUniqueOrThrowArgs>(args: SelectSubset<T, UnsubscribeLinkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UnsubscribeLinkClient<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UnsubscribeLink that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeLinkFindFirstArgs} args - Arguments to find a UnsubscribeLink
     * @example
     * // Get one UnsubscribeLink
     * const unsubscribeLink = await prisma.unsubscribeLink.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UnsubscribeLinkFindFirstArgs>(args?: SelectSubset<T, UnsubscribeLinkFindFirstArgs<ExtArgs>>): Prisma__UnsubscribeLinkClient<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UnsubscribeLink that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeLinkFindFirstOrThrowArgs} args - Arguments to find a UnsubscribeLink
     * @example
     * // Get one UnsubscribeLink
     * const unsubscribeLink = await prisma.unsubscribeLink.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UnsubscribeLinkFindFirstOrThrowArgs>(args?: SelectSubset<T, UnsubscribeLinkFindFirstOrThrowArgs<ExtArgs>>): Prisma__UnsubscribeLinkClient<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UnsubscribeLinks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeLinkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UnsubscribeLinks
     * const unsubscribeLinks = await prisma.unsubscribeLink.findMany()
     * 
     * // Get first 10 UnsubscribeLinks
     * const unsubscribeLinks = await prisma.unsubscribeLink.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const unsubscribeLinkWithIdOnly = await prisma.unsubscribeLink.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UnsubscribeLinkFindManyArgs>(args?: SelectSubset<T, UnsubscribeLinkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UnsubscribeLink.
     * @param {UnsubscribeLinkCreateArgs} args - Arguments to create a UnsubscribeLink.
     * @example
     * // Create one UnsubscribeLink
     * const UnsubscribeLink = await prisma.unsubscribeLink.create({
     *   data: {
     *     // ... data to create a UnsubscribeLink
     *   }
     * })
     * 
     */
    create<T extends UnsubscribeLinkCreateArgs>(args: SelectSubset<T, UnsubscribeLinkCreateArgs<ExtArgs>>): Prisma__UnsubscribeLinkClient<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UnsubscribeLinks.
     * @param {UnsubscribeLinkCreateManyArgs} args - Arguments to create many UnsubscribeLinks.
     * @example
     * // Create many UnsubscribeLinks
     * const unsubscribeLink = await prisma.unsubscribeLink.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UnsubscribeLinkCreateManyArgs>(args?: SelectSubset<T, UnsubscribeLinkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UnsubscribeLinks and returns the data saved in the database.
     * @param {UnsubscribeLinkCreateManyAndReturnArgs} args - Arguments to create many UnsubscribeLinks.
     * @example
     * // Create many UnsubscribeLinks
     * const unsubscribeLink = await prisma.unsubscribeLink.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UnsubscribeLinks and only return the `id`
     * const unsubscribeLinkWithIdOnly = await prisma.unsubscribeLink.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UnsubscribeLinkCreateManyAndReturnArgs>(args?: SelectSubset<T, UnsubscribeLinkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a UnsubscribeLink.
     * @param {UnsubscribeLinkDeleteArgs} args - Arguments to delete one UnsubscribeLink.
     * @example
     * // Delete one UnsubscribeLink
     * const UnsubscribeLink = await prisma.unsubscribeLink.delete({
     *   where: {
     *     // ... filter to delete one UnsubscribeLink
     *   }
     * })
     * 
     */
    delete<T extends UnsubscribeLinkDeleteArgs>(args: SelectSubset<T, UnsubscribeLinkDeleteArgs<ExtArgs>>): Prisma__UnsubscribeLinkClient<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UnsubscribeLink.
     * @param {UnsubscribeLinkUpdateArgs} args - Arguments to update one UnsubscribeLink.
     * @example
     * // Update one UnsubscribeLink
     * const unsubscribeLink = await prisma.unsubscribeLink.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UnsubscribeLinkUpdateArgs>(args: SelectSubset<T, UnsubscribeLinkUpdateArgs<ExtArgs>>): Prisma__UnsubscribeLinkClient<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UnsubscribeLinks.
     * @param {UnsubscribeLinkDeleteManyArgs} args - Arguments to filter UnsubscribeLinks to delete.
     * @example
     * // Delete a few UnsubscribeLinks
     * const { count } = await prisma.unsubscribeLink.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UnsubscribeLinkDeleteManyArgs>(args?: SelectSubset<T, UnsubscribeLinkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UnsubscribeLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeLinkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UnsubscribeLinks
     * const unsubscribeLink = await prisma.unsubscribeLink.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UnsubscribeLinkUpdateManyArgs>(args: SelectSubset<T, UnsubscribeLinkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UnsubscribeLink.
     * @param {UnsubscribeLinkUpsertArgs} args - Arguments to update or create a UnsubscribeLink.
     * @example
     * // Update or create a UnsubscribeLink
     * const unsubscribeLink = await prisma.unsubscribeLink.upsert({
     *   create: {
     *     // ... data to create a UnsubscribeLink
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UnsubscribeLink we want to update
     *   }
     * })
     */
    upsert<T extends UnsubscribeLinkUpsertArgs>(args: SelectSubset<T, UnsubscribeLinkUpsertArgs<ExtArgs>>): Prisma__UnsubscribeLinkClient<$Result.GetResult<Prisma.$UnsubscribeLinkPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UnsubscribeLinks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeLinkCountArgs} args - Arguments to filter UnsubscribeLinks to count.
     * @example
     * // Count the number of UnsubscribeLinks
     * const count = await prisma.unsubscribeLink.count({
     *   where: {
     *     // ... the filter for the UnsubscribeLinks we want to count
     *   }
     * })
    **/
    count<T extends UnsubscribeLinkCountArgs>(
      args?: Subset<T, UnsubscribeLinkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UnsubscribeLinkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UnsubscribeLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeLinkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UnsubscribeLinkAggregateArgs>(args: Subset<T, UnsubscribeLinkAggregateArgs>): Prisma.PrismaPromise<GetUnsubscribeLinkAggregateType<T>>

    /**
     * Group by UnsubscribeLink.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UnsubscribeLinkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UnsubscribeLinkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UnsubscribeLinkGroupByArgs['orderBy'] }
        : { orderBy?: UnsubscribeLinkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UnsubscribeLinkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUnsubscribeLinkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UnsubscribeLink model
   */
  readonly fields: UnsubscribeLinkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UnsubscribeLink.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UnsubscribeLinkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UnsubscribeLink model
   */ 
  interface UnsubscribeLinkFieldRefs {
    readonly id: FieldRef<"UnsubscribeLink", 'String'>
    readonly name: FieldRef<"UnsubscribeLink", 'String'>
    readonly message: FieldRef<"UnsubscribeLink", 'String'>
    readonly anchorText: FieldRef<"UnsubscribeLink", 'String'>
    readonly isActive: FieldRef<"UnsubscribeLink", 'Boolean'>
    readonly organizationId: FieldRef<"UnsubscribeLink", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UnsubscribeLink findUnique
   */
  export type UnsubscribeLinkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    /**
     * Filter, which UnsubscribeLink to fetch.
     */
    where: UnsubscribeLinkWhereUniqueInput
  }

  /**
   * UnsubscribeLink findUniqueOrThrow
   */
  export type UnsubscribeLinkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    /**
     * Filter, which UnsubscribeLink to fetch.
     */
    where: UnsubscribeLinkWhereUniqueInput
  }

  /**
   * UnsubscribeLink findFirst
   */
  export type UnsubscribeLinkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    /**
     * Filter, which UnsubscribeLink to fetch.
     */
    where?: UnsubscribeLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnsubscribeLinks to fetch.
     */
    orderBy?: UnsubscribeLinkOrderByWithRelationInput | UnsubscribeLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UnsubscribeLinks.
     */
    cursor?: UnsubscribeLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnsubscribeLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnsubscribeLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UnsubscribeLinks.
     */
    distinct?: UnsubscribeLinkScalarFieldEnum | UnsubscribeLinkScalarFieldEnum[]
  }

  /**
   * UnsubscribeLink findFirstOrThrow
   */
  export type UnsubscribeLinkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    /**
     * Filter, which UnsubscribeLink to fetch.
     */
    where?: UnsubscribeLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnsubscribeLinks to fetch.
     */
    orderBy?: UnsubscribeLinkOrderByWithRelationInput | UnsubscribeLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UnsubscribeLinks.
     */
    cursor?: UnsubscribeLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnsubscribeLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnsubscribeLinks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UnsubscribeLinks.
     */
    distinct?: UnsubscribeLinkScalarFieldEnum | UnsubscribeLinkScalarFieldEnum[]
  }

  /**
   * UnsubscribeLink findMany
   */
  export type UnsubscribeLinkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    /**
     * Filter, which UnsubscribeLinks to fetch.
     */
    where?: UnsubscribeLinkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UnsubscribeLinks to fetch.
     */
    orderBy?: UnsubscribeLinkOrderByWithRelationInput | UnsubscribeLinkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UnsubscribeLinks.
     */
    cursor?: UnsubscribeLinkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UnsubscribeLinks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UnsubscribeLinks.
     */
    skip?: number
    distinct?: UnsubscribeLinkScalarFieldEnum | UnsubscribeLinkScalarFieldEnum[]
  }

  /**
   * UnsubscribeLink create
   */
  export type UnsubscribeLinkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    /**
     * The data needed to create a UnsubscribeLink.
     */
    data: XOR<UnsubscribeLinkCreateInput, UnsubscribeLinkUncheckedCreateInput>
  }

  /**
   * UnsubscribeLink createMany
   */
  export type UnsubscribeLinkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UnsubscribeLinks.
     */
    data: UnsubscribeLinkCreateManyInput | UnsubscribeLinkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UnsubscribeLink createManyAndReturn
   */
  export type UnsubscribeLinkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many UnsubscribeLinks.
     */
    data: UnsubscribeLinkCreateManyInput | UnsubscribeLinkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UnsubscribeLink update
   */
  export type UnsubscribeLinkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    /**
     * The data needed to update a UnsubscribeLink.
     */
    data: XOR<UnsubscribeLinkUpdateInput, UnsubscribeLinkUncheckedUpdateInput>
    /**
     * Choose, which UnsubscribeLink to update.
     */
    where: UnsubscribeLinkWhereUniqueInput
  }

  /**
   * UnsubscribeLink updateMany
   */
  export type UnsubscribeLinkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UnsubscribeLinks.
     */
    data: XOR<UnsubscribeLinkUpdateManyMutationInput, UnsubscribeLinkUncheckedUpdateManyInput>
    /**
     * Filter which UnsubscribeLinks to update
     */
    where?: UnsubscribeLinkWhereInput
  }

  /**
   * UnsubscribeLink upsert
   */
  export type UnsubscribeLinkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    /**
     * The filter to search for the UnsubscribeLink to update in case it exists.
     */
    where: UnsubscribeLinkWhereUniqueInput
    /**
     * In case the UnsubscribeLink found by the `where` argument doesn't exist, create a new UnsubscribeLink with this data.
     */
    create: XOR<UnsubscribeLinkCreateInput, UnsubscribeLinkUncheckedCreateInput>
    /**
     * In case the UnsubscribeLink was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UnsubscribeLinkUpdateInput, UnsubscribeLinkUncheckedUpdateInput>
  }

  /**
   * UnsubscribeLink delete
   */
  export type UnsubscribeLinkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
    /**
     * Filter which UnsubscribeLink to delete.
     */
    where: UnsubscribeLinkWhereUniqueInput
  }

  /**
   * UnsubscribeLink deleteMany
   */
  export type UnsubscribeLinkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UnsubscribeLinks to delete
     */
    where?: UnsubscribeLinkWhereInput
  }

  /**
   * UnsubscribeLink without action
   */
  export type UnsubscribeLinkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UnsubscribeLink
     */
    select?: UnsubscribeLinkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UnsubscribeLinkInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
  }

  export type JobSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
  }

  export type JobMinAggregateOutputType = {
    id: string | null
    name: string | null
    status: $Enums.JobStatus | null
    createdAt: bigint | null
    updatedAt: bigint | null
    integrationId: string | null
    organizationId: string | null
  }

  export type JobMaxAggregateOutputType = {
    id: string | null
    name: string | null
    status: $Enums.JobStatus | null
    createdAt: bigint | null
    updatedAt: bigint | null
    integrationId: string | null
    organizationId: string | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    name: number
    status: number
    createdAt: number
    updatedAt: number
    integrationId: number
    organizationId: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
  }

  export type JobSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    integrationId?: true
    organizationId?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    integrationId?: true
    organizationId?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    integrationId?: true
    organizationId?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: string
    name: string
    status: $Enums.JobStatus
    createdAt: bigint
    updatedAt: bigint
    integrationId: string
    organizationId: string
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    tasks?: boolean | Job$tasksArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    integrationId?: boolean
    organizationId?: boolean
  }

  export type JobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
    tasks?: boolean | Job$tasksArgs<ExtArgs>
    _count?: boolean | JobCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    integration?: boolean | IntegrationDefaultArgs<ExtArgs>
  }

  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {
      integration: Prisma.$IntegrationPayload<ExtArgs>
      tasks: Prisma.$TaskPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      status: $Enums.JobStatus
      createdAt: bigint
      updatedAt: bigint
      integrationId: string
      organizationId: string
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    integration<T extends IntegrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, IntegrationDefaultArgs<ExtArgs>>): Prisma__IntegrationClient<$Result.GetResult<Prisma.$IntegrationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tasks<T extends Job$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Job$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */ 
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'String'>
    readonly name: FieldRef<"Job", 'String'>
    readonly status: FieldRef<"Job", 'JobStatus'>
    readonly createdAt: FieldRef<"Job", 'BigInt'>
    readonly updatedAt: FieldRef<"Job", 'BigInt'>
    readonly integrationId: FieldRef<"Job", 'String'>
    readonly organizationId: FieldRef<"Job", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
  }

  /**
   * Job.tasks
   */
  export type Job$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JobInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
  }

  export type TaskSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    jobId: string | null
    name: string | null
    status: $Enums.TaskStatus | null
    createdAt: bigint | null
    updatedAt: bigint | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    jobId: string | null
    name: string | null
    status: $Enums.TaskStatus | null
    createdAt: bigint | null
    updatedAt: bigint | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    jobId: number
    name: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
  }

  export type TaskSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMinAggregateInputType = {
    id?: true
    jobId?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    jobId?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    jobId?: true
    name?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TaskAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TaskSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _avg?: TaskAvgAggregateInputType
    _sum?: TaskSumAggregateInputType
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    jobId: string
    name: string
    status: $Enums.TaskStatus
    createdAt: bigint
    updatedAt: bigint
    _count: TaskCountAggregateOutputType | null
    _avg: TaskAvgAggregateOutputType | null
    _sum: TaskSumAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jobId?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    job?: boolean | JobDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    jobId?: boolean
    name?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    job?: boolean | JobDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      job: Prisma.$JobPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      jobId: string
      name: string
      status: $Enums.TaskStatus
      createdAt: bigint
      updatedAt: bigint
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    job<T extends JobDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JobDefaultArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly jobId: FieldRef<"Task", 'String'>
    readonly name: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'TaskStatus'>
    readonly createdAt: FieldRef<"Task", 'BigInt'>
    readonly updatedAt: FieldRef<"Task", 'BigInt'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Webhook
   */

  export type AggregateWebhook = {
    _count: WebhookCountAggregateOutputType | null
    _avg: WebhookAvgAggregateOutputType | null
    _sum: WebhookSumAggregateOutputType | null
    _min: WebhookMinAggregateOutputType | null
    _max: WebhookMaxAggregateOutputType | null
  }

  export type WebhookAvgAggregateOutputType = {
    createdAt: number | null
  }

  export type WebhookSumAggregateOutputType = {
    createdAt: bigint | null
  }

  export type WebhookMinAggregateOutputType = {
    id: string | null
    url: string | null
    type: $Enums.WebhookType | null
    createdAt: bigint | null
    organizationId: string | null
  }

  export type WebhookMaxAggregateOutputType = {
    id: string | null
    url: string | null
    type: $Enums.WebhookType | null
    createdAt: bigint | null
    organizationId: string | null
  }

  export type WebhookCountAggregateOutputType = {
    id: number
    url: number
    type: number
    createdAt: number
    organizationId: number
    data: number
    _all: number
  }


  export type WebhookAvgAggregateInputType = {
    createdAt?: true
  }

  export type WebhookSumAggregateInputType = {
    createdAt?: true
  }

  export type WebhookMinAggregateInputType = {
    id?: true
    url?: true
    type?: true
    createdAt?: true
    organizationId?: true
  }

  export type WebhookMaxAggregateInputType = {
    id?: true
    url?: true
    type?: true
    createdAt?: true
    organizationId?: true
  }

  export type WebhookCountAggregateInputType = {
    id?: true
    url?: true
    type?: true
    createdAt?: true
    organizationId?: true
    data?: true
    _all?: true
  }

  export type WebhookAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Webhook to aggregate.
     */
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     */
    orderBy?: WebhookOrderByWithRelationInput | WebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Webhooks
    **/
    _count?: true | WebhookCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebhookAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebhookSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebhookMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebhookMaxAggregateInputType
  }

  export type GetWebhookAggregateType<T extends WebhookAggregateArgs> = {
        [P in keyof T & keyof AggregateWebhook]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebhook[P]>
      : GetScalarType<T[P], AggregateWebhook[P]>
  }




  export type WebhookGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebhookWhereInput
    orderBy?: WebhookOrderByWithAggregationInput | WebhookOrderByWithAggregationInput[]
    by: WebhookScalarFieldEnum[] | WebhookScalarFieldEnum
    having?: WebhookScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebhookCountAggregateInputType | true
    _avg?: WebhookAvgAggregateInputType
    _sum?: WebhookSumAggregateInputType
    _min?: WebhookMinAggregateInputType
    _max?: WebhookMaxAggregateInputType
  }

  export type WebhookGroupByOutputType = {
    id: string
    url: string
    type: $Enums.WebhookType
    createdAt: bigint
    organizationId: string
    data: JsonValue
    _count: WebhookCountAggregateOutputType | null
    _avg: WebhookAvgAggregateOutputType | null
    _sum: WebhookSumAggregateOutputType | null
    _min: WebhookMinAggregateOutputType | null
    _max: WebhookMaxAggregateOutputType | null
  }

  type GetWebhookGroupByPayload<T extends WebhookGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebhookGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebhookGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebhookGroupByOutputType[P]>
            : GetScalarType<T[P], WebhookGroupByOutputType[P]>
        }
      >
    >


  export type WebhookSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    type?: boolean
    createdAt?: boolean
    organizationId?: boolean
    data?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webhook"]>

  export type WebhookSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    type?: boolean
    createdAt?: boolean
    organizationId?: boolean
    data?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webhook"]>

  export type WebhookSelectScalar = {
    id?: boolean
    url?: boolean
    type?: boolean
    createdAt?: boolean
    organizationId?: boolean
    data?: boolean
  }

  export type WebhookInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }
  export type WebhookIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $WebhookPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Webhook"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      type: $Enums.WebhookType
      createdAt: bigint
      organizationId: string
      data: Prisma.JsonValue
    }, ExtArgs["result"]["webhook"]>
    composites: {}
  }

  type WebhookGetPayload<S extends boolean | null | undefined | WebhookDefaultArgs> = $Result.GetResult<Prisma.$WebhookPayload, S>

  type WebhookCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WebhookFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WebhookCountAggregateInputType | true
    }

  export interface WebhookDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Webhook'], meta: { name: 'Webhook' } }
    /**
     * Find zero or one Webhook that matches the filter.
     * @param {WebhookFindUniqueArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebhookFindUniqueArgs>(args: SelectSubset<T, WebhookFindUniqueArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Webhook that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WebhookFindUniqueOrThrowArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebhookFindUniqueOrThrowArgs>(args: SelectSubset<T, WebhookFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Webhook that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookFindFirstArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebhookFindFirstArgs>(args?: SelectSubset<T, WebhookFindFirstArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Webhook that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookFindFirstOrThrowArgs} args - Arguments to find a Webhook
     * @example
     * // Get one Webhook
     * const webhook = await prisma.webhook.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebhookFindFirstOrThrowArgs>(args?: SelectSubset<T, WebhookFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Webhooks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Webhooks
     * const webhooks = await prisma.webhook.findMany()
     * 
     * // Get first 10 Webhooks
     * const webhooks = await prisma.webhook.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webhookWithIdOnly = await prisma.webhook.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebhookFindManyArgs>(args?: SelectSubset<T, WebhookFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Webhook.
     * @param {WebhookCreateArgs} args - Arguments to create a Webhook.
     * @example
     * // Create one Webhook
     * const Webhook = await prisma.webhook.create({
     *   data: {
     *     // ... data to create a Webhook
     *   }
     * })
     * 
     */
    create<T extends WebhookCreateArgs>(args: SelectSubset<T, WebhookCreateArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Webhooks.
     * @param {WebhookCreateManyArgs} args - Arguments to create many Webhooks.
     * @example
     * // Create many Webhooks
     * const webhook = await prisma.webhook.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebhookCreateManyArgs>(args?: SelectSubset<T, WebhookCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Webhooks and returns the data saved in the database.
     * @param {WebhookCreateManyAndReturnArgs} args - Arguments to create many Webhooks.
     * @example
     * // Create many Webhooks
     * const webhook = await prisma.webhook.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Webhooks and only return the `id`
     * const webhookWithIdOnly = await prisma.webhook.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebhookCreateManyAndReturnArgs>(args?: SelectSubset<T, WebhookCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Webhook.
     * @param {WebhookDeleteArgs} args - Arguments to delete one Webhook.
     * @example
     * // Delete one Webhook
     * const Webhook = await prisma.webhook.delete({
     *   where: {
     *     // ... filter to delete one Webhook
     *   }
     * })
     * 
     */
    delete<T extends WebhookDeleteArgs>(args: SelectSubset<T, WebhookDeleteArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Webhook.
     * @param {WebhookUpdateArgs} args - Arguments to update one Webhook.
     * @example
     * // Update one Webhook
     * const webhook = await prisma.webhook.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebhookUpdateArgs>(args: SelectSubset<T, WebhookUpdateArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Webhooks.
     * @param {WebhookDeleteManyArgs} args - Arguments to filter Webhooks to delete.
     * @example
     * // Delete a few Webhooks
     * const { count } = await prisma.webhook.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebhookDeleteManyArgs>(args?: SelectSubset<T, WebhookDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Webhooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Webhooks
     * const webhook = await prisma.webhook.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebhookUpdateManyArgs>(args: SelectSubset<T, WebhookUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Webhook.
     * @param {WebhookUpsertArgs} args - Arguments to update or create a Webhook.
     * @example
     * // Update or create a Webhook
     * const webhook = await prisma.webhook.upsert({
     *   create: {
     *     // ... data to create a Webhook
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Webhook we want to update
     *   }
     * })
     */
    upsert<T extends WebhookUpsertArgs>(args: SelectSubset<T, WebhookUpsertArgs<ExtArgs>>): Prisma__WebhookClient<$Result.GetResult<Prisma.$WebhookPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Webhooks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookCountArgs} args - Arguments to filter Webhooks to count.
     * @example
     * // Count the number of Webhooks
     * const count = await prisma.webhook.count({
     *   where: {
     *     // ... the filter for the Webhooks we want to count
     *   }
     * })
    **/
    count<T extends WebhookCountArgs>(
      args?: Subset<T, WebhookCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebhookCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Webhook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebhookAggregateArgs>(args: Subset<T, WebhookAggregateArgs>): Prisma.PrismaPromise<GetWebhookAggregateType<T>>

    /**
     * Group by Webhook.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebhookGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebhookGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebhookGroupByArgs['orderBy'] }
        : { orderBy?: WebhookGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebhookGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebhookGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Webhook model
   */
  readonly fields: WebhookFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Webhook.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebhookClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Webhook model
   */ 
  interface WebhookFieldRefs {
    readonly id: FieldRef<"Webhook", 'String'>
    readonly url: FieldRef<"Webhook", 'String'>
    readonly type: FieldRef<"Webhook", 'WebhookType'>
    readonly createdAt: FieldRef<"Webhook", 'BigInt'>
    readonly organizationId: FieldRef<"Webhook", 'String'>
    readonly data: FieldRef<"Webhook", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Webhook findUnique
   */
  export type WebhookFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhook to fetch.
     */
    where: WebhookWhereUniqueInput
  }

  /**
   * Webhook findUniqueOrThrow
   */
  export type WebhookFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhook to fetch.
     */
    where: WebhookWhereUniqueInput
  }

  /**
   * Webhook findFirst
   */
  export type WebhookFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhook to fetch.
     */
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     */
    orderBy?: WebhookOrderByWithRelationInput | WebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Webhooks.
     */
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Webhooks.
     */
    distinct?: WebhookScalarFieldEnum | WebhookScalarFieldEnum[]
  }

  /**
   * Webhook findFirstOrThrow
   */
  export type WebhookFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhook to fetch.
     */
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     */
    orderBy?: WebhookOrderByWithRelationInput | WebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Webhooks.
     */
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Webhooks.
     */
    distinct?: WebhookScalarFieldEnum | WebhookScalarFieldEnum[]
  }

  /**
   * Webhook findMany
   */
  export type WebhookFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter, which Webhooks to fetch.
     */
    where?: WebhookWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webhooks to fetch.
     */
    orderBy?: WebhookOrderByWithRelationInput | WebhookOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Webhooks.
     */
    cursor?: WebhookWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webhooks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webhooks.
     */
    skip?: number
    distinct?: WebhookScalarFieldEnum | WebhookScalarFieldEnum[]
  }

  /**
   * Webhook create
   */
  export type WebhookCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * The data needed to create a Webhook.
     */
    data: XOR<WebhookCreateInput, WebhookUncheckedCreateInput>
  }

  /**
   * Webhook createMany
   */
  export type WebhookCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Webhooks.
     */
    data: WebhookCreateManyInput | WebhookCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Webhook createManyAndReturn
   */
  export type WebhookCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Webhooks.
     */
    data: WebhookCreateManyInput | WebhookCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Webhook update
   */
  export type WebhookUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * The data needed to update a Webhook.
     */
    data: XOR<WebhookUpdateInput, WebhookUncheckedUpdateInput>
    /**
     * Choose, which Webhook to update.
     */
    where: WebhookWhereUniqueInput
  }

  /**
   * Webhook updateMany
   */
  export type WebhookUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Webhooks.
     */
    data: XOR<WebhookUpdateManyMutationInput, WebhookUncheckedUpdateManyInput>
    /**
     * Filter which Webhooks to update
     */
    where?: WebhookWhereInput
  }

  /**
   * Webhook upsert
   */
  export type WebhookUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * The filter to search for the Webhook to update in case it exists.
     */
    where: WebhookWhereUniqueInput
    /**
     * In case the Webhook found by the `where` argument doesn't exist, create a new Webhook with this data.
     */
    create: XOR<WebhookCreateInput, WebhookUncheckedCreateInput>
    /**
     * In case the Webhook was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebhookUpdateInput, WebhookUncheckedUpdateInput>
  }

  /**
   * Webhook delete
   */
  export type WebhookDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
    /**
     * Filter which Webhook to delete.
     */
    where: WebhookWhereUniqueInput
  }

  /**
   * Webhook deleteMany
   */
  export type WebhookDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Webhooks to delete
     */
    where?: WebhookWhereInput
  }

  /**
   * Webhook without action
   */
  export type WebhookDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webhook
     */
    select?: WebhookSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebhookInclude<ExtArgs> | null
  }


  /**
   * Model Template
   */

  export type AggregateTemplate = {
    _count: TemplateCountAggregateOutputType | null
    _avg: TemplateAvgAggregateOutputType | null
    _sum: TemplateSumAggregateOutputType | null
    _min: TemplateMinAggregateOutputType | null
    _max: TemplateMaxAggregateOutputType | null
  }

  export type TemplateAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type TemplateSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type TemplateMinAggregateOutputType = {
    id: string | null
    html: string | null
    name: string | null
    createdAt: bigint | null
    isEnabled: boolean | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    userId: string | null
    orgId: string | null
  }

  export type TemplateMaxAggregateOutputType = {
    id: string | null
    html: string | null
    name: string | null
    createdAt: bigint | null
    isEnabled: boolean | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    userId: string | null
    orgId: string | null
  }

  export type TemplateCountAggregateOutputType = {
    id: number
    html: number
    name: number
    createdAt: number
    isEnabled: number
    updatedAt: number
    deletedAt: number
    userId: number
    orgId: number
    _all: number
  }


  export type TemplateAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type TemplateSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type TemplateMinAggregateInputType = {
    id?: true
    html?: true
    name?: true
    createdAt?: true
    isEnabled?: true
    updatedAt?: true
    deletedAt?: true
    userId?: true
    orgId?: true
  }

  export type TemplateMaxAggregateInputType = {
    id?: true
    html?: true
    name?: true
    createdAt?: true
    isEnabled?: true
    updatedAt?: true
    deletedAt?: true
    userId?: true
    orgId?: true
  }

  export type TemplateCountAggregateInputType = {
    id?: true
    html?: true
    name?: true
    createdAt?: true
    isEnabled?: true
    updatedAt?: true
    deletedAt?: true
    userId?: true
    orgId?: true
    _all?: true
  }

  export type TemplateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Template to aggregate.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Templates
    **/
    _count?: true | TemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TemplateMaxAggregateInputType
  }

  export type GetTemplateAggregateType<T extends TemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTemplate[P]>
      : GetScalarType<T[P], AggregateTemplate[P]>
  }




  export type TemplateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TemplateWhereInput
    orderBy?: TemplateOrderByWithAggregationInput | TemplateOrderByWithAggregationInput[]
    by: TemplateScalarFieldEnum[] | TemplateScalarFieldEnum
    having?: TemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TemplateCountAggregateInputType | true
    _avg?: TemplateAvgAggregateInputType
    _sum?: TemplateSumAggregateInputType
    _min?: TemplateMinAggregateInputType
    _max?: TemplateMaxAggregateInputType
  }

  export type TemplateGroupByOutputType = {
    id: string
    html: string
    name: string
    createdAt: bigint
    isEnabled: boolean
    updatedAt: bigint
    deletedAt: bigint
    userId: string | null
    orgId: string | null
    _count: TemplateCountAggregateOutputType | null
    _avg: TemplateAvgAggregateOutputType | null
    _sum: TemplateSumAggregateOutputType | null
    _min: TemplateMinAggregateOutputType | null
    _max: TemplateMaxAggregateOutputType | null
  }

  type GetTemplateGroupByPayload<T extends TemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TemplateGroupByOutputType[P]>
            : GetScalarType<T[P], TemplateGroupByOutputType[P]>
        }
      >
    >


  export type TemplateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    html?: boolean
    name?: boolean
    createdAt?: boolean
    isEnabled?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    userId?: boolean
    orgId?: boolean
    organization?: boolean | Template$organizationArgs<ExtArgs>
    user?: boolean | Template$userArgs<ExtArgs>
  }, ExtArgs["result"]["template"]>

  export type TemplateSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    html?: boolean
    name?: boolean
    createdAt?: boolean
    isEnabled?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    userId?: boolean
    orgId?: boolean
    organization?: boolean | Template$organizationArgs<ExtArgs>
    user?: boolean | Template$userArgs<ExtArgs>
  }, ExtArgs["result"]["template"]>

  export type TemplateSelectScalar = {
    id?: boolean
    html?: boolean
    name?: boolean
    createdAt?: boolean
    isEnabled?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    userId?: boolean
    orgId?: boolean
  }

  export type TemplateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | Template$organizationArgs<ExtArgs>
    user?: boolean | Template$userArgs<ExtArgs>
  }
  export type TemplateIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | Template$organizationArgs<ExtArgs>
    user?: boolean | Template$userArgs<ExtArgs>
  }

  export type $TemplatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Template"
    objects: {
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      html: string
      name: string
      createdAt: bigint
      isEnabled: boolean
      updatedAt: bigint
      deletedAt: bigint
      userId: string | null
      orgId: string | null
    }, ExtArgs["result"]["template"]>
    composites: {}
  }

  type TemplateGetPayload<S extends boolean | null | undefined | TemplateDefaultArgs> = $Result.GetResult<Prisma.$TemplatePayload, S>

  type TemplateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TemplateFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TemplateCountAggregateInputType | true
    }

  export interface TemplateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Template'], meta: { name: 'Template' } }
    /**
     * Find zero or one Template that matches the filter.
     * @param {TemplateFindUniqueArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TemplateFindUniqueArgs>(args: SelectSubset<T, TemplateFindUniqueArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Template that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TemplateFindUniqueOrThrowArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TemplateFindUniqueOrThrowArgs>(args: SelectSubset<T, TemplateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Template that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateFindFirstArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TemplateFindFirstArgs>(args?: SelectSubset<T, TemplateFindFirstArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Template that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateFindFirstOrThrowArgs} args - Arguments to find a Template
     * @example
     * // Get one Template
     * const template = await prisma.template.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TemplateFindFirstOrThrowArgs>(args?: SelectSubset<T, TemplateFindFirstOrThrowArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Templates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Templates
     * const templates = await prisma.template.findMany()
     * 
     * // Get first 10 Templates
     * const templates = await prisma.template.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const templateWithIdOnly = await prisma.template.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TemplateFindManyArgs>(args?: SelectSubset<T, TemplateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Template.
     * @param {TemplateCreateArgs} args - Arguments to create a Template.
     * @example
     * // Create one Template
     * const Template = await prisma.template.create({
     *   data: {
     *     // ... data to create a Template
     *   }
     * })
     * 
     */
    create<T extends TemplateCreateArgs>(args: SelectSubset<T, TemplateCreateArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Templates.
     * @param {TemplateCreateManyArgs} args - Arguments to create many Templates.
     * @example
     * // Create many Templates
     * const template = await prisma.template.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TemplateCreateManyArgs>(args?: SelectSubset<T, TemplateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Templates and returns the data saved in the database.
     * @param {TemplateCreateManyAndReturnArgs} args - Arguments to create many Templates.
     * @example
     * // Create many Templates
     * const template = await prisma.template.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Templates and only return the `id`
     * const templateWithIdOnly = await prisma.template.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TemplateCreateManyAndReturnArgs>(args?: SelectSubset<T, TemplateCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Template.
     * @param {TemplateDeleteArgs} args - Arguments to delete one Template.
     * @example
     * // Delete one Template
     * const Template = await prisma.template.delete({
     *   where: {
     *     // ... filter to delete one Template
     *   }
     * })
     * 
     */
    delete<T extends TemplateDeleteArgs>(args: SelectSubset<T, TemplateDeleteArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Template.
     * @param {TemplateUpdateArgs} args - Arguments to update one Template.
     * @example
     * // Update one Template
     * const template = await prisma.template.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TemplateUpdateArgs>(args: SelectSubset<T, TemplateUpdateArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Templates.
     * @param {TemplateDeleteManyArgs} args - Arguments to filter Templates to delete.
     * @example
     * // Delete a few Templates
     * const { count } = await prisma.template.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TemplateDeleteManyArgs>(args?: SelectSubset<T, TemplateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Templates
     * const template = await prisma.template.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TemplateUpdateManyArgs>(args: SelectSubset<T, TemplateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Template.
     * @param {TemplateUpsertArgs} args - Arguments to update or create a Template.
     * @example
     * // Update or create a Template
     * const template = await prisma.template.upsert({
     *   create: {
     *     // ... data to create a Template
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Template we want to update
     *   }
     * })
     */
    upsert<T extends TemplateUpsertArgs>(args: SelectSubset<T, TemplateUpsertArgs<ExtArgs>>): Prisma__TemplateClient<$Result.GetResult<Prisma.$TemplatePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Templates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateCountArgs} args - Arguments to filter Templates to count.
     * @example
     * // Count the number of Templates
     * const count = await prisma.template.count({
     *   where: {
     *     // ... the filter for the Templates we want to count
     *   }
     * })
    **/
    count<T extends TemplateCountArgs>(
      args?: Subset<T, TemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Template.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TemplateAggregateArgs>(args: Subset<T, TemplateAggregateArgs>): Prisma.PrismaPromise<GetTemplateAggregateType<T>>

    /**
     * Group by Template.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TemplateGroupByArgs['orderBy'] }
        : { orderBy?: TemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Template model
   */
  readonly fields: TemplateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Template.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TemplateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    organization<T extends Template$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Template$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends Template$userArgs<ExtArgs> = {}>(args?: Subset<T, Template$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Template model
   */ 
  interface TemplateFieldRefs {
    readonly id: FieldRef<"Template", 'String'>
    readonly html: FieldRef<"Template", 'String'>
    readonly name: FieldRef<"Template", 'String'>
    readonly createdAt: FieldRef<"Template", 'BigInt'>
    readonly isEnabled: FieldRef<"Template", 'Boolean'>
    readonly updatedAt: FieldRef<"Template", 'BigInt'>
    readonly deletedAt: FieldRef<"Template", 'BigInt'>
    readonly userId: FieldRef<"Template", 'String'>
    readonly orgId: FieldRef<"Template", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Template findUnique
   */
  export type TemplateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template findUniqueOrThrow
   */
  export type TemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template findFirst
   */
  export type TemplateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Templates.
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Templates.
     */
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Template findFirstOrThrow
   */
  export type TemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Template to fetch.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Templates.
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Templates.
     */
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Template findMany
   */
  export type TemplateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter, which Templates to fetch.
     */
    where?: TemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Templates to fetch.
     */
    orderBy?: TemplateOrderByWithRelationInput | TemplateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Templates.
     */
    cursor?: TemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Templates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Templates.
     */
    skip?: number
    distinct?: TemplateScalarFieldEnum | TemplateScalarFieldEnum[]
  }

  /**
   * Template create
   */
  export type TemplateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a Template.
     */
    data: XOR<TemplateCreateInput, TemplateUncheckedCreateInput>
  }

  /**
   * Template createMany
   */
  export type TemplateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Templates.
     */
    data: TemplateCreateManyInput | TemplateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Template createManyAndReturn
   */
  export type TemplateCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Templates.
     */
    data: TemplateCreateManyInput | TemplateCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Template update
   */
  export type TemplateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a Template.
     */
    data: XOR<TemplateUpdateInput, TemplateUncheckedUpdateInput>
    /**
     * Choose, which Template to update.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template updateMany
   */
  export type TemplateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Templates.
     */
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyInput>
    /**
     * Filter which Templates to update
     */
    where?: TemplateWhereInput
  }

  /**
   * Template upsert
   */
  export type TemplateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the Template to update in case it exists.
     */
    where: TemplateWhereUniqueInput
    /**
     * In case the Template found by the `where` argument doesn't exist, create a new Template with this data.
     */
    create: XOR<TemplateCreateInput, TemplateUncheckedCreateInput>
    /**
     * In case the Template was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TemplateUpdateInput, TemplateUncheckedUpdateInput>
  }

  /**
   * Template delete
   */
  export type TemplateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
    /**
     * Filter which Template to delete.
     */
    where: TemplateWhereUniqueInput
  }

  /**
   * Template deleteMany
   */
  export type TemplateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Templates to delete
     */
    where?: TemplateWhereInput
  }

  /**
   * Template.organization
   */
  export type Template$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * Template.user
   */
  export type Template$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Template without action
   */
  export type TemplateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Template
     */
    select?: TemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TemplateInclude<ExtArgs> | null
  }


  /**
   * Model LeadStatus
   */

  export type AggregateLeadStatus = {
    _count: LeadStatusCountAggregateOutputType | null
    _avg: LeadStatusAvgAggregateOutputType | null
    _sum: LeadStatusSumAggregateOutputType | null
    _min: LeadStatusMinAggregateOutputType | null
    _max: LeadStatusMaxAggregateOutputType | null
  }

  export type LeadStatusAvgAggregateOutputType = {
    createdAt: number | null
    updatedAt: number | null
    deletedAt: number | null
  }

  export type LeadStatusSumAggregateOutputType = {
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
  }

  export type LeadStatusMinAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    organizationId: string | null
  }

  export type LeadStatusMaxAggregateOutputType = {
    id: string | null
    status: string | null
    createdAt: bigint | null
    updatedAt: bigint | null
    deletedAt: bigint | null
    organizationId: string | null
  }

  export type LeadStatusCountAggregateOutputType = {
    id: number
    status: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    organizationId: number
    _all: number
  }


  export type LeadStatusAvgAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeadStatusSumAggregateInputType = {
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type LeadStatusMinAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    organizationId?: true
  }

  export type LeadStatusMaxAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    organizationId?: true
  }

  export type LeadStatusCountAggregateInputType = {
    id?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    organizationId?: true
    _all?: true
  }

  export type LeadStatusAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadStatus to aggregate.
     */
    where?: LeadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadStatuses to fetch.
     */
    orderBy?: LeadStatusOrderByWithRelationInput | LeadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LeadStatuses
    **/
    _count?: true | LeadStatusCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LeadStatusAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LeadStatusSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeadStatusMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeadStatusMaxAggregateInputType
  }

  export type GetLeadStatusAggregateType<T extends LeadStatusAggregateArgs> = {
        [P in keyof T & keyof AggregateLeadStatus]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeadStatus[P]>
      : GetScalarType<T[P], AggregateLeadStatus[P]>
  }




  export type LeadStatusGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeadStatusWhereInput
    orderBy?: LeadStatusOrderByWithAggregationInput | LeadStatusOrderByWithAggregationInput[]
    by: LeadStatusScalarFieldEnum[] | LeadStatusScalarFieldEnum
    having?: LeadStatusScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeadStatusCountAggregateInputType | true
    _avg?: LeadStatusAvgAggregateInputType
    _sum?: LeadStatusSumAggregateInputType
    _min?: LeadStatusMinAggregateInputType
    _max?: LeadStatusMaxAggregateInputType
  }

  export type LeadStatusGroupByOutputType = {
    id: string
    status: string
    createdAt: bigint
    updatedAt: bigint
    deletedAt: bigint
    organizationId: string
    _count: LeadStatusCountAggregateOutputType | null
    _avg: LeadStatusAvgAggregateOutputType | null
    _sum: LeadStatusSumAggregateOutputType | null
    _min: LeadStatusMinAggregateOutputType | null
    _max: LeadStatusMaxAggregateOutputType | null
  }

  type GetLeadStatusGroupByPayload<T extends LeadStatusGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeadStatusGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeadStatusGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeadStatusGroupByOutputType[P]>
            : GetScalarType<T[P], LeadStatusGroupByOutputType[P]>
        }
      >
    >


  export type LeadStatusSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organizationId?: boolean
    Lead?: boolean | LeadStatus$LeadArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    _count?: boolean | LeadStatusCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadStatus"]>

  export type LeadStatusSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organizationId?: boolean
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["leadStatus"]>

  export type LeadStatusSelectScalar = {
    id?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    organizationId?: boolean
  }

  export type LeadStatusInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Lead?: boolean | LeadStatus$LeadArgs<ExtArgs>
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
    _count?: boolean | LeadStatusCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeadStatusIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationDefaultArgs<ExtArgs>
  }

  export type $LeadStatusPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LeadStatus"
    objects: {
      Lead: Prisma.$LeadPayload<ExtArgs>[]
      organization: Prisma.$OrganizationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: string
      createdAt: bigint
      updatedAt: bigint
      deletedAt: bigint
      organizationId: string
    }, ExtArgs["result"]["leadStatus"]>
    composites: {}
  }

  type LeadStatusGetPayload<S extends boolean | null | undefined | LeadStatusDefaultArgs> = $Result.GetResult<Prisma.$LeadStatusPayload, S>

  type LeadStatusCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LeadStatusFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LeadStatusCountAggregateInputType | true
    }

  export interface LeadStatusDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LeadStatus'], meta: { name: 'LeadStatus' } }
    /**
     * Find zero or one LeadStatus that matches the filter.
     * @param {LeadStatusFindUniqueArgs} args - Arguments to find a LeadStatus
     * @example
     * // Get one LeadStatus
     * const leadStatus = await prisma.leadStatus.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeadStatusFindUniqueArgs>(args: SelectSubset<T, LeadStatusFindUniqueArgs<ExtArgs>>): Prisma__LeadStatusClient<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one LeadStatus that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LeadStatusFindUniqueOrThrowArgs} args - Arguments to find a LeadStatus
     * @example
     * // Get one LeadStatus
     * const leadStatus = await prisma.leadStatus.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeadStatusFindUniqueOrThrowArgs>(args: SelectSubset<T, LeadStatusFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeadStatusClient<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first LeadStatus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadStatusFindFirstArgs} args - Arguments to find a LeadStatus
     * @example
     * // Get one LeadStatus
     * const leadStatus = await prisma.leadStatus.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeadStatusFindFirstArgs>(args?: SelectSubset<T, LeadStatusFindFirstArgs<ExtArgs>>): Prisma__LeadStatusClient<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first LeadStatus that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadStatusFindFirstOrThrowArgs} args - Arguments to find a LeadStatus
     * @example
     * // Get one LeadStatus
     * const leadStatus = await prisma.leadStatus.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeadStatusFindFirstOrThrowArgs>(args?: SelectSubset<T, LeadStatusFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeadStatusClient<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more LeadStatuses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadStatusFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LeadStatuses
     * const leadStatuses = await prisma.leadStatus.findMany()
     * 
     * // Get first 10 LeadStatuses
     * const leadStatuses = await prisma.leadStatus.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leadStatusWithIdOnly = await prisma.leadStatus.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeadStatusFindManyArgs>(args?: SelectSubset<T, LeadStatusFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a LeadStatus.
     * @param {LeadStatusCreateArgs} args - Arguments to create a LeadStatus.
     * @example
     * // Create one LeadStatus
     * const LeadStatus = await prisma.leadStatus.create({
     *   data: {
     *     // ... data to create a LeadStatus
     *   }
     * })
     * 
     */
    create<T extends LeadStatusCreateArgs>(args: SelectSubset<T, LeadStatusCreateArgs<ExtArgs>>): Prisma__LeadStatusClient<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many LeadStatuses.
     * @param {LeadStatusCreateManyArgs} args - Arguments to create many LeadStatuses.
     * @example
     * // Create many LeadStatuses
     * const leadStatus = await prisma.leadStatus.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeadStatusCreateManyArgs>(args?: SelectSubset<T, LeadStatusCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many LeadStatuses and returns the data saved in the database.
     * @param {LeadStatusCreateManyAndReturnArgs} args - Arguments to create many LeadStatuses.
     * @example
     * // Create many LeadStatuses
     * const leadStatus = await prisma.leadStatus.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many LeadStatuses and only return the `id`
     * const leadStatusWithIdOnly = await prisma.leadStatus.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeadStatusCreateManyAndReturnArgs>(args?: SelectSubset<T, LeadStatusCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a LeadStatus.
     * @param {LeadStatusDeleteArgs} args - Arguments to delete one LeadStatus.
     * @example
     * // Delete one LeadStatus
     * const LeadStatus = await prisma.leadStatus.delete({
     *   where: {
     *     // ... filter to delete one LeadStatus
     *   }
     * })
     * 
     */
    delete<T extends LeadStatusDeleteArgs>(args: SelectSubset<T, LeadStatusDeleteArgs<ExtArgs>>): Prisma__LeadStatusClient<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one LeadStatus.
     * @param {LeadStatusUpdateArgs} args - Arguments to update one LeadStatus.
     * @example
     * // Update one LeadStatus
     * const leadStatus = await prisma.leadStatus.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeadStatusUpdateArgs>(args: SelectSubset<T, LeadStatusUpdateArgs<ExtArgs>>): Prisma__LeadStatusClient<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more LeadStatuses.
     * @param {LeadStatusDeleteManyArgs} args - Arguments to filter LeadStatuses to delete.
     * @example
     * // Delete a few LeadStatuses
     * const { count } = await prisma.leadStatus.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeadStatusDeleteManyArgs>(args?: SelectSubset<T, LeadStatusDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LeadStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadStatusUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LeadStatuses
     * const leadStatus = await prisma.leadStatus.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeadStatusUpdateManyArgs>(args: SelectSubset<T, LeadStatusUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LeadStatus.
     * @param {LeadStatusUpsertArgs} args - Arguments to update or create a LeadStatus.
     * @example
     * // Update or create a LeadStatus
     * const leadStatus = await prisma.leadStatus.upsert({
     *   create: {
     *     // ... data to create a LeadStatus
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LeadStatus we want to update
     *   }
     * })
     */
    upsert<T extends LeadStatusUpsertArgs>(args: SelectSubset<T, LeadStatusUpsertArgs<ExtArgs>>): Prisma__LeadStatusClient<$Result.GetResult<Prisma.$LeadStatusPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of LeadStatuses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadStatusCountArgs} args - Arguments to filter LeadStatuses to count.
     * @example
     * // Count the number of LeadStatuses
     * const count = await prisma.leadStatus.count({
     *   where: {
     *     // ... the filter for the LeadStatuses we want to count
     *   }
     * })
    **/
    count<T extends LeadStatusCountArgs>(
      args?: Subset<T, LeadStatusCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeadStatusCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LeadStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadStatusAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeadStatusAggregateArgs>(args: Subset<T, LeadStatusAggregateArgs>): Prisma.PrismaPromise<GetLeadStatusAggregateType<T>>

    /**
     * Group by LeadStatus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeadStatusGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeadStatusGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeadStatusGroupByArgs['orderBy'] }
        : { orderBy?: LeadStatusGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeadStatusGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeadStatusGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LeadStatus model
   */
  readonly fields: LeadStatusFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LeadStatus.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeadStatusClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Lead<T extends LeadStatus$LeadArgs<ExtArgs> = {}>(args?: Subset<T, LeadStatus$LeadArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeadPayload<ExtArgs>, T, "findMany"> | Null>
    organization<T extends OrganizationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationDefaultArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the LeadStatus model
   */ 
  interface LeadStatusFieldRefs {
    readonly id: FieldRef<"LeadStatus", 'String'>
    readonly status: FieldRef<"LeadStatus", 'String'>
    readonly createdAt: FieldRef<"LeadStatus", 'BigInt'>
    readonly updatedAt: FieldRef<"LeadStatus", 'BigInt'>
    readonly deletedAt: FieldRef<"LeadStatus", 'BigInt'>
    readonly organizationId: FieldRef<"LeadStatus", 'String'>
  }
    

  // Custom InputTypes
  /**
   * LeadStatus findUnique
   */
  export type LeadStatusFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadStatus to fetch.
     */
    where: LeadStatusWhereUniqueInput
  }

  /**
   * LeadStatus findUniqueOrThrow
   */
  export type LeadStatusFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadStatus to fetch.
     */
    where: LeadStatusWhereUniqueInput
  }

  /**
   * LeadStatus findFirst
   */
  export type LeadStatusFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadStatus to fetch.
     */
    where?: LeadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadStatuses to fetch.
     */
    orderBy?: LeadStatusOrderByWithRelationInput | LeadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadStatuses.
     */
    cursor?: LeadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadStatuses.
     */
    distinct?: LeadStatusScalarFieldEnum | LeadStatusScalarFieldEnum[]
  }

  /**
   * LeadStatus findFirstOrThrow
   */
  export type LeadStatusFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadStatus to fetch.
     */
    where?: LeadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadStatuses to fetch.
     */
    orderBy?: LeadStatusOrderByWithRelationInput | LeadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LeadStatuses.
     */
    cursor?: LeadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadStatuses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LeadStatuses.
     */
    distinct?: LeadStatusScalarFieldEnum | LeadStatusScalarFieldEnum[]
  }

  /**
   * LeadStatus findMany
   */
  export type LeadStatusFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    /**
     * Filter, which LeadStatuses to fetch.
     */
    where?: LeadStatusWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LeadStatuses to fetch.
     */
    orderBy?: LeadStatusOrderByWithRelationInput | LeadStatusOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LeadStatuses.
     */
    cursor?: LeadStatusWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LeadStatuses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LeadStatuses.
     */
    skip?: number
    distinct?: LeadStatusScalarFieldEnum | LeadStatusScalarFieldEnum[]
  }

  /**
   * LeadStatus create
   */
  export type LeadStatusCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    /**
     * The data needed to create a LeadStatus.
     */
    data: XOR<LeadStatusCreateInput, LeadStatusUncheckedCreateInput>
  }

  /**
   * LeadStatus createMany
   */
  export type LeadStatusCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LeadStatuses.
     */
    data: LeadStatusCreateManyInput | LeadStatusCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * LeadStatus createManyAndReturn
   */
  export type LeadStatusCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many LeadStatuses.
     */
    data: LeadStatusCreateManyInput | LeadStatusCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * LeadStatus update
   */
  export type LeadStatusUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    /**
     * The data needed to update a LeadStatus.
     */
    data: XOR<LeadStatusUpdateInput, LeadStatusUncheckedUpdateInput>
    /**
     * Choose, which LeadStatus to update.
     */
    where: LeadStatusWhereUniqueInput
  }

  /**
   * LeadStatus updateMany
   */
  export type LeadStatusUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LeadStatuses.
     */
    data: XOR<LeadStatusUpdateManyMutationInput, LeadStatusUncheckedUpdateManyInput>
    /**
     * Filter which LeadStatuses to update
     */
    where?: LeadStatusWhereInput
  }

  /**
   * LeadStatus upsert
   */
  export type LeadStatusUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    /**
     * The filter to search for the LeadStatus to update in case it exists.
     */
    where: LeadStatusWhereUniqueInput
    /**
     * In case the LeadStatus found by the `where` argument doesn't exist, create a new LeadStatus with this data.
     */
    create: XOR<LeadStatusCreateInput, LeadStatusUncheckedCreateInput>
    /**
     * In case the LeadStatus was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeadStatusUpdateInput, LeadStatusUncheckedUpdateInput>
  }

  /**
   * LeadStatus delete
   */
  export type LeadStatusDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
    /**
     * Filter which LeadStatus to delete.
     */
    where: LeadStatusWhereUniqueInput
  }

  /**
   * LeadStatus deleteMany
   */
  export type LeadStatusDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LeadStatuses to delete
     */
    where?: LeadStatusWhereInput
  }

  /**
   * LeadStatus.Lead
   */
  export type LeadStatus$LeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lead
     */
    select?: LeadSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadInclude<ExtArgs> | null
    where?: LeadWhereInput
    orderBy?: LeadOrderByWithRelationInput | LeadOrderByWithRelationInput[]
    cursor?: LeadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeadScalarFieldEnum | LeadScalarFieldEnum[]
  }

  /**
   * LeadStatus without action
   */
  export type LeadStatusDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeadStatus
     */
    select?: LeadStatusSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeadStatusInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    authenticationMethod: 'authenticationMethod',
    name: 'name',
    avatarUrl: 'avatarUrl',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrgMemberInviteScalarFieldEnum: {
    id: 'id',
    token: 'token',
    email: 'email',
    role: 'role',
    organizationId: 'organizationId',
    inviterId: 'inviterId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type OrgMemberInviteScalarFieldEnum = (typeof OrgMemberInviteScalarFieldEnum)[keyof typeof OrgMemberInviteScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logo: 'logo',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    details: 'details',
    deletedAt: 'deletedAt'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const OrgMemberScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    userId: 'userId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    signature: 'signature'
  };

  export type OrgMemberScalarFieldEnum = (typeof OrgMemberScalarFieldEnum)[keyof typeof OrgMemberScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    type: 'type',
    data: 'data',
    cliAccessToken: 'cliAccessToken',
    isSynced: 'isSynced',
    organizationId: 'organizationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    integrationId: 'integrationId'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const LeadNotesScalarFieldEnum: {
    id: 'id',
    leadId: 'leadId',
    data: 'data',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    userId: 'userId'
  };

  export type LeadNotesScalarFieldEnum = (typeof LeadNotesScalarFieldEnum)[keyof typeof LeadNotesScalarFieldEnum]


  export const LeadScalarFieldEnum: {
    id: 'id',
    shopifyDomain: 'shopifyDomain',
    shopifyStoreId: 'shopifyStoreId',
    statusId: 'statusId',
    leadSource: 'leadSource',
    shopDetails: 'shopDetails',
    industry: 'industry',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    integrationId: 'integrationId',
    organizationId: 'organizationId'
  };

  export type LeadScalarFieldEnum = (typeof LeadScalarFieldEnum)[keyof typeof LeadScalarFieldEnum]


  export const LeadProjectScalarFieldEnum: {
    id: 'id',
    leadId: 'leadId',
    projectId: 'projectId',
    integrationId: 'integrationId',
    orgId: 'orgId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    status: 'status'
  };

  export type LeadProjectScalarFieldEnum = (typeof LeadProjectScalarFieldEnum)[keyof typeof LeadProjectScalarFieldEnum]


  export const ContactScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    suffix: 'suffix',
    phone: 'phone',
    name: 'name',
    email: 'email',
    secondaryEmail: 'secondaryEmail',
    primaryPhNo: 'primaryPhNo',
    secondaryPhNo: 'secondaryPhNo',
    industry: 'industry',
    type: 'type',
    leadId: 'leadId',
    lastContacted: 'lastContacted',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    organizationId: 'organizationId',
    isPrimay: 'isPrimay',
    isUnsubscribed: 'isUnsubscribed'
  };

  export type ContactScalarFieldEnum = (typeof ContactScalarFieldEnum)[keyof typeof ContactScalarFieldEnum]


  export const AttachmentScalarFieldEnum: {
    id: 'id',
    attachmentUrl: 'attachmentUrl',
    attachmentType: 'attachmentType',
    eTag: 'eTag',
    attachmentName: 'attachmentName',
    leadId: 'leadId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type AttachmentScalarFieldEnum = (typeof AttachmentScalarFieldEnum)[keyof typeof AttachmentScalarFieldEnum]


  export const LeadActivityScalarFieldEnum: {
    id: 'id',
    leadId: 'leadId',
    data: 'data',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt',
    deletedAt: 'deletedAt',
    userId: 'userId',
    noteId: 'noteId',
    type: 'type',
    orgId: 'orgId'
  };

  export type LeadActivityScalarFieldEnum = (typeof LeadActivityScalarFieldEnum)[keyof typeof LeadActivityScalarFieldEnum]


  export const EmailScalarFieldEnum: {
    id: 'id',
    from: 'from',
    to: 'to',
    replyTo: 'replyTo',
    cc: 'cc',
    bcc: 'bcc',
    status: 'status',
    subject: 'subject',
    body: 'body',
    html: 'html',
    trackingId: 'trackingId',
    messageId: 'messageId',
    threadId: 'threadId',
    historyId: 'historyId',
    labelIds: 'labelIds',
    isOpened: 'isOpened',
    openedAt: 'openedAt',
    isClicked: 'isClicked',
    clickedAt: 'clickedAt',
    sentAt: 'sentAt',
    deletedAt: 'deletedAt',
    integrationId: 'integrationId',
    organizationId: 'organizationId',
    leadId: 'leadId',
    contactId: 'contactId',
    source: 'source'
  };

  export type EmailScalarFieldEnum = (typeof EmailScalarFieldEnum)[keyof typeof EmailScalarFieldEnum]


  export const EmailQueueScalarFieldEnum: {
    id: 'id',
    emailId: 'emailId',
    scheduledAt: 'scheduledAt',
    status: 'status',
    retryCount: 'retryCount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type EmailQueueScalarFieldEnum = (typeof EmailQueueScalarFieldEnum)[keyof typeof EmailQueueScalarFieldEnum]


  export const IntegrationScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    data: 'data',
    description: 'description',
    type: 'type',
    category: 'category',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    orgMemberId: 'orgMemberId',
    isSingular: 'isSingular',
    sharedType: 'sharedType'
  };

  export type IntegrationScalarFieldEnum = (typeof IntegrationScalarFieldEnum)[keyof typeof IntegrationScalarFieldEnum]


  export const MailServiceFromEmailScalarFieldEnum: {
    id: 'id',
    fromName: 'fromName',
    fromEmail: 'fromEmail',
    replyTo: 'replyTo',
    type: 'type',
    integrationId: 'integrationId',
    organizationId: 'organizationId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MailServiceFromEmailScalarFieldEnum = (typeof MailServiceFromEmailScalarFieldEnum)[keyof typeof MailServiceFromEmailScalarFieldEnum]


  export const UnsubscribeLinkScalarFieldEnum: {
    id: 'id',
    name: 'name',
    message: 'message',
    anchorText: 'anchorText',
    isActive: 'isActive',
    organizationId: 'organizationId'
  };

  export type UnsubscribeLinkScalarFieldEnum = (typeof UnsubscribeLinkScalarFieldEnum)[keyof typeof UnsubscribeLinkScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    name: 'name',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    integrationId: 'integrationId',
    organizationId: 'organizationId'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    jobId: 'jobId',
    name: 'name',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const WebhookScalarFieldEnum: {
    id: 'id',
    url: 'url',
    type: 'type',
    createdAt: 'createdAt',
    organizationId: 'organizationId',
    data: 'data'
  };

  export type WebhookScalarFieldEnum = (typeof WebhookScalarFieldEnum)[keyof typeof WebhookScalarFieldEnum]


  export const TemplateScalarFieldEnum: {
    id: 'id',
    html: 'html',
    name: 'name',
    createdAt: 'createdAt',
    isEnabled: 'isEnabled',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    userId: 'userId',
    orgId: 'orgId'
  };

  export type TemplateScalarFieldEnum = (typeof TemplateScalarFieldEnum)[keyof typeof TemplateScalarFieldEnum]


  export const LeadStatusScalarFieldEnum: {
    id: 'id',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt',
    organizationId: 'organizationId'
  };

  export type LeadStatusScalarFieldEnum = (typeof LeadStatusScalarFieldEnum)[keyof typeof LeadStatusScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'AuthenticationMethod'
   */
  export type EnumAuthenticationMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthenticationMethod'>
    


  /**
   * Reference to a field of type 'AuthenticationMethod[]'
   */
  export type ListEnumAuthenticationMethodFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'AuthenticationMethod[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


  /**
   * Reference to a field of type 'OrgMemberRole'
   */
  export type EnumOrgMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrgMemberRole'>
    


  /**
   * Reference to a field of type 'OrgMemberRole[]'
   */
  export type ListEnumOrgMemberRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'OrgMemberRole[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'LeadActivityType'
   */
  export type EnumLeadActivityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeadActivityType'>
    


  /**
   * Reference to a field of type 'LeadActivityType[]'
   */
  export type ListEnumLeadActivityTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LeadActivityType[]'>
    


  /**
   * Reference to a field of type 'EmailStatus'
   */
  export type EnumEmailStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailStatus'>
    


  /**
   * Reference to a field of type 'EmailStatus[]'
   */
  export type ListEnumEmailStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EmailStatus[]'>
    


  /**
   * Reference to a field of type 'IntegrationType'
   */
  export type EnumIntegrationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IntegrationType'>
    


  /**
   * Reference to a field of type 'IntegrationType[]'
   */
  export type ListEnumIntegrationTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IntegrationType[]'>
    


  /**
   * Reference to a field of type 'QueueStatus'
   */
  export type EnumQueueStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueueStatus'>
    


  /**
   * Reference to a field of type 'QueueStatus[]'
   */
  export type ListEnumQueueStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueueStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'IntegrationCategory'
   */
  export type EnumIntegrationCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IntegrationCategory'>
    


  /**
   * Reference to a field of type 'IntegrationCategory[]'
   */
  export type ListEnumIntegrationCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IntegrationCategory[]'>
    


  /**
   * Reference to a field of type 'IntegrationSharingType'
   */
  export type EnumIntegrationSharingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IntegrationSharingType'>
    


  /**
   * Reference to a field of type 'IntegrationSharingType[]'
   */
  export type ListEnumIntegrationSharingTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'IntegrationSharingType[]'>
    


  /**
   * Reference to a field of type 'JobStatus'
   */
  export type EnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus'>
    


  /**
   * Reference to a field of type 'JobStatus[]'
   */
  export type ListEnumJobStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'JobStatus[]'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'WebhookType'
   */
  export type EnumWebhookTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WebhookType'>
    


  /**
   * Reference to a field of type 'WebhookType[]'
   */
  export type ListEnumWebhookTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'WebhookType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    authenticationMethod?: EnumAuthenticationMethodFilter<"User"> | $Enums.AuthenticationMethod
    name?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: BigIntFilter<"User"> | bigint | number
    updatedAt?: BigIntFilter<"User"> | bigint | number
    deletedAt?: BigIntFilter<"User"> | bigint | number
    LeadActivity?: LeadActivityListRelationFilter
    orgMembers?: OrgMemberListRelationFilter
    orgMemberInvites?: OrgMemberInviteListRelationFilter
    templates?: TemplateListRelationFilter
    LeadNotes?: LeadNotesListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    authenticationMethod?: SortOrder
    name?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    LeadActivity?: LeadActivityOrderByRelationAggregateInput
    orgMembers?: OrgMemberOrderByRelationAggregateInput
    orgMemberInvites?: OrgMemberInviteOrderByRelationAggregateInput
    templates?: TemplateOrderByRelationAggregateInput
    LeadNotes?: LeadNotesOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    authenticationMethod?: EnumAuthenticationMethodFilter<"User"> | $Enums.AuthenticationMethod
    name?: StringNullableFilter<"User"> | string | null
    avatarUrl?: StringNullableFilter<"User"> | string | null
    createdAt?: BigIntFilter<"User"> | bigint | number
    updatedAt?: BigIntFilter<"User"> | bigint | number
    deletedAt?: BigIntFilter<"User"> | bigint | number
    LeadActivity?: LeadActivityListRelationFilter
    orgMembers?: OrgMemberListRelationFilter
    orgMemberInvites?: OrgMemberInviteListRelationFilter
    templates?: TemplateListRelationFilter
    LeadNotes?: LeadNotesListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    authenticationMethod?: SortOrder
    name?: SortOrderInput | SortOrder
    avatarUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    authenticationMethod?: EnumAuthenticationMethodWithAggregatesFilter<"User"> | $Enums.AuthenticationMethod
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    avatarUrl?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: BigIntWithAggregatesFilter<"User"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"User"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"User"> | bigint | number
  }

  export type OrgMemberInviteWhereInput = {
    AND?: OrgMemberInviteWhereInput | OrgMemberInviteWhereInput[]
    OR?: OrgMemberInviteWhereInput[]
    NOT?: OrgMemberInviteWhereInput | OrgMemberInviteWhereInput[]
    id?: StringFilter<"OrgMemberInvite"> | string
    token?: StringFilter<"OrgMemberInvite"> | string
    email?: StringFilter<"OrgMemberInvite"> | string
    role?: EnumOrgMemberRoleFilter<"OrgMemberInvite"> | $Enums.OrgMemberRole
    organizationId?: StringFilter<"OrgMemberInvite"> | string
    inviterId?: StringFilter<"OrgMemberInvite"> | string
    createdAt?: BigIntFilter<"OrgMemberInvite"> | bigint | number
    updatedAt?: BigIntFilter<"OrgMemberInvite"> | bigint | number
    deletedAt?: BigIntFilter<"OrgMemberInvite"> | bigint | number
    inviter?: XOR<UserRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type OrgMemberInviteOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    role?: SortOrder
    organizationId?: SortOrder
    inviterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    inviter?: UserOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type OrgMemberInviteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    organizationId_email?: OrgMemberInviteOrganizationIdEmailCompoundUniqueInput
    AND?: OrgMemberInviteWhereInput | OrgMemberInviteWhereInput[]
    OR?: OrgMemberInviteWhereInput[]
    NOT?: OrgMemberInviteWhereInput | OrgMemberInviteWhereInput[]
    email?: StringFilter<"OrgMemberInvite"> | string
    role?: EnumOrgMemberRoleFilter<"OrgMemberInvite"> | $Enums.OrgMemberRole
    organizationId?: StringFilter<"OrgMemberInvite"> | string
    inviterId?: StringFilter<"OrgMemberInvite"> | string
    createdAt?: BigIntFilter<"OrgMemberInvite"> | bigint | number
    updatedAt?: BigIntFilter<"OrgMemberInvite"> | bigint | number
    deletedAt?: BigIntFilter<"OrgMemberInvite"> | bigint | number
    inviter?: XOR<UserRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }, "id" | "token" | "organizationId_email">

  export type OrgMemberInviteOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    role?: SortOrder
    organizationId?: SortOrder
    inviterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: OrgMemberInviteCountOrderByAggregateInput
    _avg?: OrgMemberInviteAvgOrderByAggregateInput
    _max?: OrgMemberInviteMaxOrderByAggregateInput
    _min?: OrgMemberInviteMinOrderByAggregateInput
    _sum?: OrgMemberInviteSumOrderByAggregateInput
  }

  export type OrgMemberInviteScalarWhereWithAggregatesInput = {
    AND?: OrgMemberInviteScalarWhereWithAggregatesInput | OrgMemberInviteScalarWhereWithAggregatesInput[]
    OR?: OrgMemberInviteScalarWhereWithAggregatesInput[]
    NOT?: OrgMemberInviteScalarWhereWithAggregatesInput | OrgMemberInviteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrgMemberInvite"> | string
    token?: StringWithAggregatesFilter<"OrgMemberInvite"> | string
    email?: StringWithAggregatesFilter<"OrgMemberInvite"> | string
    role?: EnumOrgMemberRoleWithAggregatesFilter<"OrgMemberInvite"> | $Enums.OrgMemberRole
    organizationId?: StringWithAggregatesFilter<"OrgMemberInvite"> | string
    inviterId?: StringWithAggregatesFilter<"OrgMemberInvite"> | string
    createdAt?: BigIntWithAggregatesFilter<"OrgMemberInvite"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"OrgMemberInvite"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"OrgMemberInvite"> | bigint | number
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    logo?: StringNullableFilter<"Organization"> | string | null
    description?: StringNullableFilter<"Organization"> | string | null
    createdAt?: BigIntFilter<"Organization"> | bigint | number
    updatedAt?: BigIntFilter<"Organization"> | bigint | number
    details?: JsonNullableFilter<"Organization">
    deletedAt?: BigIntFilter<"Organization"> | bigint | number
    Project?: ProjectListRelationFilter
    members?: OrgMemberListRelationFilter
    invites?: OrgMemberInviteListRelationFilter
    integrations?: IntegrationListRelationFilter
    Lead?: LeadListRelationFilter
    contact?: ContactListRelationFilter
    Template?: TemplateListRelationFilter
    LeadStatus?: LeadStatusListRelationFilter
    webhooks?: WebhookListRelationFilter
    Email?: EmailListRelationFilter
    MailServiceFromEmail?: MailServiceFromEmailListRelationFilter
    LeadProject?: LeadProjectListRelationFilter
    LeadActivity?: LeadActivityListRelationFilter
    UnsubscribeLink?: UnsubscribeLinkListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    details?: SortOrderInput | SortOrder
    deletedAt?: SortOrder
    Project?: ProjectOrderByRelationAggregateInput
    members?: OrgMemberOrderByRelationAggregateInput
    invites?: OrgMemberInviteOrderByRelationAggregateInput
    integrations?: IntegrationOrderByRelationAggregateInput
    Lead?: LeadOrderByRelationAggregateInput
    contact?: ContactOrderByRelationAggregateInput
    Template?: TemplateOrderByRelationAggregateInput
    LeadStatus?: LeadStatusOrderByRelationAggregateInput
    webhooks?: WebhookOrderByRelationAggregateInput
    Email?: EmailOrderByRelationAggregateInput
    MailServiceFromEmail?: MailServiceFromEmailOrderByRelationAggregateInput
    LeadProject?: LeadProjectOrderByRelationAggregateInput
    LeadActivity?: LeadActivityOrderByRelationAggregateInput
    UnsubscribeLink?: UnsubscribeLinkOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    name?: StringFilter<"Organization"> | string
    logo?: StringNullableFilter<"Organization"> | string | null
    description?: StringNullableFilter<"Organization"> | string | null
    createdAt?: BigIntFilter<"Organization"> | bigint | number
    updatedAt?: BigIntFilter<"Organization"> | bigint | number
    details?: JsonNullableFilter<"Organization">
    deletedAt?: BigIntFilter<"Organization"> | bigint | number
    Project?: ProjectListRelationFilter
    members?: OrgMemberListRelationFilter
    invites?: OrgMemberInviteListRelationFilter
    integrations?: IntegrationListRelationFilter
    Lead?: LeadListRelationFilter
    contact?: ContactListRelationFilter
    Template?: TemplateListRelationFilter
    LeadStatus?: LeadStatusListRelationFilter
    webhooks?: WebhookListRelationFilter
    Email?: EmailListRelationFilter
    MailServiceFromEmail?: MailServiceFromEmailListRelationFilter
    LeadProject?: LeadProjectListRelationFilter
    LeadActivity?: LeadActivityListRelationFilter
    UnsubscribeLink?: UnsubscribeLinkListRelationFilter
  }, "id">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    details?: SortOrderInput | SortOrder
    deletedAt?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _avg?: OrganizationAvgOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
    _sum?: OrganizationSumOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    logo?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    description?: StringNullableWithAggregatesFilter<"Organization"> | string | null
    createdAt?: BigIntWithAggregatesFilter<"Organization"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"Organization"> | bigint | number
    details?: JsonNullableWithAggregatesFilter<"Organization">
    deletedAt?: BigIntWithAggregatesFilter<"Organization"> | bigint | number
  }

  export type OrgMemberWhereInput = {
    AND?: OrgMemberWhereInput | OrgMemberWhereInput[]
    OR?: OrgMemberWhereInput[]
    NOT?: OrgMemberWhereInput | OrgMemberWhereInput[]
    id?: StringFilter<"OrgMember"> | string
    organizationId?: StringFilter<"OrgMember"> | string
    userId?: StringFilter<"OrgMember"> | string
    role?: EnumOrgMemberRoleFilter<"OrgMember"> | $Enums.OrgMemberRole
    createdAt?: BigIntFilter<"OrgMember"> | bigint | number
    updatedAt?: BigIntFilter<"OrgMember"> | bigint | number
    deletedAt?: BigIntFilter<"OrgMember"> | bigint | number
    signature?: StringFilter<"OrgMember"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    Integration?: IntegrationListRelationFilter
  }

  export type OrgMemberOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    signature?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    Integration?: IntegrationOrderByRelationAggregateInput
  }

  export type OrgMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    organizationId_userId?: OrgMemberOrganizationIdUserIdCompoundUniqueInput
    AND?: OrgMemberWhereInput | OrgMemberWhereInput[]
    OR?: OrgMemberWhereInput[]
    NOT?: OrgMemberWhereInput | OrgMemberWhereInput[]
    organizationId?: StringFilter<"OrgMember"> | string
    userId?: StringFilter<"OrgMember"> | string
    role?: EnumOrgMemberRoleFilter<"OrgMember"> | $Enums.OrgMemberRole
    createdAt?: BigIntFilter<"OrgMember"> | bigint | number
    updatedAt?: BigIntFilter<"OrgMember"> | bigint | number
    deletedAt?: BigIntFilter<"OrgMember"> | bigint | number
    signature?: StringFilter<"OrgMember"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    Integration?: IntegrationListRelationFilter
  }, "id" | "organizationId_userId">

  export type OrgMemberOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    signature?: SortOrder
    _count?: OrgMemberCountOrderByAggregateInput
    _avg?: OrgMemberAvgOrderByAggregateInput
    _max?: OrgMemberMaxOrderByAggregateInput
    _min?: OrgMemberMinOrderByAggregateInput
    _sum?: OrgMemberSumOrderByAggregateInput
  }

  export type OrgMemberScalarWhereWithAggregatesInput = {
    AND?: OrgMemberScalarWhereWithAggregatesInput | OrgMemberScalarWhereWithAggregatesInput[]
    OR?: OrgMemberScalarWhereWithAggregatesInput[]
    NOT?: OrgMemberScalarWhereWithAggregatesInput | OrgMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"OrgMember"> | string
    organizationId?: StringWithAggregatesFilter<"OrgMember"> | string
    userId?: StringWithAggregatesFilter<"OrgMember"> | string
    role?: EnumOrgMemberRoleWithAggregatesFilter<"OrgMember"> | $Enums.OrgMemberRole
    createdAt?: BigIntWithAggregatesFilter<"OrgMember"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"OrgMember"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"OrgMember"> | bigint | number
    signature?: StringWithAggregatesFilter<"OrgMember"> | string
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    type?: StringFilter<"Project"> | string
    data?: JsonFilter<"Project">
    cliAccessToken?: StringNullableFilter<"Project"> | string | null
    isSynced?: BoolFilter<"Project"> | boolean
    organizationId?: StringFilter<"Project"> | string
    createdAt?: BigIntFilter<"Project"> | bigint | number
    updatedAt?: BigIntFilter<"Project"> | bigint | number
    deletedAt?: BigIntNullableFilter<"Project"> | bigint | number | null
    integrationId?: StringFilter<"Project"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    leadProject?: LeadProjectListRelationFilter
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    data?: SortOrder
    cliAccessToken?: SortOrderInput | SortOrder
    isSynced?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    integrationId?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    leadProject?: LeadProjectOrderByRelationAggregateInput
    integration?: IntegrationOrderByWithRelationInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    type?: StringFilter<"Project"> | string
    data?: JsonFilter<"Project">
    cliAccessToken?: StringNullableFilter<"Project"> | string | null
    isSynced?: BoolFilter<"Project"> | boolean
    organizationId?: StringFilter<"Project"> | string
    createdAt?: BigIntFilter<"Project"> | bigint | number
    updatedAt?: BigIntFilter<"Project"> | bigint | number
    deletedAt?: BigIntNullableFilter<"Project"> | bigint | number | null
    integrationId?: StringFilter<"Project"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    leadProject?: LeadProjectListRelationFilter
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    data?: SortOrder
    cliAccessToken?: SortOrderInput | SortOrder
    isSynced?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    integrationId?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    type?: StringWithAggregatesFilter<"Project"> | string
    data?: JsonWithAggregatesFilter<"Project">
    cliAccessToken?: StringNullableWithAggregatesFilter<"Project"> | string | null
    isSynced?: BoolWithAggregatesFilter<"Project"> | boolean
    organizationId?: StringWithAggregatesFilter<"Project"> | string
    createdAt?: BigIntWithAggregatesFilter<"Project"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"Project"> | bigint | number
    deletedAt?: BigIntNullableWithAggregatesFilter<"Project"> | bigint | number | null
    integrationId?: StringWithAggregatesFilter<"Project"> | string
  }

  export type LeadNotesWhereInput = {
    AND?: LeadNotesWhereInput | LeadNotesWhereInput[]
    OR?: LeadNotesWhereInput[]
    NOT?: LeadNotesWhereInput | LeadNotesWhereInput[]
    id?: StringFilter<"LeadNotes"> | string
    leadId?: StringFilter<"LeadNotes"> | string
    data?: StringFilter<"LeadNotes"> | string
    createdAt?: BigIntFilter<"LeadNotes"> | bigint | number
    updatedAt?: BigIntFilter<"LeadNotes"> | bigint | number
    deletedAt?: BigIntFilter<"LeadNotes"> | bigint | number
    userId?: StringFilter<"LeadNotes"> | string
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    LeadActivity?: LeadActivityListRelationFilter
  }

  export type LeadNotesOrderByWithRelationInput = {
    id?: SortOrder
    leadId?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    lead?: LeadOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    LeadActivity?: LeadActivityOrderByRelationAggregateInput
  }

  export type LeadNotesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeadNotesWhereInput | LeadNotesWhereInput[]
    OR?: LeadNotesWhereInput[]
    NOT?: LeadNotesWhereInput | LeadNotesWhereInput[]
    leadId?: StringFilter<"LeadNotes"> | string
    data?: StringFilter<"LeadNotes"> | string
    createdAt?: BigIntFilter<"LeadNotes"> | bigint | number
    updatedAt?: BigIntFilter<"LeadNotes"> | bigint | number
    deletedAt?: BigIntFilter<"LeadNotes"> | bigint | number
    userId?: StringFilter<"LeadNotes"> | string
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    LeadActivity?: LeadActivityListRelationFilter
  }, "id">

  export type LeadNotesOrderByWithAggregationInput = {
    id?: SortOrder
    leadId?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    _count?: LeadNotesCountOrderByAggregateInput
    _avg?: LeadNotesAvgOrderByAggregateInput
    _max?: LeadNotesMaxOrderByAggregateInput
    _min?: LeadNotesMinOrderByAggregateInput
    _sum?: LeadNotesSumOrderByAggregateInput
  }

  export type LeadNotesScalarWhereWithAggregatesInput = {
    AND?: LeadNotesScalarWhereWithAggregatesInput | LeadNotesScalarWhereWithAggregatesInput[]
    OR?: LeadNotesScalarWhereWithAggregatesInput[]
    NOT?: LeadNotesScalarWhereWithAggregatesInput | LeadNotesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeadNotes"> | string
    leadId?: StringWithAggregatesFilter<"LeadNotes"> | string
    data?: StringWithAggregatesFilter<"LeadNotes"> | string
    createdAt?: BigIntWithAggregatesFilter<"LeadNotes"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"LeadNotes"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"LeadNotes"> | bigint | number
    userId?: StringWithAggregatesFilter<"LeadNotes"> | string
  }

  export type LeadWhereInput = {
    AND?: LeadWhereInput | LeadWhereInput[]
    OR?: LeadWhereInput[]
    NOT?: LeadWhereInput | LeadWhereInput[]
    id?: StringFilter<"Lead"> | string
    shopifyDomain?: StringFilter<"Lead"> | string
    shopifyStoreId?: StringFilter<"Lead"> | string
    statusId?: StringNullableFilter<"Lead"> | string | null
    leadSource?: StringNullableFilter<"Lead"> | string | null
    shopDetails?: JsonNullableFilter<"Lead">
    industry?: StringNullableFilter<"Lead"> | string | null
    createdAt?: BigIntFilter<"Lead"> | bigint | number
    updatedAt?: BigIntFilter<"Lead"> | bigint | number
    deletedAt?: BigIntFilter<"Lead"> | bigint | number
    integrationId?: StringNullableFilter<"Lead"> | string | null
    organizationId?: StringFilter<"Lead"> | string
    status?: XOR<LeadStatusNullableRelationFilter, LeadStatusWhereInput> | null
    Project?: LeadProjectListRelationFilter
    leadActivities?: LeadActivityListRelationFilter
    leadNotes?: LeadNotesListRelationFilter
    contacts?: ContactListRelationFilter
    attachments?: AttachmentListRelationFilter
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    integration?: XOR<IntegrationNullableRelationFilter, IntegrationWhereInput> | null
    Email?: EmailListRelationFilter
  }

  export type LeadOrderByWithRelationInput = {
    id?: SortOrder
    shopifyDomain?: SortOrder
    shopifyStoreId?: SortOrder
    statusId?: SortOrderInput | SortOrder
    leadSource?: SortOrderInput | SortOrder
    shopDetails?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    status?: LeadStatusOrderByWithRelationInput
    Project?: LeadProjectOrderByRelationAggregateInput
    leadActivities?: LeadActivityOrderByRelationAggregateInput
    leadNotes?: LeadNotesOrderByRelationAggregateInput
    contacts?: ContactOrderByRelationAggregateInput
    attachments?: AttachmentOrderByRelationAggregateInput
    organization?: OrganizationOrderByWithRelationInput
    integration?: IntegrationOrderByWithRelationInput
    Email?: EmailOrderByRelationAggregateInput
  }

  export type LeadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    shopifyDomain?: string
    shopifyStoreId?: string
    AND?: LeadWhereInput | LeadWhereInput[]
    OR?: LeadWhereInput[]
    NOT?: LeadWhereInput | LeadWhereInput[]
    statusId?: StringNullableFilter<"Lead"> | string | null
    leadSource?: StringNullableFilter<"Lead"> | string | null
    shopDetails?: JsonNullableFilter<"Lead">
    industry?: StringNullableFilter<"Lead"> | string | null
    createdAt?: BigIntFilter<"Lead"> | bigint | number
    updatedAt?: BigIntFilter<"Lead"> | bigint | number
    deletedAt?: BigIntFilter<"Lead"> | bigint | number
    integrationId?: StringNullableFilter<"Lead"> | string | null
    organizationId?: StringFilter<"Lead"> | string
    status?: XOR<LeadStatusNullableRelationFilter, LeadStatusWhereInput> | null
    Project?: LeadProjectListRelationFilter
    leadActivities?: LeadActivityListRelationFilter
    leadNotes?: LeadNotesListRelationFilter
    contacts?: ContactListRelationFilter
    attachments?: AttachmentListRelationFilter
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    integration?: XOR<IntegrationNullableRelationFilter, IntegrationWhereInput> | null
    Email?: EmailListRelationFilter
  }, "id" | "shopifyDomain" | "shopifyStoreId">

  export type LeadOrderByWithAggregationInput = {
    id?: SortOrder
    shopifyDomain?: SortOrder
    shopifyStoreId?: SortOrder
    statusId?: SortOrderInput | SortOrder
    leadSource?: SortOrderInput | SortOrder
    shopDetails?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrderInput | SortOrder
    organizationId?: SortOrder
    _count?: LeadCountOrderByAggregateInput
    _avg?: LeadAvgOrderByAggregateInput
    _max?: LeadMaxOrderByAggregateInput
    _min?: LeadMinOrderByAggregateInput
    _sum?: LeadSumOrderByAggregateInput
  }

  export type LeadScalarWhereWithAggregatesInput = {
    AND?: LeadScalarWhereWithAggregatesInput | LeadScalarWhereWithAggregatesInput[]
    OR?: LeadScalarWhereWithAggregatesInput[]
    NOT?: LeadScalarWhereWithAggregatesInput | LeadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Lead"> | string
    shopifyDomain?: StringWithAggregatesFilter<"Lead"> | string
    shopifyStoreId?: StringWithAggregatesFilter<"Lead"> | string
    statusId?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    leadSource?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    shopDetails?: JsonNullableWithAggregatesFilter<"Lead">
    industry?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    createdAt?: BigIntWithAggregatesFilter<"Lead"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"Lead"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"Lead"> | bigint | number
    integrationId?: StringNullableWithAggregatesFilter<"Lead"> | string | null
    organizationId?: StringWithAggregatesFilter<"Lead"> | string
  }

  export type LeadProjectWhereInput = {
    AND?: LeadProjectWhereInput | LeadProjectWhereInput[]
    OR?: LeadProjectWhereInput[]
    NOT?: LeadProjectWhereInput | LeadProjectWhereInput[]
    id?: StringFilter<"LeadProject"> | string
    leadId?: StringFilter<"LeadProject"> | string
    projectId?: StringFilter<"LeadProject"> | string
    integrationId?: StringFilter<"LeadProject"> | string
    orgId?: StringFilter<"LeadProject"> | string
    createdAt?: BigIntFilter<"LeadProject"> | bigint | number
    updatedAt?: BigIntFilter<"LeadProject"> | bigint | number
    deletedAt?: BigIntFilter<"LeadProject"> | bigint | number
    status?: StringNullableFilter<"LeadProject"> | string | null
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    organizatioon?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type LeadProjectOrderByWithRelationInput = {
    id?: SortOrder
    leadId?: SortOrder
    projectId?: SortOrder
    integrationId?: SortOrder
    orgId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    status?: SortOrderInput | SortOrder
    integration?: IntegrationOrderByWithRelationInput
    lead?: LeadOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    organizatioon?: OrganizationOrderByWithRelationInput
  }

  export type LeadProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    projectId_leadId?: LeadProjectProjectIdLeadIdCompoundUniqueInput
    AND?: LeadProjectWhereInput | LeadProjectWhereInput[]
    OR?: LeadProjectWhereInput[]
    NOT?: LeadProjectWhereInput | LeadProjectWhereInput[]
    leadId?: StringFilter<"LeadProject"> | string
    projectId?: StringFilter<"LeadProject"> | string
    integrationId?: StringFilter<"LeadProject"> | string
    orgId?: StringFilter<"LeadProject"> | string
    createdAt?: BigIntFilter<"LeadProject"> | bigint | number
    updatedAt?: BigIntFilter<"LeadProject"> | bigint | number
    deletedAt?: BigIntFilter<"LeadProject"> | bigint | number
    status?: StringNullableFilter<"LeadProject"> | string | null
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    organizatioon?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }, "id" | "projectId_leadId">

  export type LeadProjectOrderByWithAggregationInput = {
    id?: SortOrder
    leadId?: SortOrder
    projectId?: SortOrder
    integrationId?: SortOrder
    orgId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    status?: SortOrderInput | SortOrder
    _count?: LeadProjectCountOrderByAggregateInput
    _avg?: LeadProjectAvgOrderByAggregateInput
    _max?: LeadProjectMaxOrderByAggregateInput
    _min?: LeadProjectMinOrderByAggregateInput
    _sum?: LeadProjectSumOrderByAggregateInput
  }

  export type LeadProjectScalarWhereWithAggregatesInput = {
    AND?: LeadProjectScalarWhereWithAggregatesInput | LeadProjectScalarWhereWithAggregatesInput[]
    OR?: LeadProjectScalarWhereWithAggregatesInput[]
    NOT?: LeadProjectScalarWhereWithAggregatesInput | LeadProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeadProject"> | string
    leadId?: StringWithAggregatesFilter<"LeadProject"> | string
    projectId?: StringWithAggregatesFilter<"LeadProject"> | string
    integrationId?: StringWithAggregatesFilter<"LeadProject"> | string
    orgId?: StringWithAggregatesFilter<"LeadProject"> | string
    createdAt?: BigIntWithAggregatesFilter<"LeadProject"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"LeadProject"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"LeadProject"> | bigint | number
    status?: StringNullableWithAggregatesFilter<"LeadProject"> | string | null
  }

  export type ContactWhereInput = {
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    id?: StringFilter<"Contact"> | string
    firstName?: StringNullableFilter<"Contact"> | string | null
    lastName?: StringNullableFilter<"Contact"> | string | null
    suffix?: StringNullableFilter<"Contact"> | string | null
    phone?: JsonNullableFilter<"Contact">
    name?: StringNullableFilter<"Contact"> | string | null
    email?: StringNullableFilter<"Contact"> | string | null
    secondaryEmail?: StringNullableFilter<"Contact"> | string | null
    primaryPhNo?: JsonNullableFilter<"Contact">
    secondaryPhNo?: JsonNullableFilter<"Contact">
    industry?: StringNullableFilter<"Contact"> | string | null
    type?: StringNullableFilter<"Contact"> | string | null
    leadId?: StringFilter<"Contact"> | string
    lastContacted?: BigIntNullableFilter<"Contact"> | bigint | number | null
    createdAt?: BigIntFilter<"Contact"> | bigint | number
    updatedAt?: BigIntFilter<"Contact"> | bigint | number
    deletedAt?: BigIntFilter<"Contact"> | bigint | number
    organizationId?: StringFilter<"Contact"> | string
    isPrimay?: BoolFilter<"Contact"> | boolean
    isUnsubscribed?: BoolFilter<"Contact"> | boolean
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
    Email?: EmailListRelationFilter
  }

  export type ContactOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    suffix?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    secondaryEmail?: SortOrderInput | SortOrder
    primaryPhNo?: SortOrderInput | SortOrder
    secondaryPhNo?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    leadId?: SortOrder
    lastContacted?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
    isPrimay?: SortOrder
    isUnsubscribed?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    lead?: LeadOrderByWithRelationInput
    Email?: EmailOrderByRelationAggregateInput
  }

  export type ContactWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ContactWhereInput | ContactWhereInput[]
    OR?: ContactWhereInput[]
    NOT?: ContactWhereInput | ContactWhereInput[]
    firstName?: StringNullableFilter<"Contact"> | string | null
    lastName?: StringNullableFilter<"Contact"> | string | null
    suffix?: StringNullableFilter<"Contact"> | string | null
    phone?: JsonNullableFilter<"Contact">
    name?: StringNullableFilter<"Contact"> | string | null
    email?: StringNullableFilter<"Contact"> | string | null
    secondaryEmail?: StringNullableFilter<"Contact"> | string | null
    primaryPhNo?: JsonNullableFilter<"Contact">
    secondaryPhNo?: JsonNullableFilter<"Contact">
    industry?: StringNullableFilter<"Contact"> | string | null
    type?: StringNullableFilter<"Contact"> | string | null
    leadId?: StringFilter<"Contact"> | string
    lastContacted?: BigIntNullableFilter<"Contact"> | bigint | number | null
    createdAt?: BigIntFilter<"Contact"> | bigint | number
    updatedAt?: BigIntFilter<"Contact"> | bigint | number
    deletedAt?: BigIntFilter<"Contact"> | bigint | number
    organizationId?: StringFilter<"Contact"> | string
    isPrimay?: BoolFilter<"Contact"> | boolean
    isUnsubscribed?: BoolFilter<"Contact"> | boolean
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
    Email?: EmailListRelationFilter
  }, "id">

  export type ContactOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrderInput | SortOrder
    lastName?: SortOrderInput | SortOrder
    suffix?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    secondaryEmail?: SortOrderInput | SortOrder
    primaryPhNo?: SortOrderInput | SortOrder
    secondaryPhNo?: SortOrderInput | SortOrder
    industry?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    leadId?: SortOrder
    lastContacted?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
    isPrimay?: SortOrder
    isUnsubscribed?: SortOrder
    _count?: ContactCountOrderByAggregateInput
    _avg?: ContactAvgOrderByAggregateInput
    _max?: ContactMaxOrderByAggregateInput
    _min?: ContactMinOrderByAggregateInput
    _sum?: ContactSumOrderByAggregateInput
  }

  export type ContactScalarWhereWithAggregatesInput = {
    AND?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    OR?: ContactScalarWhereWithAggregatesInput[]
    NOT?: ContactScalarWhereWithAggregatesInput | ContactScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Contact"> | string
    firstName?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    lastName?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    suffix?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    phone?: JsonNullableWithAggregatesFilter<"Contact">
    name?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    email?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    secondaryEmail?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    primaryPhNo?: JsonNullableWithAggregatesFilter<"Contact">
    secondaryPhNo?: JsonNullableWithAggregatesFilter<"Contact">
    industry?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    type?: StringNullableWithAggregatesFilter<"Contact"> | string | null
    leadId?: StringWithAggregatesFilter<"Contact"> | string
    lastContacted?: BigIntNullableWithAggregatesFilter<"Contact"> | bigint | number | null
    createdAt?: BigIntWithAggregatesFilter<"Contact"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"Contact"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"Contact"> | bigint | number
    organizationId?: StringWithAggregatesFilter<"Contact"> | string
    isPrimay?: BoolWithAggregatesFilter<"Contact"> | boolean
    isUnsubscribed?: BoolWithAggregatesFilter<"Contact"> | boolean
  }

  export type AttachmentWhereInput = {
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    id?: StringFilter<"Attachment"> | string
    attachmentUrl?: StringFilter<"Attachment"> | string
    attachmentType?: StringFilter<"Attachment"> | string
    eTag?: StringFilter<"Attachment"> | string
    attachmentName?: StringFilter<"Attachment"> | string
    leadId?: StringFilter<"Attachment"> | string
    createdAt?: BigIntFilter<"Attachment"> | bigint | number
    updatedAt?: BigIntFilter<"Attachment"> | bigint | number
    deletedAt?: BigIntFilter<"Attachment"> | bigint | number
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
  }

  export type AttachmentOrderByWithRelationInput = {
    id?: SortOrder
    attachmentUrl?: SortOrder
    attachmentType?: SortOrder
    eTag?: SortOrder
    attachmentName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    lead?: LeadOrderByWithRelationInput
  }

  export type AttachmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AttachmentWhereInput | AttachmentWhereInput[]
    OR?: AttachmentWhereInput[]
    NOT?: AttachmentWhereInput | AttachmentWhereInput[]
    attachmentUrl?: StringFilter<"Attachment"> | string
    attachmentType?: StringFilter<"Attachment"> | string
    eTag?: StringFilter<"Attachment"> | string
    attachmentName?: StringFilter<"Attachment"> | string
    leadId?: StringFilter<"Attachment"> | string
    createdAt?: BigIntFilter<"Attachment"> | bigint | number
    updatedAt?: BigIntFilter<"Attachment"> | bigint | number
    deletedAt?: BigIntFilter<"Attachment"> | bigint | number
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
  }, "id">

  export type AttachmentOrderByWithAggregationInput = {
    id?: SortOrder
    attachmentUrl?: SortOrder
    attachmentType?: SortOrder
    eTag?: SortOrder
    attachmentName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    _count?: AttachmentCountOrderByAggregateInput
    _avg?: AttachmentAvgOrderByAggregateInput
    _max?: AttachmentMaxOrderByAggregateInput
    _min?: AttachmentMinOrderByAggregateInput
    _sum?: AttachmentSumOrderByAggregateInput
  }

  export type AttachmentScalarWhereWithAggregatesInput = {
    AND?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    OR?: AttachmentScalarWhereWithAggregatesInput[]
    NOT?: AttachmentScalarWhereWithAggregatesInput | AttachmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Attachment"> | string
    attachmentUrl?: StringWithAggregatesFilter<"Attachment"> | string
    attachmentType?: StringWithAggregatesFilter<"Attachment"> | string
    eTag?: StringWithAggregatesFilter<"Attachment"> | string
    attachmentName?: StringWithAggregatesFilter<"Attachment"> | string
    leadId?: StringWithAggregatesFilter<"Attachment"> | string
    createdAt?: BigIntWithAggregatesFilter<"Attachment"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"Attachment"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"Attachment"> | bigint | number
  }

  export type LeadActivityWhereInput = {
    AND?: LeadActivityWhereInput | LeadActivityWhereInput[]
    OR?: LeadActivityWhereInput[]
    NOT?: LeadActivityWhereInput | LeadActivityWhereInput[]
    id?: StringFilter<"LeadActivity"> | string
    leadId?: StringFilter<"LeadActivity"> | string
    data?: JsonFilter<"LeadActivity">
    updatedAt?: BigIntFilter<"LeadActivity"> | bigint | number
    createdAt?: BigIntFilter<"LeadActivity"> | bigint | number
    deletedAt?: BigIntFilter<"LeadActivity"> | bigint | number
    userId?: StringNullableFilter<"LeadActivity"> | string | null
    noteId?: StringNullableFilter<"LeadActivity"> | string | null
    type?: EnumLeadActivityTypeFilter<"LeadActivity"> | $Enums.LeadActivityType
    orgId?: StringFilter<"LeadActivity"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    note?: XOR<LeadNotesNullableRelationFilter, LeadNotesWhereInput> | null
  }

  export type LeadActivityOrderByWithRelationInput = {
    id?: SortOrder
    leadId?: SortOrder
    data?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    type?: SortOrder
    orgId?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
    lead?: LeadOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    note?: LeadNotesOrderByWithRelationInput
  }

  export type LeadActivityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeadActivityWhereInput | LeadActivityWhereInput[]
    OR?: LeadActivityWhereInput[]
    NOT?: LeadActivityWhereInput | LeadActivityWhereInput[]
    leadId?: StringFilter<"LeadActivity"> | string
    data?: JsonFilter<"LeadActivity">
    updatedAt?: BigIntFilter<"LeadActivity"> | bigint | number
    createdAt?: BigIntFilter<"LeadActivity"> | bigint | number
    deletedAt?: BigIntFilter<"LeadActivity"> | bigint | number
    userId?: StringNullableFilter<"LeadActivity"> | string | null
    noteId?: StringNullableFilter<"LeadActivity"> | string | null
    type?: EnumLeadActivityTypeFilter<"LeadActivity"> | $Enums.LeadActivityType
    orgId?: StringFilter<"LeadActivity"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    lead?: XOR<LeadRelationFilter, LeadWhereInput>
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    note?: XOR<LeadNotesNullableRelationFilter, LeadNotesWhereInput> | null
  }, "id">

  export type LeadActivityOrderByWithAggregationInput = {
    id?: SortOrder
    leadId?: SortOrder
    data?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    noteId?: SortOrderInput | SortOrder
    type?: SortOrder
    orgId?: SortOrder
    _count?: LeadActivityCountOrderByAggregateInput
    _avg?: LeadActivityAvgOrderByAggregateInput
    _max?: LeadActivityMaxOrderByAggregateInput
    _min?: LeadActivityMinOrderByAggregateInput
    _sum?: LeadActivitySumOrderByAggregateInput
  }

  export type LeadActivityScalarWhereWithAggregatesInput = {
    AND?: LeadActivityScalarWhereWithAggregatesInput | LeadActivityScalarWhereWithAggregatesInput[]
    OR?: LeadActivityScalarWhereWithAggregatesInput[]
    NOT?: LeadActivityScalarWhereWithAggregatesInput | LeadActivityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeadActivity"> | string
    leadId?: StringWithAggregatesFilter<"LeadActivity"> | string
    data?: JsonWithAggregatesFilter<"LeadActivity">
    updatedAt?: BigIntWithAggregatesFilter<"LeadActivity"> | bigint | number
    createdAt?: BigIntWithAggregatesFilter<"LeadActivity"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"LeadActivity"> | bigint | number
    userId?: StringNullableWithAggregatesFilter<"LeadActivity"> | string | null
    noteId?: StringNullableWithAggregatesFilter<"LeadActivity"> | string | null
    type?: EnumLeadActivityTypeWithAggregatesFilter<"LeadActivity"> | $Enums.LeadActivityType
    orgId?: StringWithAggregatesFilter<"LeadActivity"> | string
  }

  export type EmailWhereInput = {
    AND?: EmailWhereInput | EmailWhereInput[]
    OR?: EmailWhereInput[]
    NOT?: EmailWhereInput | EmailWhereInput[]
    id?: StringFilter<"Email"> | string
    from?: JsonFilter<"Email">
    to?: StringNullableListFilter<"Email">
    replyTo?: StringNullableFilter<"Email"> | string | null
    cc?: StringNullableListFilter<"Email">
    bcc?: StringNullableListFilter<"Email">
    status?: EnumEmailStatusFilter<"Email"> | $Enums.EmailStatus
    subject?: StringNullableFilter<"Email"> | string | null
    body?: StringFilter<"Email"> | string
    html?: StringNullableFilter<"Email"> | string | null
    trackingId?: StringNullableFilter<"Email"> | string | null
    messageId?: StringNullableFilter<"Email"> | string | null
    threadId?: StringNullableFilter<"Email"> | string | null
    historyId?: StringNullableFilter<"Email"> | string | null
    labelIds?: StringNullableListFilter<"Email">
    isOpened?: BoolFilter<"Email"> | boolean
    openedAt?: BigIntFilter<"Email"> | bigint | number
    isClicked?: BoolFilter<"Email"> | boolean
    clickedAt?: BigIntFilter<"Email"> | bigint | number
    sentAt?: BigIntFilter<"Email"> | bigint | number
    deletedAt?: BigIntFilter<"Email"> | bigint | number
    integrationId?: StringFilter<"Email"> | string
    organizationId?: StringFilter<"Email"> | string
    leadId?: StringNullableFilter<"Email"> | string | null
    contactId?: StringNullableFilter<"Email"> | string | null
    source?: EnumIntegrationTypeFilter<"Email"> | $Enums.IntegrationType
    contact?: XOR<ContactNullableRelationFilter, ContactWhereInput> | null
    lead?: XOR<LeadNullableRelationFilter, LeadWhereInput> | null
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    EmailQueue?: EmailQueueListRelationFilter
  }

  export type EmailOrderByWithRelationInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    replyTo?: SortOrderInput | SortOrder
    cc?: SortOrder
    bcc?: SortOrder
    status?: SortOrder
    subject?: SortOrderInput | SortOrder
    body?: SortOrder
    html?: SortOrderInput | SortOrder
    trackingId?: SortOrderInput | SortOrder
    messageId?: SortOrderInput | SortOrder
    threadId?: SortOrderInput | SortOrder
    historyId?: SortOrderInput | SortOrder
    labelIds?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrder
    isClicked?: SortOrder
    clickedAt?: SortOrder
    sentAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    leadId?: SortOrderInput | SortOrder
    contactId?: SortOrderInput | SortOrder
    source?: SortOrder
    contact?: ContactOrderByWithRelationInput
    lead?: LeadOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    EmailQueue?: EmailQueueOrderByRelationAggregateInput
  }

  export type EmailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    trackingId?: string
    AND?: EmailWhereInput | EmailWhereInput[]
    OR?: EmailWhereInput[]
    NOT?: EmailWhereInput | EmailWhereInput[]
    from?: JsonFilter<"Email">
    to?: StringNullableListFilter<"Email">
    replyTo?: StringNullableFilter<"Email"> | string | null
    cc?: StringNullableListFilter<"Email">
    bcc?: StringNullableListFilter<"Email">
    status?: EnumEmailStatusFilter<"Email"> | $Enums.EmailStatus
    subject?: StringNullableFilter<"Email"> | string | null
    body?: StringFilter<"Email"> | string
    html?: StringNullableFilter<"Email"> | string | null
    messageId?: StringNullableFilter<"Email"> | string | null
    threadId?: StringNullableFilter<"Email"> | string | null
    historyId?: StringNullableFilter<"Email"> | string | null
    labelIds?: StringNullableListFilter<"Email">
    isOpened?: BoolFilter<"Email"> | boolean
    openedAt?: BigIntFilter<"Email"> | bigint | number
    isClicked?: BoolFilter<"Email"> | boolean
    clickedAt?: BigIntFilter<"Email"> | bigint | number
    sentAt?: BigIntFilter<"Email"> | bigint | number
    deletedAt?: BigIntFilter<"Email"> | bigint | number
    integrationId?: StringFilter<"Email"> | string
    organizationId?: StringFilter<"Email"> | string
    leadId?: StringNullableFilter<"Email"> | string | null
    contactId?: StringNullableFilter<"Email"> | string | null
    source?: EnumIntegrationTypeFilter<"Email"> | $Enums.IntegrationType
    contact?: XOR<ContactNullableRelationFilter, ContactWhereInput> | null
    lead?: XOR<LeadNullableRelationFilter, LeadWhereInput> | null
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    EmailQueue?: EmailQueueListRelationFilter
  }, "id" | "trackingId">

  export type EmailOrderByWithAggregationInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    replyTo?: SortOrderInput | SortOrder
    cc?: SortOrder
    bcc?: SortOrder
    status?: SortOrder
    subject?: SortOrderInput | SortOrder
    body?: SortOrder
    html?: SortOrderInput | SortOrder
    trackingId?: SortOrderInput | SortOrder
    messageId?: SortOrderInput | SortOrder
    threadId?: SortOrderInput | SortOrder
    historyId?: SortOrderInput | SortOrder
    labelIds?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrder
    isClicked?: SortOrder
    clickedAt?: SortOrder
    sentAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    leadId?: SortOrderInput | SortOrder
    contactId?: SortOrderInput | SortOrder
    source?: SortOrder
    _count?: EmailCountOrderByAggregateInput
    _avg?: EmailAvgOrderByAggregateInput
    _max?: EmailMaxOrderByAggregateInput
    _min?: EmailMinOrderByAggregateInput
    _sum?: EmailSumOrderByAggregateInput
  }

  export type EmailScalarWhereWithAggregatesInput = {
    AND?: EmailScalarWhereWithAggregatesInput | EmailScalarWhereWithAggregatesInput[]
    OR?: EmailScalarWhereWithAggregatesInput[]
    NOT?: EmailScalarWhereWithAggregatesInput | EmailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Email"> | string
    from?: JsonWithAggregatesFilter<"Email">
    to?: StringNullableListFilter<"Email">
    replyTo?: StringNullableWithAggregatesFilter<"Email"> | string | null
    cc?: StringNullableListFilter<"Email">
    bcc?: StringNullableListFilter<"Email">
    status?: EnumEmailStatusWithAggregatesFilter<"Email"> | $Enums.EmailStatus
    subject?: StringNullableWithAggregatesFilter<"Email"> | string | null
    body?: StringWithAggregatesFilter<"Email"> | string
    html?: StringNullableWithAggregatesFilter<"Email"> | string | null
    trackingId?: StringNullableWithAggregatesFilter<"Email"> | string | null
    messageId?: StringNullableWithAggregatesFilter<"Email"> | string | null
    threadId?: StringNullableWithAggregatesFilter<"Email"> | string | null
    historyId?: StringNullableWithAggregatesFilter<"Email"> | string | null
    labelIds?: StringNullableListFilter<"Email">
    isOpened?: BoolWithAggregatesFilter<"Email"> | boolean
    openedAt?: BigIntWithAggregatesFilter<"Email"> | bigint | number
    isClicked?: BoolWithAggregatesFilter<"Email"> | boolean
    clickedAt?: BigIntWithAggregatesFilter<"Email"> | bigint | number
    sentAt?: BigIntWithAggregatesFilter<"Email"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"Email"> | bigint | number
    integrationId?: StringWithAggregatesFilter<"Email"> | string
    organizationId?: StringWithAggregatesFilter<"Email"> | string
    leadId?: StringNullableWithAggregatesFilter<"Email"> | string | null
    contactId?: StringNullableWithAggregatesFilter<"Email"> | string | null
    source?: EnumIntegrationTypeWithAggregatesFilter<"Email"> | $Enums.IntegrationType
  }

  export type EmailQueueWhereInput = {
    AND?: EmailQueueWhereInput | EmailQueueWhereInput[]
    OR?: EmailQueueWhereInput[]
    NOT?: EmailQueueWhereInput | EmailQueueWhereInput[]
    id?: StringFilter<"EmailQueue"> | string
    emailId?: StringFilter<"EmailQueue"> | string
    scheduledAt?: BigIntFilter<"EmailQueue"> | bigint | number
    status?: EnumQueueStatusFilter<"EmailQueue"> | $Enums.QueueStatus
    retryCount?: IntFilter<"EmailQueue"> | number
    createdAt?: DateTimeFilter<"EmailQueue"> | Date | string
    updatedAt?: DateTimeFilter<"EmailQueue"> | Date | string
    email?: XOR<EmailRelationFilter, EmailWhereInput>
  }

  export type EmailQueueOrderByWithRelationInput = {
    id?: SortOrder
    emailId?: SortOrder
    scheduledAt?: SortOrder
    status?: SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    email?: EmailOrderByWithRelationInput
  }

  export type EmailQueueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EmailQueueWhereInput | EmailQueueWhereInput[]
    OR?: EmailQueueWhereInput[]
    NOT?: EmailQueueWhereInput | EmailQueueWhereInput[]
    emailId?: StringFilter<"EmailQueue"> | string
    scheduledAt?: BigIntFilter<"EmailQueue"> | bigint | number
    status?: EnumQueueStatusFilter<"EmailQueue"> | $Enums.QueueStatus
    retryCount?: IntFilter<"EmailQueue"> | number
    createdAt?: DateTimeFilter<"EmailQueue"> | Date | string
    updatedAt?: DateTimeFilter<"EmailQueue"> | Date | string
    email?: XOR<EmailRelationFilter, EmailWhereInput>
  }, "id">

  export type EmailQueueOrderByWithAggregationInput = {
    id?: SortOrder
    emailId?: SortOrder
    scheduledAt?: SortOrder
    status?: SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: EmailQueueCountOrderByAggregateInput
    _avg?: EmailQueueAvgOrderByAggregateInput
    _max?: EmailQueueMaxOrderByAggregateInput
    _min?: EmailQueueMinOrderByAggregateInput
    _sum?: EmailQueueSumOrderByAggregateInput
  }

  export type EmailQueueScalarWhereWithAggregatesInput = {
    AND?: EmailQueueScalarWhereWithAggregatesInput | EmailQueueScalarWhereWithAggregatesInput[]
    OR?: EmailQueueScalarWhereWithAggregatesInput[]
    NOT?: EmailQueueScalarWhereWithAggregatesInput | EmailQueueScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"EmailQueue"> | string
    emailId?: StringWithAggregatesFilter<"EmailQueue"> | string
    scheduledAt?: BigIntWithAggregatesFilter<"EmailQueue"> | bigint | number
    status?: EnumQueueStatusWithAggregatesFilter<"EmailQueue"> | $Enums.QueueStatus
    retryCount?: IntWithAggregatesFilter<"EmailQueue"> | number
    createdAt?: DateTimeWithAggregatesFilter<"EmailQueue"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"EmailQueue"> | Date | string
  }

  export type IntegrationWhereInput = {
    AND?: IntegrationWhereInput | IntegrationWhereInput[]
    OR?: IntegrationWhereInput[]
    NOT?: IntegrationWhereInput | IntegrationWhereInput[]
    id?: StringFilter<"Integration"> | string
    organizationId?: StringFilter<"Integration"> | string
    name?: StringFilter<"Integration"> | string
    data?: JsonFilter<"Integration">
    description?: StringNullableFilter<"Integration"> | string | null
    type?: EnumIntegrationTypeFilter<"Integration"> | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFilter<"Integration"> | $Enums.IntegrationCategory
    createdAt?: BigIntFilter<"Integration"> | bigint | number
    updatedAt?: BigIntFilter<"Integration"> | bigint | number
    deletedAt?: BigIntNullableFilter<"Integration"> | bigint | number | null
    orgMemberId?: StringNullableFilter<"Integration"> | string | null
    isSingular?: BoolFilter<"Integration"> | boolean
    sharedType?: EnumIntegrationSharingTypeFilter<"Integration"> | $Enums.IntegrationSharingType
    members?: XOR<OrgMemberNullableRelationFilter, OrgMemberWhereInput> | null
    Project?: ProjectListRelationFilter
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    Lead?: LeadListRelationFilter
    LeadProject?: LeadProjectListRelationFilter
    Jobs?: JobListRelationFilter
    mailServiceFromEmail?: MailServiceFromEmailListRelationFilter
  }

  export type IntegrationOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    data?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    orgMemberId?: SortOrderInput | SortOrder
    isSingular?: SortOrder
    sharedType?: SortOrder
    members?: OrgMemberOrderByWithRelationInput
    Project?: ProjectOrderByRelationAggregateInput
    organization?: OrganizationOrderByWithRelationInput
    Lead?: LeadOrderByRelationAggregateInput
    LeadProject?: LeadProjectOrderByRelationAggregateInput
    Jobs?: JobOrderByRelationAggregateInput
    mailServiceFromEmail?: MailServiceFromEmailOrderByRelationAggregateInput
  }

  export type IntegrationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IntegrationWhereInput | IntegrationWhereInput[]
    OR?: IntegrationWhereInput[]
    NOT?: IntegrationWhereInput | IntegrationWhereInput[]
    organizationId?: StringFilter<"Integration"> | string
    name?: StringFilter<"Integration"> | string
    data?: JsonFilter<"Integration">
    description?: StringNullableFilter<"Integration"> | string | null
    type?: EnumIntegrationTypeFilter<"Integration"> | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFilter<"Integration"> | $Enums.IntegrationCategory
    createdAt?: BigIntFilter<"Integration"> | bigint | number
    updatedAt?: BigIntFilter<"Integration"> | bigint | number
    deletedAt?: BigIntNullableFilter<"Integration"> | bigint | number | null
    orgMemberId?: StringNullableFilter<"Integration"> | string | null
    isSingular?: BoolFilter<"Integration"> | boolean
    sharedType?: EnumIntegrationSharingTypeFilter<"Integration"> | $Enums.IntegrationSharingType
    members?: XOR<OrgMemberNullableRelationFilter, OrgMemberWhereInput> | null
    Project?: ProjectListRelationFilter
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
    Lead?: LeadListRelationFilter
    LeadProject?: LeadProjectListRelationFilter
    Jobs?: JobListRelationFilter
    mailServiceFromEmail?: MailServiceFromEmailListRelationFilter
  }, "id">

  export type IntegrationOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    data?: SortOrder
    description?: SortOrderInput | SortOrder
    type?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    orgMemberId?: SortOrderInput | SortOrder
    isSingular?: SortOrder
    sharedType?: SortOrder
    _count?: IntegrationCountOrderByAggregateInput
    _avg?: IntegrationAvgOrderByAggregateInput
    _max?: IntegrationMaxOrderByAggregateInput
    _min?: IntegrationMinOrderByAggregateInput
    _sum?: IntegrationSumOrderByAggregateInput
  }

  export type IntegrationScalarWhereWithAggregatesInput = {
    AND?: IntegrationScalarWhereWithAggregatesInput | IntegrationScalarWhereWithAggregatesInput[]
    OR?: IntegrationScalarWhereWithAggregatesInput[]
    NOT?: IntegrationScalarWhereWithAggregatesInput | IntegrationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Integration"> | string
    organizationId?: StringWithAggregatesFilter<"Integration"> | string
    name?: StringWithAggregatesFilter<"Integration"> | string
    data?: JsonWithAggregatesFilter<"Integration">
    description?: StringNullableWithAggregatesFilter<"Integration"> | string | null
    type?: EnumIntegrationTypeWithAggregatesFilter<"Integration"> | $Enums.IntegrationType
    category?: EnumIntegrationCategoryWithAggregatesFilter<"Integration"> | $Enums.IntegrationCategory
    createdAt?: BigIntWithAggregatesFilter<"Integration"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"Integration"> | bigint | number
    deletedAt?: BigIntNullableWithAggregatesFilter<"Integration"> | bigint | number | null
    orgMemberId?: StringNullableWithAggregatesFilter<"Integration"> | string | null
    isSingular?: BoolWithAggregatesFilter<"Integration"> | boolean
    sharedType?: EnumIntegrationSharingTypeWithAggregatesFilter<"Integration"> | $Enums.IntegrationSharingType
  }

  export type MailServiceFromEmailWhereInput = {
    AND?: MailServiceFromEmailWhereInput | MailServiceFromEmailWhereInput[]
    OR?: MailServiceFromEmailWhereInput[]
    NOT?: MailServiceFromEmailWhereInput | MailServiceFromEmailWhereInput[]
    id?: StringFilter<"MailServiceFromEmail"> | string
    fromName?: StringFilter<"MailServiceFromEmail"> | string
    fromEmail?: StringFilter<"MailServiceFromEmail"> | string
    replyTo?: StringNullableFilter<"MailServiceFromEmail"> | string | null
    type?: EnumIntegrationTypeFilter<"MailServiceFromEmail"> | $Enums.IntegrationType
    integrationId?: StringFilter<"MailServiceFromEmail"> | string
    organizationId?: StringFilter<"MailServiceFromEmail"> | string
    createdAt?: BigIntFilter<"MailServiceFromEmail"> | bigint | number
    updatedAt?: BigIntFilter<"MailServiceFromEmail"> | bigint | number
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type MailServiceFromEmailOrderByWithRelationInput = {
    id?: SortOrder
    fromName?: SortOrder
    fromEmail?: SortOrder
    replyTo?: SortOrderInput | SortOrder
    type?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    integration?: IntegrationOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type MailServiceFromEmailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MailServiceFromEmailWhereInput | MailServiceFromEmailWhereInput[]
    OR?: MailServiceFromEmailWhereInput[]
    NOT?: MailServiceFromEmailWhereInput | MailServiceFromEmailWhereInput[]
    fromName?: StringFilter<"MailServiceFromEmail"> | string
    fromEmail?: StringFilter<"MailServiceFromEmail"> | string
    replyTo?: StringNullableFilter<"MailServiceFromEmail"> | string | null
    type?: EnumIntegrationTypeFilter<"MailServiceFromEmail"> | $Enums.IntegrationType
    integrationId?: StringFilter<"MailServiceFromEmail"> | string
    organizationId?: StringFilter<"MailServiceFromEmail"> | string
    createdAt?: BigIntFilter<"MailServiceFromEmail"> | bigint | number
    updatedAt?: BigIntFilter<"MailServiceFromEmail"> | bigint | number
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }, "id">

  export type MailServiceFromEmailOrderByWithAggregationInput = {
    id?: SortOrder
    fromName?: SortOrder
    fromEmail?: SortOrder
    replyTo?: SortOrderInput | SortOrder
    type?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MailServiceFromEmailCountOrderByAggregateInput
    _avg?: MailServiceFromEmailAvgOrderByAggregateInput
    _max?: MailServiceFromEmailMaxOrderByAggregateInput
    _min?: MailServiceFromEmailMinOrderByAggregateInput
    _sum?: MailServiceFromEmailSumOrderByAggregateInput
  }

  export type MailServiceFromEmailScalarWhereWithAggregatesInput = {
    AND?: MailServiceFromEmailScalarWhereWithAggregatesInput | MailServiceFromEmailScalarWhereWithAggregatesInput[]
    OR?: MailServiceFromEmailScalarWhereWithAggregatesInput[]
    NOT?: MailServiceFromEmailScalarWhereWithAggregatesInput | MailServiceFromEmailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MailServiceFromEmail"> | string
    fromName?: StringWithAggregatesFilter<"MailServiceFromEmail"> | string
    fromEmail?: StringWithAggregatesFilter<"MailServiceFromEmail"> | string
    replyTo?: StringNullableWithAggregatesFilter<"MailServiceFromEmail"> | string | null
    type?: EnumIntegrationTypeWithAggregatesFilter<"MailServiceFromEmail"> | $Enums.IntegrationType
    integrationId?: StringWithAggregatesFilter<"MailServiceFromEmail"> | string
    organizationId?: StringWithAggregatesFilter<"MailServiceFromEmail"> | string
    createdAt?: BigIntWithAggregatesFilter<"MailServiceFromEmail"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"MailServiceFromEmail"> | bigint | number
  }

  export type UnsubscribeLinkWhereInput = {
    AND?: UnsubscribeLinkWhereInput | UnsubscribeLinkWhereInput[]
    OR?: UnsubscribeLinkWhereInput[]
    NOT?: UnsubscribeLinkWhereInput | UnsubscribeLinkWhereInput[]
    id?: StringFilter<"UnsubscribeLink"> | string
    name?: StringFilter<"UnsubscribeLink"> | string
    message?: StringNullableFilter<"UnsubscribeLink"> | string | null
    anchorText?: StringFilter<"UnsubscribeLink"> | string
    isActive?: BoolFilter<"UnsubscribeLink"> | boolean
    organizationId?: StringFilter<"UnsubscribeLink"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type UnsubscribeLinkOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    message?: SortOrderInput | SortOrder
    anchorText?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
  }

  export type UnsubscribeLinkWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UnsubscribeLinkWhereInput | UnsubscribeLinkWhereInput[]
    OR?: UnsubscribeLinkWhereInput[]
    NOT?: UnsubscribeLinkWhereInput | UnsubscribeLinkWhereInput[]
    name?: StringFilter<"UnsubscribeLink"> | string
    message?: StringNullableFilter<"UnsubscribeLink"> | string | null
    anchorText?: StringFilter<"UnsubscribeLink"> | string
    isActive?: BoolFilter<"UnsubscribeLink"> | boolean
    organizationId?: StringFilter<"UnsubscribeLink"> | string
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }, "id">

  export type UnsubscribeLinkOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    message?: SortOrderInput | SortOrder
    anchorText?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
    _count?: UnsubscribeLinkCountOrderByAggregateInput
    _max?: UnsubscribeLinkMaxOrderByAggregateInput
    _min?: UnsubscribeLinkMinOrderByAggregateInput
  }

  export type UnsubscribeLinkScalarWhereWithAggregatesInput = {
    AND?: UnsubscribeLinkScalarWhereWithAggregatesInput | UnsubscribeLinkScalarWhereWithAggregatesInput[]
    OR?: UnsubscribeLinkScalarWhereWithAggregatesInput[]
    NOT?: UnsubscribeLinkScalarWhereWithAggregatesInput | UnsubscribeLinkScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UnsubscribeLink"> | string
    name?: StringWithAggregatesFilter<"UnsubscribeLink"> | string
    message?: StringNullableWithAggregatesFilter<"UnsubscribeLink"> | string | null
    anchorText?: StringWithAggregatesFilter<"UnsubscribeLink"> | string
    isActive?: BoolWithAggregatesFilter<"UnsubscribeLink"> | boolean
    organizationId?: StringWithAggregatesFilter<"UnsubscribeLink"> | string
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: StringFilter<"Job"> | string
    name?: StringFilter<"Job"> | string
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    createdAt?: BigIntFilter<"Job"> | bigint | number
    updatedAt?: BigIntFilter<"Job"> | bigint | number
    integrationId?: StringFilter<"Job"> | string
    organizationId?: StringFilter<"Job"> | string
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
    tasks?: TaskListRelationFilter
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    integration?: IntegrationOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    name?: StringFilter<"Job"> | string
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    createdAt?: BigIntFilter<"Job"> | bigint | number
    updatedAt?: BigIntFilter<"Job"> | bigint | number
    integrationId?: StringFilter<"Job"> | string
    organizationId?: StringFilter<"Job"> | string
    integration?: XOR<IntegrationRelationFilter, IntegrationWhereInput>
    tasks?: TaskListRelationFilter
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Job"> | string
    name?: StringWithAggregatesFilter<"Job"> | string
    status?: EnumJobStatusWithAggregatesFilter<"Job"> | $Enums.JobStatus
    createdAt?: BigIntWithAggregatesFilter<"Job"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"Job"> | bigint | number
    integrationId?: StringWithAggregatesFilter<"Job"> | string
    organizationId?: StringWithAggregatesFilter<"Job"> | string
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    jobId?: StringFilter<"Task"> | string
    name?: StringFilter<"Task"> | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    createdAt?: BigIntFilter<"Task"> | bigint | number
    updatedAt?: BigIntFilter<"Task"> | bigint | number
    job?: XOR<JobRelationFilter, JobWhereInput>
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    job?: JobOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    jobId?: StringFilter<"Task"> | string
    name?: StringFilter<"Task"> | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    createdAt?: BigIntFilter<"Task"> | bigint | number
    updatedAt?: BigIntFilter<"Task"> | bigint | number
    job?: XOR<JobRelationFilter, JobWhereInput>
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _avg?: TaskAvgOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
    _sum?: TaskSumOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    jobId?: StringWithAggregatesFilter<"Task"> | string
    name?: StringWithAggregatesFilter<"Task"> | string
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
    createdAt?: BigIntWithAggregatesFilter<"Task"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"Task"> | bigint | number
  }

  export type WebhookWhereInput = {
    AND?: WebhookWhereInput | WebhookWhereInput[]
    OR?: WebhookWhereInput[]
    NOT?: WebhookWhereInput | WebhookWhereInput[]
    id?: StringFilter<"Webhook"> | string
    url?: StringFilter<"Webhook"> | string
    type?: EnumWebhookTypeFilter<"Webhook"> | $Enums.WebhookType
    createdAt?: BigIntFilter<"Webhook"> | bigint | number
    organizationId?: StringFilter<"Webhook"> | string
    data?: JsonFilter<"Webhook">
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type WebhookOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    organizationId?: SortOrder
    data?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
  }

  export type WebhookWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebhookWhereInput | WebhookWhereInput[]
    OR?: WebhookWhereInput[]
    NOT?: WebhookWhereInput | WebhookWhereInput[]
    url?: StringFilter<"Webhook"> | string
    type?: EnumWebhookTypeFilter<"Webhook"> | $Enums.WebhookType
    createdAt?: BigIntFilter<"Webhook"> | bigint | number
    organizationId?: StringFilter<"Webhook"> | string
    data?: JsonFilter<"Webhook">
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }, "id">

  export type WebhookOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    organizationId?: SortOrder
    data?: SortOrder
    _count?: WebhookCountOrderByAggregateInput
    _avg?: WebhookAvgOrderByAggregateInput
    _max?: WebhookMaxOrderByAggregateInput
    _min?: WebhookMinOrderByAggregateInput
    _sum?: WebhookSumOrderByAggregateInput
  }

  export type WebhookScalarWhereWithAggregatesInput = {
    AND?: WebhookScalarWhereWithAggregatesInput | WebhookScalarWhereWithAggregatesInput[]
    OR?: WebhookScalarWhereWithAggregatesInput[]
    NOT?: WebhookScalarWhereWithAggregatesInput | WebhookScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Webhook"> | string
    url?: StringWithAggregatesFilter<"Webhook"> | string
    type?: EnumWebhookTypeWithAggregatesFilter<"Webhook"> | $Enums.WebhookType
    createdAt?: BigIntWithAggregatesFilter<"Webhook"> | bigint | number
    organizationId?: StringWithAggregatesFilter<"Webhook"> | string
    data?: JsonWithAggregatesFilter<"Webhook">
  }

  export type TemplateWhereInput = {
    AND?: TemplateWhereInput | TemplateWhereInput[]
    OR?: TemplateWhereInput[]
    NOT?: TemplateWhereInput | TemplateWhereInput[]
    id?: StringFilter<"Template"> | string
    html?: StringFilter<"Template"> | string
    name?: StringFilter<"Template"> | string
    createdAt?: BigIntFilter<"Template"> | bigint | number
    isEnabled?: BoolFilter<"Template"> | boolean
    updatedAt?: BigIntFilter<"Template"> | bigint | number
    deletedAt?: BigIntFilter<"Template"> | bigint | number
    userId?: StringNullableFilter<"Template"> | string | null
    orgId?: StringNullableFilter<"Template"> | string | null
    organization?: XOR<OrganizationNullableRelationFilter, OrganizationWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type TemplateOrderByWithRelationInput = {
    id?: SortOrder
    html?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    orgId?: SortOrderInput | SortOrder
    organization?: OrganizationOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type TemplateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TemplateWhereInput | TemplateWhereInput[]
    OR?: TemplateWhereInput[]
    NOT?: TemplateWhereInput | TemplateWhereInput[]
    html?: StringFilter<"Template"> | string
    name?: StringFilter<"Template"> | string
    createdAt?: BigIntFilter<"Template"> | bigint | number
    isEnabled?: BoolFilter<"Template"> | boolean
    updatedAt?: BigIntFilter<"Template"> | bigint | number
    deletedAt?: BigIntFilter<"Template"> | bigint | number
    userId?: StringNullableFilter<"Template"> | string | null
    orgId?: StringNullableFilter<"Template"> | string | null
    organization?: XOR<OrganizationNullableRelationFilter, OrganizationWhereInput> | null
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type TemplateOrderByWithAggregationInput = {
    id?: SortOrder
    html?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    orgId?: SortOrderInput | SortOrder
    _count?: TemplateCountOrderByAggregateInput
    _avg?: TemplateAvgOrderByAggregateInput
    _max?: TemplateMaxOrderByAggregateInput
    _min?: TemplateMinOrderByAggregateInput
    _sum?: TemplateSumOrderByAggregateInput
  }

  export type TemplateScalarWhereWithAggregatesInput = {
    AND?: TemplateScalarWhereWithAggregatesInput | TemplateScalarWhereWithAggregatesInput[]
    OR?: TemplateScalarWhereWithAggregatesInput[]
    NOT?: TemplateScalarWhereWithAggregatesInput | TemplateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Template"> | string
    html?: StringWithAggregatesFilter<"Template"> | string
    name?: StringWithAggregatesFilter<"Template"> | string
    createdAt?: BigIntWithAggregatesFilter<"Template"> | bigint | number
    isEnabled?: BoolWithAggregatesFilter<"Template"> | boolean
    updatedAt?: BigIntWithAggregatesFilter<"Template"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"Template"> | bigint | number
    userId?: StringNullableWithAggregatesFilter<"Template"> | string | null
    orgId?: StringNullableWithAggregatesFilter<"Template"> | string | null
  }

  export type LeadStatusWhereInput = {
    AND?: LeadStatusWhereInput | LeadStatusWhereInput[]
    OR?: LeadStatusWhereInput[]
    NOT?: LeadStatusWhereInput | LeadStatusWhereInput[]
    id?: StringFilter<"LeadStatus"> | string
    status?: StringFilter<"LeadStatus"> | string
    createdAt?: BigIntFilter<"LeadStatus"> | bigint | number
    updatedAt?: BigIntFilter<"LeadStatus"> | bigint | number
    deletedAt?: BigIntFilter<"LeadStatus"> | bigint | number
    organizationId?: StringFilter<"LeadStatus"> | string
    Lead?: LeadListRelationFilter
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type LeadStatusOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
    Lead?: LeadOrderByRelationAggregateInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type LeadStatusWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LeadStatusWhereInput | LeadStatusWhereInput[]
    OR?: LeadStatusWhereInput[]
    NOT?: LeadStatusWhereInput | LeadStatusWhereInput[]
    status?: StringFilter<"LeadStatus"> | string
    createdAt?: BigIntFilter<"LeadStatus"> | bigint | number
    updatedAt?: BigIntFilter<"LeadStatus"> | bigint | number
    deletedAt?: BigIntFilter<"LeadStatus"> | bigint | number
    organizationId?: StringFilter<"LeadStatus"> | string
    Lead?: LeadListRelationFilter
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }, "id">

  export type LeadStatusOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
    _count?: LeadStatusCountOrderByAggregateInput
    _avg?: LeadStatusAvgOrderByAggregateInput
    _max?: LeadStatusMaxOrderByAggregateInput
    _min?: LeadStatusMinOrderByAggregateInput
    _sum?: LeadStatusSumOrderByAggregateInput
  }

  export type LeadStatusScalarWhereWithAggregatesInput = {
    AND?: LeadStatusScalarWhereWithAggregatesInput | LeadStatusScalarWhereWithAggregatesInput[]
    OR?: LeadStatusScalarWhereWithAggregatesInput[]
    NOT?: LeadStatusScalarWhereWithAggregatesInput | LeadStatusScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"LeadStatus"> | string
    status?: StringWithAggregatesFilter<"LeadStatus"> | string
    createdAt?: BigIntWithAggregatesFilter<"LeadStatus"> | bigint | number
    updatedAt?: BigIntWithAggregatesFilter<"LeadStatus"> | bigint | number
    deletedAt?: BigIntWithAggregatesFilter<"LeadStatus"> | bigint | number
    organizationId?: StringWithAggregatesFilter<"LeadStatus"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityCreateNestedManyWithoutUserInput
    orgMembers?: OrgMemberCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteCreateNestedManyWithoutInviterInput
    templates?: TemplateCreateNestedManyWithoutUserInput
    LeadNotes?: LeadNotesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutUserInput
    orgMembers?: OrgMemberUncheckedCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteUncheckedCreateNestedManyWithoutInviterInput
    templates?: TemplateUncheckedCreateNestedManyWithoutUserInput
    LeadNotes?: LeadNotesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUpdateManyWithoutUserNestedInput
    orgMembers?: OrgMemberUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUpdateManyWithoutInviterNestedInput
    templates?: TemplateUpdateManyWithoutUserNestedInput
    LeadNotes?: LeadNotesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutUserNestedInput
    orgMembers?: OrgMemberUncheckedUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUncheckedUpdateManyWithoutInviterNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutUserNestedInput
    LeadNotes?: LeadNotesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OrgMemberInviteCreateInput = {
    id?: string
    token: string
    email: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    inviter: UserCreateNestedOneWithoutOrgMemberInvitesInput
    organization: OrganizationCreateNestedOneWithoutInvitesInput
  }

  export type OrgMemberInviteUncheckedCreateInput = {
    id?: string
    token: string
    email: string
    role?: $Enums.OrgMemberRole
    organizationId: string
    inviterId: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type OrgMemberInviteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    inviter?: UserUpdateOneRequiredWithoutOrgMemberInvitesNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type OrgMemberInviteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    organizationId?: StringFieldUpdateOperationsInput | string
    inviterId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OrgMemberInviteCreateManyInput = {
    id?: string
    token: string
    email: string
    role?: $Enums.OrgMemberRole
    organizationId: string
    inviterId: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type OrgMemberInviteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OrgMemberInviteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    organizationId?: StringFieldUpdateOperationsInput | string
    inviterId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OrgMemberCreateInput = {
    id?: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutOrgMembersInput
    Integration?: IntegrationCreateNestedManyWithoutMembersInput
  }

  export type OrgMemberUncheckedCreateInput = {
    id?: string
    organizationId: string
    userId: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
    Integration?: IntegrationUncheckedCreateNestedManyWithoutMembersInput
  }

  export type OrgMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutOrgMembersNestedInput
    Integration?: IntegrationUpdateManyWithoutMembersNestedInput
  }

  export type OrgMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    Integration?: IntegrationUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type OrgMemberCreateManyInput = {
    id?: string
    organizationId: string
    userId: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
  }

  export type OrgMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
  }

  export type OrgMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    organization: OrganizationCreateNestedOneWithoutProjectInput
    leadProject?: LeadProjectCreateNestedManyWithoutProjectInput
    integration: IntegrationCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    organizationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    integrationId: string
    leadProject?: LeadProjectUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    organization?: OrganizationUpdateOneRequiredWithoutProjectNestedInput
    leadProject?: LeadProjectUpdateManyWithoutProjectNestedInput
    integration?: IntegrationUpdateOneRequiredWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    integrationId?: StringFieldUpdateOperationsInput | string
    leadProject?: LeadProjectUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    organizationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    integrationId: string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    integrationId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadNotesCreateInput = {
    id?: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    lead: LeadCreateNestedOneWithoutLeadNotesInput
    user: UserCreateNestedOneWithoutLeadNotesInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutNoteInput
  }

  export type LeadNotesUncheckedCreateInput = {
    id?: string
    leadId: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    userId: string
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutNoteInput
  }

  export type LeadNotesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    lead?: LeadUpdateOneRequiredWithoutLeadNotesNestedInput
    user?: UserUpdateOneRequiredWithoutLeadNotesNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutNoteNestedInput
  }

  export type LeadNotesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: StringFieldUpdateOperationsInput | string
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type LeadNotesCreateManyInput = {
    id?: string
    leadId: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    userId: string
  }

  export type LeadNotesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LeadNotesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadCreateInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: LeadStatusCreateNestedOneWithoutLeadInput
    Project?: LeadProjectCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesCreateNestedManyWithoutLeadInput
    contacts?: ContactCreateNestedManyWithoutLeadInput
    attachments?: AttachmentCreateNestedManyWithoutLeadInput
    organization: OrganizationCreateNestedOneWithoutLeadInput
    integration?: IntegrationCreateNestedOneWithoutLeadInput
    Email?: EmailCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
    Project?: LeadProjectUncheckedCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityUncheckedCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesUncheckedCreateNestedManyWithoutLeadInput
    contacts?: ContactUncheckedCreateNestedManyWithoutLeadInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutLeadInput
    Email?: EmailUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: LeadStatusUpdateOneWithoutLeadNestedInput
    Project?: LeadProjectUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUpdateManyWithoutLeadNestedInput
    contacts?: ContactUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUpdateManyWithoutLeadNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadNestedInput
    integration?: IntegrationUpdateOneWithoutLeadNestedInput
    Email?: EmailUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    Project?: LeadProjectUncheckedUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUncheckedUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUncheckedUpdateManyWithoutLeadNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutLeadNestedInput
    Email?: EmailUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type LeadCreateManyInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
  }

  export type LeadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LeadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadProjectCreateInput = {
    id?: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
    integration: IntegrationCreateNestedOneWithoutLeadProjectInput
    lead: LeadCreateNestedOneWithoutProjectInput
    project: ProjectCreateNestedOneWithoutLeadProjectInput
    organizatioon: OrganizationCreateNestedOneWithoutLeadProjectInput
  }

  export type LeadProjectUncheckedCreateInput = {
    id?: string
    leadId: string
    projectId: string
    integrationId: string
    orgId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type LeadProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: IntegrationUpdateOneRequiredWithoutLeadProjectNestedInput
    lead?: LeadUpdateOneRequiredWithoutProjectNestedInput
    project?: ProjectUpdateOneRequiredWithoutLeadProjectNestedInput
    organizatioon?: OrganizationUpdateOneRequiredWithoutLeadProjectNestedInput
  }

  export type LeadProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadProjectCreateManyInput = {
    id?: string
    leadId: string
    projectId: string
    integrationId: string
    orgId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type LeadProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactCreateInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    isPrimay?: boolean
    isUnsubscribed?: boolean
    organization: OrganizationCreateNestedOneWithoutContactInput
    lead: LeadCreateNestedOneWithoutContactsInput
    Email?: EmailCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    leadId: string
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organizationId: string
    isPrimay?: boolean
    isUnsubscribed?: boolean
    Email?: EmailUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutContactNestedInput
    lead?: LeadUpdateOneRequiredWithoutContactsNestedInput
    Email?: EmailUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    leadId?: StringFieldUpdateOperationsInput | string
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
    Email?: EmailUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ContactCreateManyInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    leadId: string
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organizationId: string
    isPrimay?: boolean
    isUnsubscribed?: boolean
  }

  export type ContactUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ContactUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    leadId?: StringFieldUpdateOperationsInput | string
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttachmentCreateInput = {
    id?: string
    attachmentUrl: string
    attachmentType: string
    eTag: string
    attachmentName: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    lead: LeadCreateNestedOneWithoutAttachmentsInput
  }

  export type AttachmentUncheckedCreateInput = {
    id?: string
    attachmentUrl: string
    attachmentType: string
    eTag: string
    attachmentName: string
    leadId: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type AttachmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: StringFieldUpdateOperationsInput | string
    attachmentType?: StringFieldUpdateOperationsInput | string
    eTag?: StringFieldUpdateOperationsInput | string
    attachmentName?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    lead?: LeadUpdateOneRequiredWithoutAttachmentsNestedInput
  }

  export type AttachmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: StringFieldUpdateOperationsInput | string
    attachmentType?: StringFieldUpdateOperationsInput | string
    eTag?: StringFieldUpdateOperationsInput | string
    attachmentName?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type AttachmentCreateManyInput = {
    id?: string
    attachmentUrl: string
    attachmentType: string
    eTag: string
    attachmentName: string
    leadId: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type AttachmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: StringFieldUpdateOperationsInput | string
    attachmentType?: StringFieldUpdateOperationsInput | string
    eTag?: StringFieldUpdateOperationsInput | string
    attachmentName?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type AttachmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: StringFieldUpdateOperationsInput | string
    attachmentType?: StringFieldUpdateOperationsInput | string
    eTag?: StringFieldUpdateOperationsInput | string
    attachmentName?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LeadActivityCreateInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    type: $Enums.LeadActivityType
    organization: OrganizationCreateNestedOneWithoutLeadActivityInput
    lead: LeadCreateNestedOneWithoutLeadActivitiesInput
    user?: UserCreateNestedOneWithoutLeadActivityInput
    note?: LeadNotesCreateNestedOneWithoutLeadActivityInput
  }

  export type LeadActivityUncheckedCreateInput = {
    id?: string
    leadId: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    noteId?: string | null
    type: $Enums.LeadActivityType
    orgId: string
  }

  export type LeadActivityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    organization?: OrganizationUpdateOneRequiredWithoutLeadActivityNestedInput
    lead?: LeadUpdateOneRequiredWithoutLeadActivitiesNestedInput
    user?: UserUpdateOneWithoutLeadActivityNestedInput
    note?: LeadNotesUpdateOneWithoutLeadActivityNestedInput
  }

  export type LeadActivityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    orgId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadActivityCreateManyInput = {
    id?: string
    leadId: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    noteId?: string | null
    type: $Enums.LeadActivityType
    orgId: string
  }

  export type LeadActivityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
  }

  export type LeadActivityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    orgId?: StringFieldUpdateOperationsInput | string
  }

  export type EmailCreateInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    source: $Enums.IntegrationType
    contact?: ContactCreateNestedOneWithoutEmailInput
    lead?: LeadCreateNestedOneWithoutEmailInput
    organization: OrganizationCreateNestedOneWithoutEmailInput
    EmailQueue?: EmailQueueCreateNestedManyWithoutEmailInput
  }

  export type EmailUncheckedCreateInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    organizationId: string
    leadId?: string | null
    contactId?: string | null
    source: $Enums.IntegrationType
    EmailQueue?: EmailQueueUncheckedCreateNestedManyWithoutEmailInput
  }

  export type EmailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    contact?: ContactUpdateOneWithoutEmailNestedInput
    lead?: LeadUpdateOneWithoutEmailNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutEmailNestedInput
    EmailQueue?: EmailQueueUpdateManyWithoutEmailNestedInput
  }

  export type EmailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    EmailQueue?: EmailQueueUncheckedUpdateManyWithoutEmailNestedInput
  }

  export type EmailCreateManyInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    organizationId: string
    leadId?: string | null
    contactId?: string | null
    source: $Enums.IntegrationType
  }

  export type EmailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
  }

  export type EmailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
  }

  export type EmailQueueCreateInput = {
    id?: string
    scheduledAt: bigint | number
    status: $Enums.QueueStatus
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    email: EmailCreateNestedOneWithoutEmailQueueInput
  }

  export type EmailQueueUncheckedCreateInput = {
    id?: string
    emailId: string
    scheduledAt: bigint | number
    status: $Enums.QueueStatus
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailQueueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: EnumQueueStatusFieldUpdateOperationsInput | $Enums.QueueStatus
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: EmailUpdateOneRequiredWithoutEmailQueueNestedInput
  }

  export type EmailQueueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: EnumQueueStatusFieldUpdateOperationsInput | $Enums.QueueStatus
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailQueueCreateManyInput = {
    id?: string
    emailId: string
    scheduledAt: bigint | number
    status: $Enums.QueueStatus
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailQueueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: EnumQueueStatusFieldUpdateOperationsInput | $Enums.QueueStatus
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailQueueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    emailId?: StringFieldUpdateOperationsInput | string
    scheduledAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: EnumQueueStatusFieldUpdateOperationsInput | $Enums.QueueStatus
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntegrationCreateInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    members?: OrgMemberCreateNestedOneWithoutIntegrationInput
    Project?: ProjectCreateNestedManyWithoutIntegrationInput
    organization: OrganizationCreateNestedOneWithoutIntegrationsInput
    Lead?: LeadCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutIntegrationInput
    Jobs?: JobCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    orgMemberId?: string | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    Project?: ProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Jobs?: JobUncheckedCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    members?: OrgMemberUpdateOneWithoutIntegrationNestedInput
    Project?: ProjectUpdateManyWithoutIntegrationNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput
    Lead?: LeadUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orgMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    Project?: ProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUncheckedUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    orgMemberId?: string | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
  }

  export type IntegrationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
  }

  export type IntegrationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orgMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
  }

  export type MailServiceFromEmailCreateInput = {
    id?: string
    fromName: string
    fromEmail: string
    replyTo?: string | null
    type: $Enums.IntegrationType
    createdAt?: bigint | number
    updatedAt?: bigint | number
    integration: IntegrationCreateNestedOneWithoutMailServiceFromEmailInput
    organization: OrganizationCreateNestedOneWithoutMailServiceFromEmailInput
  }

  export type MailServiceFromEmailUncheckedCreateInput = {
    id?: string
    fromName: string
    fromEmail: string
    replyTo?: string | null
    type: $Enums.IntegrationType
    integrationId: string
    organizationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type MailServiceFromEmailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integration?: IntegrationUpdateOneRequiredWithoutMailServiceFromEmailNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutMailServiceFromEmailNestedInput
  }

  export type MailServiceFromEmailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MailServiceFromEmailCreateManyInput = {
    id?: string
    fromName: string
    fromEmail: string
    replyTo?: string | null
    type: $Enums.IntegrationType
    integrationId: string
    organizationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type MailServiceFromEmailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MailServiceFromEmailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type UnsubscribeLinkCreateInput = {
    id?: string
    name: string
    message?: string | null
    anchorText: string
    isActive?: boolean
    organization: OrganizationCreateNestedOneWithoutUnsubscribeLinkInput
  }

  export type UnsubscribeLinkUncheckedCreateInput = {
    id?: string
    name: string
    message?: string | null
    anchorText: string
    isActive?: boolean
    organizationId: string
  }

  export type UnsubscribeLinkUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    anchorText?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutUnsubscribeLinkNestedInput
  }

  export type UnsubscribeLinkUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    anchorText?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type UnsubscribeLinkCreateManyInput = {
    id?: string
    name: string
    message?: string | null
    anchorText: string
    isActive?: boolean
    organizationId: string
  }

  export type UnsubscribeLinkUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    anchorText?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UnsubscribeLinkUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    anchorText?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type JobCreateInput = {
    id?: string
    name: string
    status: $Enums.JobStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
    organizationId: string
    integration: IntegrationCreateNestedOneWithoutJobsInput
    tasks?: TaskCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateInput = {
    id?: string
    name: string
    status: $Enums.JobStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
    integrationId: string
    organizationId: string
    tasks?: TaskUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    integration?: IntegrationUpdateOneRequiredWithoutJobsNestedInput
    tasks?: TaskUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobCreateManyInput = {
    id?: string
    name: string
    status: $Enums.JobStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
    integrationId: string
    organizationId: string
  }

  export type JobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type TaskCreateInput = {
    id?: string
    name: string
    status: $Enums.TaskStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
    job: JobCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    jobId: string
    name: string
    status: $Enums.TaskStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    job?: JobUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TaskCreateManyInput = {
    id?: string
    jobId: string
    name: string
    status: $Enums.TaskStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    jobId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type WebhookCreateInput = {
    id?: string
    url: string
    type: $Enums.WebhookType
    createdAt?: bigint | number
    data: JsonNullValueInput | InputJsonValue
    organization: OrganizationCreateNestedOneWithoutWebhooksInput
  }

  export type WebhookUncheckedCreateInput = {
    id?: string
    url: string
    type: $Enums.WebhookType
    createdAt?: bigint | number
    organizationId: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type WebhookUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumWebhookTypeFieldUpdateOperationsInput | $Enums.WebhookType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    data?: JsonNullValueInput | InputJsonValue
    organization?: OrganizationUpdateOneRequiredWithoutWebhooksNestedInput
  }

  export type WebhookUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumWebhookTypeFieldUpdateOperationsInput | $Enums.WebhookType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type WebhookCreateManyInput = {
    id?: string
    url: string
    type: $Enums.WebhookType
    createdAt?: bigint | number
    organizationId: string
    data: JsonNullValueInput | InputJsonValue
  }

  export type WebhookUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumWebhookTypeFieldUpdateOperationsInput | $Enums.WebhookType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    data?: JsonNullValueInput | InputJsonValue
  }

  export type WebhookUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumWebhookTypeFieldUpdateOperationsInput | $Enums.WebhookType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
  }

  export type TemplateCreateInput = {
    id?: string
    html: string
    name: string
    createdAt: bigint | number
    isEnabled: boolean
    updatedAt: bigint | number
    deletedAt: bigint | number
    organization?: OrganizationCreateNestedOneWithoutTemplateInput
    user?: UserCreateNestedOneWithoutTemplatesInput
  }

  export type TemplateUncheckedCreateInput = {
    id?: string
    html: string
    name: string
    createdAt: bigint | number
    isEnabled: boolean
    updatedAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    orgId?: string | null
  }

  export type TemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organization?: OrganizationUpdateOneWithoutTemplateNestedInput
    user?: UserUpdateOneWithoutTemplatesNestedInput
  }

  export type TemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    orgId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TemplateCreateManyInput = {
    id?: string
    html: string
    name: string
    createdAt: bigint | number
    isEnabled: boolean
    updatedAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    orgId?: string | null
  }

  export type TemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    orgId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadStatusCreateInput = {
    id?: string
    status: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    Lead?: LeadCreateNestedManyWithoutStatusInput
    organization: OrganizationCreateNestedOneWithoutLeadStatusInput
  }

  export type LeadStatusUncheckedCreateInput = {
    id?: string
    status: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organizationId: string
    Lead?: LeadUncheckedCreateNestedManyWithoutStatusInput
  }

  export type LeadStatusUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Lead?: LeadUpdateManyWithoutStatusNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadStatusNestedInput
  }

  export type LeadStatusUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    Lead?: LeadUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type LeadStatusCreateManyInput = {
    id?: string
    status: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organizationId: string
  }

  export type LeadStatusUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LeadStatusUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumAuthenticationMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthenticationMethod | EnumAuthenticationMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthenticationMethod[] | ListEnumAuthenticationMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthenticationMethod[] | ListEnumAuthenticationMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthenticationMethodFilter<$PrismaModel> | $Enums.AuthenticationMethod
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type LeadActivityListRelationFilter = {
    every?: LeadActivityWhereInput
    some?: LeadActivityWhereInput
    none?: LeadActivityWhereInput
  }

  export type OrgMemberListRelationFilter = {
    every?: OrgMemberWhereInput
    some?: OrgMemberWhereInput
    none?: OrgMemberWhereInput
  }

  export type OrgMemberInviteListRelationFilter = {
    every?: OrgMemberInviteWhereInput
    some?: OrgMemberInviteWhereInput
    none?: OrgMemberInviteWhereInput
  }

  export type TemplateListRelationFilter = {
    every?: TemplateWhereInput
    some?: TemplateWhereInput
    none?: TemplateWhereInput
  }

  export type LeadNotesListRelationFilter = {
    every?: LeadNotesWhereInput
    some?: LeadNotesWhereInput
    none?: LeadNotesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type LeadActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrgMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrgMemberInviteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadNotesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    authenticationMethod?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    authenticationMethod?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    authenticationMethod?: SortOrder
    name?: SortOrder
    avatarUrl?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumAuthenticationMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthenticationMethod | EnumAuthenticationMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthenticationMethod[] | ListEnumAuthenticationMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthenticationMethod[] | ListEnumAuthenticationMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthenticationMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthenticationMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthenticationMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthenticationMethodFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type EnumOrgMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgMemberRole | EnumOrgMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgMemberRole[] | ListEnumOrgMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgMemberRole[] | ListEnumOrgMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgMemberRoleFilter<$PrismaModel> | $Enums.OrgMemberRole
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type OrganizationRelationFilter = {
    is?: OrganizationWhereInput
    isNot?: OrganizationWhereInput
  }

  export type OrgMemberInviteOrganizationIdEmailCompoundUniqueInput = {
    organizationId: string
    email: string
  }

  export type OrgMemberInviteCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    role?: SortOrder
    organizationId?: SortOrder
    inviterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrgMemberInviteAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrgMemberInviteMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    role?: SortOrder
    organizationId?: SortOrder
    inviterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrgMemberInviteMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    email?: SortOrder
    role?: SortOrder
    organizationId?: SortOrder
    inviterId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrgMemberInviteSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumOrgMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgMemberRole | EnumOrgMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgMemberRole[] | ListEnumOrgMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgMemberRole[] | ListEnumOrgMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.OrgMemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrgMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumOrgMemberRoleFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type IntegrationListRelationFilter = {
    every?: IntegrationWhereInput
    some?: IntegrationWhereInput
    none?: IntegrationWhereInput
  }

  export type LeadListRelationFilter = {
    every?: LeadWhereInput
    some?: LeadWhereInput
    none?: LeadWhereInput
  }

  export type ContactListRelationFilter = {
    every?: ContactWhereInput
    some?: ContactWhereInput
    none?: ContactWhereInput
  }

  export type LeadStatusListRelationFilter = {
    every?: LeadStatusWhereInput
    some?: LeadStatusWhereInput
    none?: LeadStatusWhereInput
  }

  export type WebhookListRelationFilter = {
    every?: WebhookWhereInput
    some?: WebhookWhereInput
    none?: WebhookWhereInput
  }

  export type EmailListRelationFilter = {
    every?: EmailWhereInput
    some?: EmailWhereInput
    none?: EmailWhereInput
  }

  export type MailServiceFromEmailListRelationFilter = {
    every?: MailServiceFromEmailWhereInput
    some?: MailServiceFromEmailWhereInput
    none?: MailServiceFromEmailWhereInput
  }

  export type LeadProjectListRelationFilter = {
    every?: LeadProjectWhereInput
    some?: LeadProjectWhereInput
    none?: LeadProjectWhereInput
  }

  export type UnsubscribeLinkListRelationFilter = {
    every?: UnsubscribeLinkWhereInput
    some?: UnsubscribeLinkWhereInput
    none?: UnsubscribeLinkWhereInput
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntegrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ContactOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadStatusOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebhookOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MailServiceFromEmailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UnsubscribeLinkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    details?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrganizationSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type OrgMemberOrganizationIdUserIdCompoundUniqueInput = {
    organizationId: string
    userId: string
  }

  export type OrgMemberCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    signature?: SortOrder
  }

  export type OrgMemberAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type OrgMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    signature?: SortOrder
  }

  export type OrgMemberMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    signature?: SortOrder
  }

  export type OrgMemberSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type IntegrationRelationFilter = {
    is?: IntegrationWhereInput
    isNot?: IntegrationWhereInput
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    data?: SortOrder
    cliAccessToken?: SortOrder
    isSynced?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    cliAccessToken?: SortOrder
    isSynced?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    type?: SortOrder
    cliAccessToken?: SortOrder
    isSynced?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type LeadRelationFilter = {
    is?: LeadWhereInput
    isNot?: LeadWhereInput
  }

  export type LeadNotesCountOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
  }

  export type LeadNotesAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeadNotesMaxOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
  }

  export type LeadNotesMinOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    data?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
  }

  export type LeadNotesSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeadStatusNullableRelationFilter = {
    is?: LeadStatusWhereInput | null
    isNot?: LeadStatusWhereInput | null
  }

  export type AttachmentListRelationFilter = {
    every?: AttachmentWhereInput
    some?: AttachmentWhereInput
    none?: AttachmentWhereInput
  }

  export type IntegrationNullableRelationFilter = {
    is?: IntegrationWhereInput | null
    isNot?: IntegrationWhereInput | null
  }

  export type AttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeadCountOrderByAggregateInput = {
    id?: SortOrder
    shopifyDomain?: SortOrder
    shopifyStoreId?: SortOrder
    statusId?: SortOrder
    leadSource?: SortOrder
    shopDetails?: SortOrder
    industry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
  }

  export type LeadAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeadMaxOrderByAggregateInput = {
    id?: SortOrder
    shopifyDomain?: SortOrder
    shopifyStoreId?: SortOrder
    statusId?: SortOrder
    leadSource?: SortOrder
    industry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
  }

  export type LeadMinOrderByAggregateInput = {
    id?: SortOrder
    shopifyDomain?: SortOrder
    shopifyStoreId?: SortOrder
    statusId?: SortOrder
    leadSource?: SortOrder
    industry?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
  }

  export type LeadSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type LeadProjectProjectIdLeadIdCompoundUniqueInput = {
    projectId: string
    leadId: string
  }

  export type LeadProjectCountOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    projectId?: SortOrder
    integrationId?: SortOrder
    orgId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    status?: SortOrder
  }

  export type LeadProjectAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeadProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    projectId?: SortOrder
    integrationId?: SortOrder
    orgId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    status?: SortOrder
  }

  export type LeadProjectMinOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    projectId?: SortOrder
    integrationId?: SortOrder
    orgId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    status?: SortOrder
  }

  export type LeadProjectSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ContactCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    suffix?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    email?: SortOrder
    secondaryEmail?: SortOrder
    primaryPhNo?: SortOrder
    secondaryPhNo?: SortOrder
    industry?: SortOrder
    type?: SortOrder
    leadId?: SortOrder
    lastContacted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
    isPrimay?: SortOrder
    isUnsubscribed?: SortOrder
  }

  export type ContactAvgOrderByAggregateInput = {
    lastContacted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type ContactMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    suffix?: SortOrder
    name?: SortOrder
    email?: SortOrder
    secondaryEmail?: SortOrder
    industry?: SortOrder
    type?: SortOrder
    leadId?: SortOrder
    lastContacted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
    isPrimay?: SortOrder
    isUnsubscribed?: SortOrder
  }

  export type ContactMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    suffix?: SortOrder
    name?: SortOrder
    email?: SortOrder
    secondaryEmail?: SortOrder
    industry?: SortOrder
    type?: SortOrder
    leadId?: SortOrder
    lastContacted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
    isPrimay?: SortOrder
    isUnsubscribed?: SortOrder
  }

  export type ContactSumOrderByAggregateInput = {
    lastContacted?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AttachmentCountOrderByAggregateInput = {
    id?: SortOrder
    attachmentUrl?: SortOrder
    attachmentType?: SortOrder
    eTag?: SortOrder
    attachmentName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AttachmentAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AttachmentMaxOrderByAggregateInput = {
    id?: SortOrder
    attachmentUrl?: SortOrder
    attachmentType?: SortOrder
    eTag?: SortOrder
    attachmentName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AttachmentMinOrderByAggregateInput = {
    id?: SortOrder
    attachmentUrl?: SortOrder
    attachmentType?: SortOrder
    eTag?: SortOrder
    attachmentName?: SortOrder
    leadId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type AttachmentSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumLeadActivityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LeadActivityType | EnumLeadActivityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LeadActivityType[] | ListEnumLeadActivityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeadActivityType[] | ListEnumLeadActivityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLeadActivityTypeFilter<$PrismaModel> | $Enums.LeadActivityType
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type LeadNotesNullableRelationFilter = {
    is?: LeadNotesWhereInput | null
    isNot?: LeadNotesWhereInput | null
  }

  export type LeadActivityCountOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    data?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    noteId?: SortOrder
    type?: SortOrder
    orgId?: SortOrder
  }

  export type LeadActivityAvgOrderByAggregateInput = {
    updatedAt?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeadActivityMaxOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    noteId?: SortOrder
    type?: SortOrder
    orgId?: SortOrder
  }

  export type LeadActivityMinOrderByAggregateInput = {
    id?: SortOrder
    leadId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    noteId?: SortOrder
    type?: SortOrder
    orgId?: SortOrder
  }

  export type LeadActivitySumOrderByAggregateInput = {
    updatedAt?: SortOrder
    createdAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumLeadActivityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeadActivityType | EnumLeadActivityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LeadActivityType[] | ListEnumLeadActivityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeadActivityType[] | ListEnumLeadActivityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLeadActivityTypeWithAggregatesFilter<$PrismaModel> | $Enums.LeadActivityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeadActivityTypeFilter<$PrismaModel>
    _max?: NestedEnumLeadActivityTypeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumEmailStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusFilter<$PrismaModel> | $Enums.EmailStatus
  }

  export type EnumIntegrationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationType | EnumIntegrationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationType[] | ListEnumIntegrationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationType[] | ListEnumIntegrationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationTypeFilter<$PrismaModel> | $Enums.IntegrationType
  }

  export type ContactNullableRelationFilter = {
    is?: ContactWhereInput | null
    isNot?: ContactWhereInput | null
  }

  export type LeadNullableRelationFilter = {
    is?: LeadWhereInput | null
    isNot?: LeadWhereInput | null
  }

  export type EmailQueueListRelationFilter = {
    every?: EmailQueueWhereInput
    some?: EmailQueueWhereInput
    none?: EmailQueueWhereInput
  }

  export type EmailQueueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailCountOrderByAggregateInput = {
    id?: SortOrder
    from?: SortOrder
    to?: SortOrder
    replyTo?: SortOrder
    cc?: SortOrder
    bcc?: SortOrder
    status?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    html?: SortOrder
    trackingId?: SortOrder
    messageId?: SortOrder
    threadId?: SortOrder
    historyId?: SortOrder
    labelIds?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrder
    isClicked?: SortOrder
    clickedAt?: SortOrder
    sentAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    leadId?: SortOrder
    contactId?: SortOrder
    source?: SortOrder
  }

  export type EmailAvgOrderByAggregateInput = {
    openedAt?: SortOrder
    clickedAt?: SortOrder
    sentAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EmailMaxOrderByAggregateInput = {
    id?: SortOrder
    replyTo?: SortOrder
    status?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    html?: SortOrder
    trackingId?: SortOrder
    messageId?: SortOrder
    threadId?: SortOrder
    historyId?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrder
    isClicked?: SortOrder
    clickedAt?: SortOrder
    sentAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    leadId?: SortOrder
    contactId?: SortOrder
    source?: SortOrder
  }

  export type EmailMinOrderByAggregateInput = {
    id?: SortOrder
    replyTo?: SortOrder
    status?: SortOrder
    subject?: SortOrder
    body?: SortOrder
    html?: SortOrder
    trackingId?: SortOrder
    messageId?: SortOrder
    threadId?: SortOrder
    historyId?: SortOrder
    isOpened?: SortOrder
    openedAt?: SortOrder
    isClicked?: SortOrder
    clickedAt?: SortOrder
    sentAt?: SortOrder
    deletedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    leadId?: SortOrder
    contactId?: SortOrder
    source?: SortOrder
  }

  export type EmailSumOrderByAggregateInput = {
    openedAt?: SortOrder
    clickedAt?: SortOrder
    sentAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumEmailStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmailStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmailStatusFilter<$PrismaModel>
    _max?: NestedEnumEmailStatusFilter<$PrismaModel>
  }

  export type EnumIntegrationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationType | EnumIntegrationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationType[] | ListEnumIntegrationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationType[] | ListEnumIntegrationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationTypeWithAggregatesFilter<$PrismaModel> | $Enums.IntegrationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIntegrationTypeFilter<$PrismaModel>
    _max?: NestedEnumIntegrationTypeFilter<$PrismaModel>
  }

  export type EnumQueueStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QueueStatus | EnumQueueStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QueueStatus[] | ListEnumQueueStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QueueStatus[] | ListEnumQueueStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQueueStatusFilter<$PrismaModel> | $Enums.QueueStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EmailRelationFilter = {
    is?: EmailWhereInput
    isNot?: EmailWhereInput
  }

  export type EmailQueueCountOrderByAggregateInput = {
    id?: SortOrder
    emailId?: SortOrder
    scheduledAt?: SortOrder
    status?: SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailQueueAvgOrderByAggregateInput = {
    scheduledAt?: SortOrder
    retryCount?: SortOrder
  }

  export type EmailQueueMaxOrderByAggregateInput = {
    id?: SortOrder
    emailId?: SortOrder
    scheduledAt?: SortOrder
    status?: SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailQueueMinOrderByAggregateInput = {
    id?: SortOrder
    emailId?: SortOrder
    scheduledAt?: SortOrder
    status?: SortOrder
    retryCount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EmailQueueSumOrderByAggregateInput = {
    scheduledAt?: SortOrder
    retryCount?: SortOrder
  }

  export type EnumQueueStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QueueStatus | EnumQueueStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QueueStatus[] | ListEnumQueueStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QueueStatus[] | ListEnumQueueStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQueueStatusWithAggregatesFilter<$PrismaModel> | $Enums.QueueStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQueueStatusFilter<$PrismaModel>
    _max?: NestedEnumQueueStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumIntegrationCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationCategory | EnumIntegrationCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationCategory[] | ListEnumIntegrationCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationCategory[] | ListEnumIntegrationCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationCategoryFilter<$PrismaModel> | $Enums.IntegrationCategory
  }

  export type EnumIntegrationSharingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationSharingType | EnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationSharingType[] | ListEnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationSharingType[] | ListEnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationSharingTypeFilter<$PrismaModel> | $Enums.IntegrationSharingType
  }

  export type OrgMemberNullableRelationFilter = {
    is?: OrgMemberWhereInput | null
    isNot?: OrgMemberWhereInput | null
  }

  export type JobListRelationFilter = {
    every?: JobWhereInput
    some?: JobWhereInput
    none?: JobWhereInput
  }

  export type JobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntegrationCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    data?: SortOrder
    description?: SortOrder
    type?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    orgMemberId?: SortOrder
    isSingular?: SortOrder
    sharedType?: SortOrder
  }

  export type IntegrationAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type IntegrationMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    orgMemberId?: SortOrder
    isSingular?: SortOrder
    sharedType?: SortOrder
  }

  export type IntegrationMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    type?: SortOrder
    category?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    orgMemberId?: SortOrder
    isSingular?: SortOrder
    sharedType?: SortOrder
  }

  export type IntegrationSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type EnumIntegrationCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationCategory | EnumIntegrationCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationCategory[] | ListEnumIntegrationCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationCategory[] | ListEnumIntegrationCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationCategoryWithAggregatesFilter<$PrismaModel> | $Enums.IntegrationCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIntegrationCategoryFilter<$PrismaModel>
    _max?: NestedEnumIntegrationCategoryFilter<$PrismaModel>
  }

  export type EnumIntegrationSharingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationSharingType | EnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationSharingType[] | ListEnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationSharingType[] | ListEnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationSharingTypeWithAggregatesFilter<$PrismaModel> | $Enums.IntegrationSharingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIntegrationSharingTypeFilter<$PrismaModel>
    _max?: NestedEnumIntegrationSharingTypeFilter<$PrismaModel>
  }

  export type MailServiceFromEmailCountOrderByAggregateInput = {
    id?: SortOrder
    fromName?: SortOrder
    fromEmail?: SortOrder
    replyTo?: SortOrder
    type?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MailServiceFromEmailAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MailServiceFromEmailMaxOrderByAggregateInput = {
    id?: SortOrder
    fromName?: SortOrder
    fromEmail?: SortOrder
    replyTo?: SortOrder
    type?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MailServiceFromEmailMinOrderByAggregateInput = {
    id?: SortOrder
    fromName?: SortOrder
    fromEmail?: SortOrder
    replyTo?: SortOrder
    type?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MailServiceFromEmailSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UnsubscribeLinkCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    message?: SortOrder
    anchorText?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
  }

  export type UnsubscribeLinkMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    message?: SortOrder
    anchorText?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
  }

  export type UnsubscribeLinkMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    message?: SortOrder
    anchorText?: SortOrder
    isActive?: SortOrder
    organizationId?: SortOrder
  }

  export type EnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    integrationId?: SortOrder
    organizationId?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type JobRelationFilter = {
    is?: JobWhereInput
    isNot?: JobWhereInput
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    jobId?: SortOrder
    name?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type EnumWebhookTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WebhookType | EnumWebhookTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WebhookType[] | ListEnumWebhookTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WebhookType[] | ListEnumWebhookTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWebhookTypeFilter<$PrismaModel> | $Enums.WebhookType
  }

  export type WebhookCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    organizationId?: SortOrder
    data?: SortOrder
  }

  export type WebhookAvgOrderByAggregateInput = {
    createdAt?: SortOrder
  }

  export type WebhookMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    organizationId?: SortOrder
  }

  export type WebhookMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    createdAt?: SortOrder
    organizationId?: SortOrder
  }

  export type WebhookSumOrderByAggregateInput = {
    createdAt?: SortOrder
  }

  export type EnumWebhookTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WebhookType | EnumWebhookTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WebhookType[] | ListEnumWebhookTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WebhookType[] | ListEnumWebhookTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWebhookTypeWithAggregatesFilter<$PrismaModel> | $Enums.WebhookType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWebhookTypeFilter<$PrismaModel>
    _max?: NestedEnumWebhookTypeFilter<$PrismaModel>
  }

  export type OrganizationNullableRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type TemplateCountOrderByAggregateInput = {
    id?: SortOrder
    html?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    orgId?: SortOrder
  }

  export type TemplateAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type TemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    html?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    orgId?: SortOrder
  }

  export type TemplateMinOrderByAggregateInput = {
    id?: SortOrder
    html?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    isEnabled?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    userId?: SortOrder
    orgId?: SortOrder
  }

  export type TemplateSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeadStatusCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type LeadStatusAvgOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeadStatusMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type LeadStatusMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
    organizationId?: SortOrder
  }

  export type LeadStatusSumOrderByAggregateInput = {
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type LeadActivityCreateNestedManyWithoutUserInput = {
    create?: XOR<LeadActivityCreateWithoutUserInput, LeadActivityUncheckedCreateWithoutUserInput> | LeadActivityCreateWithoutUserInput[] | LeadActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutUserInput | LeadActivityCreateOrConnectWithoutUserInput[]
    createMany?: LeadActivityCreateManyUserInputEnvelope
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
  }

  export type OrgMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<OrgMemberCreateWithoutUserInput, OrgMemberUncheckedCreateWithoutUserInput> | OrgMemberCreateWithoutUserInput[] | OrgMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrgMemberCreateOrConnectWithoutUserInput | OrgMemberCreateOrConnectWithoutUserInput[]
    createMany?: OrgMemberCreateManyUserInputEnvelope
    connect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
  }

  export type OrgMemberInviteCreateNestedManyWithoutInviterInput = {
    create?: XOR<OrgMemberInviteCreateWithoutInviterInput, OrgMemberInviteUncheckedCreateWithoutInviterInput> | OrgMemberInviteCreateWithoutInviterInput[] | OrgMemberInviteUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: OrgMemberInviteCreateOrConnectWithoutInviterInput | OrgMemberInviteCreateOrConnectWithoutInviterInput[]
    createMany?: OrgMemberInviteCreateManyInviterInputEnvelope
    connect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
  }

  export type TemplateCreateNestedManyWithoutUserInput = {
    create?: XOR<TemplateCreateWithoutUserInput, TemplateUncheckedCreateWithoutUserInput> | TemplateCreateWithoutUserInput[] | TemplateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutUserInput | TemplateCreateOrConnectWithoutUserInput[]
    createMany?: TemplateCreateManyUserInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type LeadNotesCreateNestedManyWithoutUserInput = {
    create?: XOR<LeadNotesCreateWithoutUserInput, LeadNotesUncheckedCreateWithoutUserInput> | LeadNotesCreateWithoutUserInput[] | LeadNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadNotesCreateOrConnectWithoutUserInput | LeadNotesCreateOrConnectWithoutUserInput[]
    createMany?: LeadNotesCreateManyUserInputEnvelope
    connect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
  }

  export type LeadActivityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LeadActivityCreateWithoutUserInput, LeadActivityUncheckedCreateWithoutUserInput> | LeadActivityCreateWithoutUserInput[] | LeadActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutUserInput | LeadActivityCreateOrConnectWithoutUserInput[]
    createMany?: LeadActivityCreateManyUserInputEnvelope
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
  }

  export type OrgMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OrgMemberCreateWithoutUserInput, OrgMemberUncheckedCreateWithoutUserInput> | OrgMemberCreateWithoutUserInput[] | OrgMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrgMemberCreateOrConnectWithoutUserInput | OrgMemberCreateOrConnectWithoutUserInput[]
    createMany?: OrgMemberCreateManyUserInputEnvelope
    connect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
  }

  export type OrgMemberInviteUncheckedCreateNestedManyWithoutInviterInput = {
    create?: XOR<OrgMemberInviteCreateWithoutInviterInput, OrgMemberInviteUncheckedCreateWithoutInviterInput> | OrgMemberInviteCreateWithoutInviterInput[] | OrgMemberInviteUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: OrgMemberInviteCreateOrConnectWithoutInviterInput | OrgMemberInviteCreateOrConnectWithoutInviterInput[]
    createMany?: OrgMemberInviteCreateManyInviterInputEnvelope
    connect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
  }

  export type TemplateUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TemplateCreateWithoutUserInput, TemplateUncheckedCreateWithoutUserInput> | TemplateCreateWithoutUserInput[] | TemplateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutUserInput | TemplateCreateOrConnectWithoutUserInput[]
    createMany?: TemplateCreateManyUserInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type LeadNotesUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<LeadNotesCreateWithoutUserInput, LeadNotesUncheckedCreateWithoutUserInput> | LeadNotesCreateWithoutUserInput[] | LeadNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadNotesCreateOrConnectWithoutUserInput | LeadNotesCreateOrConnectWithoutUserInput[]
    createMany?: LeadNotesCreateManyUserInputEnvelope
    connect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumAuthenticationMethodFieldUpdateOperationsInput = {
    set?: $Enums.AuthenticationMethod
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type LeadActivityUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeadActivityCreateWithoutUserInput, LeadActivityUncheckedCreateWithoutUserInput> | LeadActivityCreateWithoutUserInput[] | LeadActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutUserInput | LeadActivityCreateOrConnectWithoutUserInput[]
    upsert?: LeadActivityUpsertWithWhereUniqueWithoutUserInput | LeadActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeadActivityCreateManyUserInputEnvelope
    set?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    disconnect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    delete?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    update?: LeadActivityUpdateWithWhereUniqueWithoutUserInput | LeadActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeadActivityUpdateManyWithWhereWithoutUserInput | LeadActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
  }

  export type OrgMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrgMemberCreateWithoutUserInput, OrgMemberUncheckedCreateWithoutUserInput> | OrgMemberCreateWithoutUserInput[] | OrgMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrgMemberCreateOrConnectWithoutUserInput | OrgMemberCreateOrConnectWithoutUserInput[]
    upsert?: OrgMemberUpsertWithWhereUniqueWithoutUserInput | OrgMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrgMemberCreateManyUserInputEnvelope
    set?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    disconnect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    delete?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    connect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    update?: OrgMemberUpdateWithWhereUniqueWithoutUserInput | OrgMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrgMemberUpdateManyWithWhereWithoutUserInput | OrgMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrgMemberScalarWhereInput | OrgMemberScalarWhereInput[]
  }

  export type OrgMemberInviteUpdateManyWithoutInviterNestedInput = {
    create?: XOR<OrgMemberInviteCreateWithoutInviterInput, OrgMemberInviteUncheckedCreateWithoutInviterInput> | OrgMemberInviteCreateWithoutInviterInput[] | OrgMemberInviteUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: OrgMemberInviteCreateOrConnectWithoutInviterInput | OrgMemberInviteCreateOrConnectWithoutInviterInput[]
    upsert?: OrgMemberInviteUpsertWithWhereUniqueWithoutInviterInput | OrgMemberInviteUpsertWithWhereUniqueWithoutInviterInput[]
    createMany?: OrgMemberInviteCreateManyInviterInputEnvelope
    set?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    disconnect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    delete?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    connect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    update?: OrgMemberInviteUpdateWithWhereUniqueWithoutInviterInput | OrgMemberInviteUpdateWithWhereUniqueWithoutInviterInput[]
    updateMany?: OrgMemberInviteUpdateManyWithWhereWithoutInviterInput | OrgMemberInviteUpdateManyWithWhereWithoutInviterInput[]
    deleteMany?: OrgMemberInviteScalarWhereInput | OrgMemberInviteScalarWhereInput[]
  }

  export type TemplateUpdateManyWithoutUserNestedInput = {
    create?: XOR<TemplateCreateWithoutUserInput, TemplateUncheckedCreateWithoutUserInput> | TemplateCreateWithoutUserInput[] | TemplateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutUserInput | TemplateCreateOrConnectWithoutUserInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutUserInput | TemplateUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TemplateCreateManyUserInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutUserInput | TemplateUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutUserInput | TemplateUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type LeadNotesUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeadNotesCreateWithoutUserInput, LeadNotesUncheckedCreateWithoutUserInput> | LeadNotesCreateWithoutUserInput[] | LeadNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadNotesCreateOrConnectWithoutUserInput | LeadNotesCreateOrConnectWithoutUserInput[]
    upsert?: LeadNotesUpsertWithWhereUniqueWithoutUserInput | LeadNotesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeadNotesCreateManyUserInputEnvelope
    set?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    disconnect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    delete?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    connect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    update?: LeadNotesUpdateWithWhereUniqueWithoutUserInput | LeadNotesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeadNotesUpdateManyWithWhereWithoutUserInput | LeadNotesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeadNotesScalarWhereInput | LeadNotesScalarWhereInput[]
  }

  export type LeadActivityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeadActivityCreateWithoutUserInput, LeadActivityUncheckedCreateWithoutUserInput> | LeadActivityCreateWithoutUserInput[] | LeadActivityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutUserInput | LeadActivityCreateOrConnectWithoutUserInput[]
    upsert?: LeadActivityUpsertWithWhereUniqueWithoutUserInput | LeadActivityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeadActivityCreateManyUserInputEnvelope
    set?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    disconnect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    delete?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    update?: LeadActivityUpdateWithWhereUniqueWithoutUserInput | LeadActivityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeadActivityUpdateManyWithWhereWithoutUserInput | LeadActivityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
  }

  export type OrgMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OrgMemberCreateWithoutUserInput, OrgMemberUncheckedCreateWithoutUserInput> | OrgMemberCreateWithoutUserInput[] | OrgMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OrgMemberCreateOrConnectWithoutUserInput | OrgMemberCreateOrConnectWithoutUserInput[]
    upsert?: OrgMemberUpsertWithWhereUniqueWithoutUserInput | OrgMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OrgMemberCreateManyUserInputEnvelope
    set?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    disconnect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    delete?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    connect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    update?: OrgMemberUpdateWithWhereUniqueWithoutUserInput | OrgMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OrgMemberUpdateManyWithWhereWithoutUserInput | OrgMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OrgMemberScalarWhereInput | OrgMemberScalarWhereInput[]
  }

  export type OrgMemberInviteUncheckedUpdateManyWithoutInviterNestedInput = {
    create?: XOR<OrgMemberInviteCreateWithoutInviterInput, OrgMemberInviteUncheckedCreateWithoutInviterInput> | OrgMemberInviteCreateWithoutInviterInput[] | OrgMemberInviteUncheckedCreateWithoutInviterInput[]
    connectOrCreate?: OrgMemberInviteCreateOrConnectWithoutInviterInput | OrgMemberInviteCreateOrConnectWithoutInviterInput[]
    upsert?: OrgMemberInviteUpsertWithWhereUniqueWithoutInviterInput | OrgMemberInviteUpsertWithWhereUniqueWithoutInviterInput[]
    createMany?: OrgMemberInviteCreateManyInviterInputEnvelope
    set?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    disconnect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    delete?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    connect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    update?: OrgMemberInviteUpdateWithWhereUniqueWithoutInviterInput | OrgMemberInviteUpdateWithWhereUniqueWithoutInviterInput[]
    updateMany?: OrgMemberInviteUpdateManyWithWhereWithoutInviterInput | OrgMemberInviteUpdateManyWithWhereWithoutInviterInput[]
    deleteMany?: OrgMemberInviteScalarWhereInput | OrgMemberInviteScalarWhereInput[]
  }

  export type TemplateUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TemplateCreateWithoutUserInput, TemplateUncheckedCreateWithoutUserInput> | TemplateCreateWithoutUserInput[] | TemplateUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutUserInput | TemplateCreateOrConnectWithoutUserInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutUserInput | TemplateUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TemplateCreateManyUserInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutUserInput | TemplateUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutUserInput | TemplateUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type LeadNotesUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<LeadNotesCreateWithoutUserInput, LeadNotesUncheckedCreateWithoutUserInput> | LeadNotesCreateWithoutUserInput[] | LeadNotesUncheckedCreateWithoutUserInput[]
    connectOrCreate?: LeadNotesCreateOrConnectWithoutUserInput | LeadNotesCreateOrConnectWithoutUserInput[]
    upsert?: LeadNotesUpsertWithWhereUniqueWithoutUserInput | LeadNotesUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: LeadNotesCreateManyUserInputEnvelope
    set?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    disconnect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    delete?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    connect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    update?: LeadNotesUpdateWithWhereUniqueWithoutUserInput | LeadNotesUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: LeadNotesUpdateManyWithWhereWithoutUserInput | LeadNotesUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: LeadNotesScalarWhereInput | LeadNotesScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutOrgMemberInvitesInput = {
    create?: XOR<UserCreateWithoutOrgMemberInvitesInput, UserUncheckedCreateWithoutOrgMemberInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrgMemberInvitesInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutInvitesInput = {
    create?: XOR<OrganizationCreateWithoutInvitesInput, OrganizationUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EnumOrgMemberRoleFieldUpdateOperationsInput = {
    set?: $Enums.OrgMemberRole
  }

  export type UserUpdateOneRequiredWithoutOrgMemberInvitesNestedInput = {
    create?: XOR<UserCreateWithoutOrgMemberInvitesInput, UserUncheckedCreateWithoutOrgMemberInvitesInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrgMemberInvitesInput
    upsert?: UserUpsertWithoutOrgMemberInvitesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrgMemberInvitesInput, UserUpdateWithoutOrgMemberInvitesInput>, UserUncheckedUpdateWithoutOrgMemberInvitesInput>
  }

  export type OrganizationUpdateOneRequiredWithoutInvitesNestedInput = {
    create?: XOR<OrganizationCreateWithoutInvitesInput, OrganizationUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutInvitesInput
    upsert?: OrganizationUpsertWithoutInvitesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutInvitesInput, OrganizationUpdateWithoutInvitesInput>, OrganizationUncheckedUpdateWithoutInvitesInput>
  }

  export type ProjectCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type OrgMemberCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrgMemberCreateWithoutOrganizationInput, OrgMemberUncheckedCreateWithoutOrganizationInput> | OrgMemberCreateWithoutOrganizationInput[] | OrgMemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrgMemberCreateOrConnectWithoutOrganizationInput | OrgMemberCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrgMemberCreateManyOrganizationInputEnvelope
    connect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
  }

  export type OrgMemberInviteCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrgMemberInviteCreateWithoutOrganizationInput, OrgMemberInviteUncheckedCreateWithoutOrganizationInput> | OrgMemberInviteCreateWithoutOrganizationInput[] | OrgMemberInviteUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrgMemberInviteCreateOrConnectWithoutOrganizationInput | OrgMemberInviteCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrgMemberInviteCreateManyOrganizationInputEnvelope
    connect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
  }

  export type IntegrationCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput> | IntegrationCreateWithoutOrganizationInput[] | IntegrationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutOrganizationInput | IntegrationCreateOrConnectWithoutOrganizationInput[]
    createMany?: IntegrationCreateManyOrganizationInputEnvelope
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
  }

  export type LeadCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<LeadCreateWithoutOrganizationInput, LeadUncheckedCreateWithoutOrganizationInput> | LeadCreateWithoutOrganizationInput[] | LeadUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutOrganizationInput | LeadCreateOrConnectWithoutOrganizationInput[]
    createMany?: LeadCreateManyOrganizationInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ContactCreateWithoutOrganizationInput, ContactUncheckedCreateWithoutOrganizationInput> | ContactCreateWithoutOrganizationInput[] | ContactUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutOrganizationInput | ContactCreateOrConnectWithoutOrganizationInput[]
    createMany?: ContactCreateManyOrganizationInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type TemplateCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<TemplateCreateWithoutOrganizationInput, TemplateUncheckedCreateWithoutOrganizationInput> | TemplateCreateWithoutOrganizationInput[] | TemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutOrganizationInput | TemplateCreateOrConnectWithoutOrganizationInput[]
    createMany?: TemplateCreateManyOrganizationInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type LeadStatusCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<LeadStatusCreateWithoutOrganizationInput, LeadStatusUncheckedCreateWithoutOrganizationInput> | LeadStatusCreateWithoutOrganizationInput[] | LeadStatusUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadStatusCreateOrConnectWithoutOrganizationInput | LeadStatusCreateOrConnectWithoutOrganizationInput[]
    createMany?: LeadStatusCreateManyOrganizationInputEnvelope
    connect?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
  }

  export type WebhookCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<WebhookCreateWithoutOrganizationInput, WebhookUncheckedCreateWithoutOrganizationInput> | WebhookCreateWithoutOrganizationInput[] | WebhookUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: WebhookCreateOrConnectWithoutOrganizationInput | WebhookCreateOrConnectWithoutOrganizationInput[]
    createMany?: WebhookCreateManyOrganizationInputEnvelope
    connect?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
  }

  export type EmailCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EmailCreateWithoutOrganizationInput, EmailUncheckedCreateWithoutOrganizationInput> | EmailCreateWithoutOrganizationInput[] | EmailUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutOrganizationInput | EmailCreateOrConnectWithoutOrganizationInput[]
    createMany?: EmailCreateManyOrganizationInputEnvelope
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
  }

  export type MailServiceFromEmailCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MailServiceFromEmailCreateWithoutOrganizationInput, MailServiceFromEmailUncheckedCreateWithoutOrganizationInput> | MailServiceFromEmailCreateWithoutOrganizationInput[] | MailServiceFromEmailUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MailServiceFromEmailCreateOrConnectWithoutOrganizationInput | MailServiceFromEmailCreateOrConnectWithoutOrganizationInput[]
    createMany?: MailServiceFromEmailCreateManyOrganizationInputEnvelope
    connect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
  }

  export type LeadProjectCreateNestedManyWithoutOrganizatioonInput = {
    create?: XOR<LeadProjectCreateWithoutOrganizatioonInput, LeadProjectUncheckedCreateWithoutOrganizatioonInput> | LeadProjectCreateWithoutOrganizatioonInput[] | LeadProjectUncheckedCreateWithoutOrganizatioonInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutOrganizatioonInput | LeadProjectCreateOrConnectWithoutOrganizatioonInput[]
    createMany?: LeadProjectCreateManyOrganizatioonInputEnvelope
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
  }

  export type LeadActivityCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<LeadActivityCreateWithoutOrganizationInput, LeadActivityUncheckedCreateWithoutOrganizationInput> | LeadActivityCreateWithoutOrganizationInput[] | LeadActivityUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutOrganizationInput | LeadActivityCreateOrConnectWithoutOrganizationInput[]
    createMany?: LeadActivityCreateManyOrganizationInputEnvelope
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
  }

  export type UnsubscribeLinkCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UnsubscribeLinkCreateWithoutOrganizationInput, UnsubscribeLinkUncheckedCreateWithoutOrganizationInput> | UnsubscribeLinkCreateWithoutOrganizationInput[] | UnsubscribeLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UnsubscribeLinkCreateOrConnectWithoutOrganizationInput | UnsubscribeLinkCreateOrConnectWithoutOrganizationInput[]
    createMany?: UnsubscribeLinkCreateManyOrganizationInputEnvelope
    connect?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrgMemberCreateWithoutOrganizationInput, OrgMemberUncheckedCreateWithoutOrganizationInput> | OrgMemberCreateWithoutOrganizationInput[] | OrgMemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrgMemberCreateOrConnectWithoutOrganizationInput | OrgMemberCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrgMemberCreateManyOrganizationInputEnvelope
    connect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
  }

  export type OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<OrgMemberInviteCreateWithoutOrganizationInput, OrgMemberInviteUncheckedCreateWithoutOrganizationInput> | OrgMemberInviteCreateWithoutOrganizationInput[] | OrgMemberInviteUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrgMemberInviteCreateOrConnectWithoutOrganizationInput | OrgMemberInviteCreateOrConnectWithoutOrganizationInput[]
    createMany?: OrgMemberInviteCreateManyOrganizationInputEnvelope
    connect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
  }

  export type IntegrationUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput> | IntegrationCreateWithoutOrganizationInput[] | IntegrationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutOrganizationInput | IntegrationCreateOrConnectWithoutOrganizationInput[]
    createMany?: IntegrationCreateManyOrganizationInputEnvelope
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
  }

  export type LeadUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<LeadCreateWithoutOrganizationInput, LeadUncheckedCreateWithoutOrganizationInput> | LeadCreateWithoutOrganizationInput[] | LeadUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutOrganizationInput | LeadCreateOrConnectWithoutOrganizationInput[]
    createMany?: LeadCreateManyOrganizationInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ContactCreateWithoutOrganizationInput, ContactUncheckedCreateWithoutOrganizationInput> | ContactCreateWithoutOrganizationInput[] | ContactUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutOrganizationInput | ContactCreateOrConnectWithoutOrganizationInput[]
    createMany?: ContactCreateManyOrganizationInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type TemplateUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<TemplateCreateWithoutOrganizationInput, TemplateUncheckedCreateWithoutOrganizationInput> | TemplateCreateWithoutOrganizationInput[] | TemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutOrganizationInput | TemplateCreateOrConnectWithoutOrganizationInput[]
    createMany?: TemplateCreateManyOrganizationInputEnvelope
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
  }

  export type LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<LeadStatusCreateWithoutOrganizationInput, LeadStatusUncheckedCreateWithoutOrganizationInput> | LeadStatusCreateWithoutOrganizationInput[] | LeadStatusUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadStatusCreateOrConnectWithoutOrganizationInput | LeadStatusCreateOrConnectWithoutOrganizationInput[]
    createMany?: LeadStatusCreateManyOrganizationInputEnvelope
    connect?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
  }

  export type WebhookUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<WebhookCreateWithoutOrganizationInput, WebhookUncheckedCreateWithoutOrganizationInput> | WebhookCreateWithoutOrganizationInput[] | WebhookUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: WebhookCreateOrConnectWithoutOrganizationInput | WebhookCreateOrConnectWithoutOrganizationInput[]
    createMany?: WebhookCreateManyOrganizationInputEnvelope
    connect?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
  }

  export type EmailUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<EmailCreateWithoutOrganizationInput, EmailUncheckedCreateWithoutOrganizationInput> | EmailCreateWithoutOrganizationInput[] | EmailUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutOrganizationInput | EmailCreateOrConnectWithoutOrganizationInput[]
    createMany?: EmailCreateManyOrganizationInputEnvelope
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
  }

  export type MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<MailServiceFromEmailCreateWithoutOrganizationInput, MailServiceFromEmailUncheckedCreateWithoutOrganizationInput> | MailServiceFromEmailCreateWithoutOrganizationInput[] | MailServiceFromEmailUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MailServiceFromEmailCreateOrConnectWithoutOrganizationInput | MailServiceFromEmailCreateOrConnectWithoutOrganizationInput[]
    createMany?: MailServiceFromEmailCreateManyOrganizationInputEnvelope
    connect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
  }

  export type LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput = {
    create?: XOR<LeadProjectCreateWithoutOrganizatioonInput, LeadProjectUncheckedCreateWithoutOrganizatioonInput> | LeadProjectCreateWithoutOrganizatioonInput[] | LeadProjectUncheckedCreateWithoutOrganizatioonInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutOrganizatioonInput | LeadProjectCreateOrConnectWithoutOrganizatioonInput[]
    createMany?: LeadProjectCreateManyOrganizatioonInputEnvelope
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
  }

  export type LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<LeadActivityCreateWithoutOrganizationInput, LeadActivityUncheckedCreateWithoutOrganizationInput> | LeadActivityCreateWithoutOrganizationInput[] | LeadActivityUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutOrganizationInput | LeadActivityCreateOrConnectWithoutOrganizationInput[]
    createMany?: LeadActivityCreateManyOrganizationInputEnvelope
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
  }

  export type UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UnsubscribeLinkCreateWithoutOrganizationInput, UnsubscribeLinkUncheckedCreateWithoutOrganizationInput> | UnsubscribeLinkCreateWithoutOrganizationInput[] | UnsubscribeLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UnsubscribeLinkCreateOrConnectWithoutOrganizationInput | UnsubscribeLinkCreateOrConnectWithoutOrganizationInput[]
    createMany?: UnsubscribeLinkCreateManyOrganizationInputEnvelope
    connect?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
  }

  export type ProjectUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOrganizationInput | ProjectUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOrganizationInput | ProjectUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOrganizationInput | ProjectUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type OrgMemberUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrgMemberCreateWithoutOrganizationInput, OrgMemberUncheckedCreateWithoutOrganizationInput> | OrgMemberCreateWithoutOrganizationInput[] | OrgMemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrgMemberCreateOrConnectWithoutOrganizationInput | OrgMemberCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrgMemberUpsertWithWhereUniqueWithoutOrganizationInput | OrgMemberUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrgMemberCreateManyOrganizationInputEnvelope
    set?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    disconnect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    delete?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    connect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    update?: OrgMemberUpdateWithWhereUniqueWithoutOrganizationInput | OrgMemberUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrgMemberUpdateManyWithWhereWithoutOrganizationInput | OrgMemberUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrgMemberScalarWhereInput | OrgMemberScalarWhereInput[]
  }

  export type OrgMemberInviteUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrgMemberInviteCreateWithoutOrganizationInput, OrgMemberInviteUncheckedCreateWithoutOrganizationInput> | OrgMemberInviteCreateWithoutOrganizationInput[] | OrgMemberInviteUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrgMemberInviteCreateOrConnectWithoutOrganizationInput | OrgMemberInviteCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrgMemberInviteUpsertWithWhereUniqueWithoutOrganizationInput | OrgMemberInviteUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrgMemberInviteCreateManyOrganizationInputEnvelope
    set?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    disconnect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    delete?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    connect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    update?: OrgMemberInviteUpdateWithWhereUniqueWithoutOrganizationInput | OrgMemberInviteUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrgMemberInviteUpdateManyWithWhereWithoutOrganizationInput | OrgMemberInviteUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrgMemberInviteScalarWhereInput | OrgMemberInviteScalarWhereInput[]
  }

  export type IntegrationUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput> | IntegrationCreateWithoutOrganizationInput[] | IntegrationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutOrganizationInput | IntegrationCreateOrConnectWithoutOrganizationInput[]
    upsert?: IntegrationUpsertWithWhereUniqueWithoutOrganizationInput | IntegrationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: IntegrationCreateManyOrganizationInputEnvelope
    set?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    disconnect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    delete?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    update?: IntegrationUpdateWithWhereUniqueWithoutOrganizationInput | IntegrationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: IntegrationUpdateManyWithWhereWithoutOrganizationInput | IntegrationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
  }

  export type LeadUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<LeadCreateWithoutOrganizationInput, LeadUncheckedCreateWithoutOrganizationInput> | LeadCreateWithoutOrganizationInput[] | LeadUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutOrganizationInput | LeadCreateOrConnectWithoutOrganizationInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutOrganizationInput | LeadUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: LeadCreateManyOrganizationInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutOrganizationInput | LeadUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutOrganizationInput | LeadUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ContactCreateWithoutOrganizationInput, ContactUncheckedCreateWithoutOrganizationInput> | ContactCreateWithoutOrganizationInput[] | ContactUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutOrganizationInput | ContactCreateOrConnectWithoutOrganizationInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutOrganizationInput | ContactUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ContactCreateManyOrganizationInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutOrganizationInput | ContactUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutOrganizationInput | ContactUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type TemplateUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<TemplateCreateWithoutOrganizationInput, TemplateUncheckedCreateWithoutOrganizationInput> | TemplateCreateWithoutOrganizationInput[] | TemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutOrganizationInput | TemplateCreateOrConnectWithoutOrganizationInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutOrganizationInput | TemplateUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: TemplateCreateManyOrganizationInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutOrganizationInput | TemplateUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutOrganizationInput | TemplateUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type LeadStatusUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<LeadStatusCreateWithoutOrganizationInput, LeadStatusUncheckedCreateWithoutOrganizationInput> | LeadStatusCreateWithoutOrganizationInput[] | LeadStatusUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadStatusCreateOrConnectWithoutOrganizationInput | LeadStatusCreateOrConnectWithoutOrganizationInput[]
    upsert?: LeadStatusUpsertWithWhereUniqueWithoutOrganizationInput | LeadStatusUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: LeadStatusCreateManyOrganizationInputEnvelope
    set?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
    disconnect?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
    delete?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
    connect?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
    update?: LeadStatusUpdateWithWhereUniqueWithoutOrganizationInput | LeadStatusUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: LeadStatusUpdateManyWithWhereWithoutOrganizationInput | LeadStatusUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: LeadStatusScalarWhereInput | LeadStatusScalarWhereInput[]
  }

  export type WebhookUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<WebhookCreateWithoutOrganizationInput, WebhookUncheckedCreateWithoutOrganizationInput> | WebhookCreateWithoutOrganizationInput[] | WebhookUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: WebhookCreateOrConnectWithoutOrganizationInput | WebhookCreateOrConnectWithoutOrganizationInput[]
    upsert?: WebhookUpsertWithWhereUniqueWithoutOrganizationInput | WebhookUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: WebhookCreateManyOrganizationInputEnvelope
    set?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
    disconnect?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
    delete?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
    connect?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
    update?: WebhookUpdateWithWhereUniqueWithoutOrganizationInput | WebhookUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: WebhookUpdateManyWithWhereWithoutOrganizationInput | WebhookUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: WebhookScalarWhereInput | WebhookScalarWhereInput[]
  }

  export type EmailUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EmailCreateWithoutOrganizationInput, EmailUncheckedCreateWithoutOrganizationInput> | EmailCreateWithoutOrganizationInput[] | EmailUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutOrganizationInput | EmailCreateOrConnectWithoutOrganizationInput[]
    upsert?: EmailUpsertWithWhereUniqueWithoutOrganizationInput | EmailUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EmailCreateManyOrganizationInputEnvelope
    set?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    disconnect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    delete?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    update?: EmailUpdateWithWhereUniqueWithoutOrganizationInput | EmailUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EmailUpdateManyWithWhereWithoutOrganizationInput | EmailUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EmailScalarWhereInput | EmailScalarWhereInput[]
  }

  export type MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MailServiceFromEmailCreateWithoutOrganizationInput, MailServiceFromEmailUncheckedCreateWithoutOrganizationInput> | MailServiceFromEmailCreateWithoutOrganizationInput[] | MailServiceFromEmailUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MailServiceFromEmailCreateOrConnectWithoutOrganizationInput | MailServiceFromEmailCreateOrConnectWithoutOrganizationInput[]
    upsert?: MailServiceFromEmailUpsertWithWhereUniqueWithoutOrganizationInput | MailServiceFromEmailUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MailServiceFromEmailCreateManyOrganizationInputEnvelope
    set?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    disconnect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    delete?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    connect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    update?: MailServiceFromEmailUpdateWithWhereUniqueWithoutOrganizationInput | MailServiceFromEmailUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MailServiceFromEmailUpdateManyWithWhereWithoutOrganizationInput | MailServiceFromEmailUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MailServiceFromEmailScalarWhereInput | MailServiceFromEmailScalarWhereInput[]
  }

  export type LeadProjectUpdateManyWithoutOrganizatioonNestedInput = {
    create?: XOR<LeadProjectCreateWithoutOrganizatioonInput, LeadProjectUncheckedCreateWithoutOrganizatioonInput> | LeadProjectCreateWithoutOrganizatioonInput[] | LeadProjectUncheckedCreateWithoutOrganizatioonInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutOrganizatioonInput | LeadProjectCreateOrConnectWithoutOrganizatioonInput[]
    upsert?: LeadProjectUpsertWithWhereUniqueWithoutOrganizatioonInput | LeadProjectUpsertWithWhereUniqueWithoutOrganizatioonInput[]
    createMany?: LeadProjectCreateManyOrganizatioonInputEnvelope
    set?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    disconnect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    delete?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    update?: LeadProjectUpdateWithWhereUniqueWithoutOrganizatioonInput | LeadProjectUpdateWithWhereUniqueWithoutOrganizatioonInput[]
    updateMany?: LeadProjectUpdateManyWithWhereWithoutOrganizatioonInput | LeadProjectUpdateManyWithWhereWithoutOrganizatioonInput[]
    deleteMany?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
  }

  export type LeadActivityUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<LeadActivityCreateWithoutOrganizationInput, LeadActivityUncheckedCreateWithoutOrganizationInput> | LeadActivityCreateWithoutOrganizationInput[] | LeadActivityUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutOrganizationInput | LeadActivityCreateOrConnectWithoutOrganizationInput[]
    upsert?: LeadActivityUpsertWithWhereUniqueWithoutOrganizationInput | LeadActivityUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: LeadActivityCreateManyOrganizationInputEnvelope
    set?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    disconnect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    delete?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    update?: LeadActivityUpdateWithWhereUniqueWithoutOrganizationInput | LeadActivityUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: LeadActivityUpdateManyWithWhereWithoutOrganizationInput | LeadActivityUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
  }

  export type UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UnsubscribeLinkCreateWithoutOrganizationInput, UnsubscribeLinkUncheckedCreateWithoutOrganizationInput> | UnsubscribeLinkCreateWithoutOrganizationInput[] | UnsubscribeLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UnsubscribeLinkCreateOrConnectWithoutOrganizationInput | UnsubscribeLinkCreateOrConnectWithoutOrganizationInput[]
    upsert?: UnsubscribeLinkUpsertWithWhereUniqueWithoutOrganizationInput | UnsubscribeLinkUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UnsubscribeLinkCreateManyOrganizationInputEnvelope
    set?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
    disconnect?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
    delete?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
    connect?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
    update?: UnsubscribeLinkUpdateWithWhereUniqueWithoutOrganizationInput | UnsubscribeLinkUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UnsubscribeLinkUpdateManyWithWhereWithoutOrganizationInput | UnsubscribeLinkUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UnsubscribeLinkScalarWhereInput | UnsubscribeLinkScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput> | ProjectCreateWithoutOrganizationInput[] | ProjectUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOrganizationInput | ProjectCreateOrConnectWithoutOrganizationInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOrganizationInput | ProjectUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ProjectCreateManyOrganizationInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOrganizationInput | ProjectUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOrganizationInput | ProjectUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrgMemberCreateWithoutOrganizationInput, OrgMemberUncheckedCreateWithoutOrganizationInput> | OrgMemberCreateWithoutOrganizationInput[] | OrgMemberUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrgMemberCreateOrConnectWithoutOrganizationInput | OrgMemberCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrgMemberUpsertWithWhereUniqueWithoutOrganizationInput | OrgMemberUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrgMemberCreateManyOrganizationInputEnvelope
    set?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    disconnect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    delete?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    connect?: OrgMemberWhereUniqueInput | OrgMemberWhereUniqueInput[]
    update?: OrgMemberUpdateWithWhereUniqueWithoutOrganizationInput | OrgMemberUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrgMemberUpdateManyWithWhereWithoutOrganizationInput | OrgMemberUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrgMemberScalarWhereInput | OrgMemberScalarWhereInput[]
  }

  export type OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<OrgMemberInviteCreateWithoutOrganizationInput, OrgMemberInviteUncheckedCreateWithoutOrganizationInput> | OrgMemberInviteCreateWithoutOrganizationInput[] | OrgMemberInviteUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: OrgMemberInviteCreateOrConnectWithoutOrganizationInput | OrgMemberInviteCreateOrConnectWithoutOrganizationInput[]
    upsert?: OrgMemberInviteUpsertWithWhereUniqueWithoutOrganizationInput | OrgMemberInviteUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: OrgMemberInviteCreateManyOrganizationInputEnvelope
    set?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    disconnect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    delete?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    connect?: OrgMemberInviteWhereUniqueInput | OrgMemberInviteWhereUniqueInput[]
    update?: OrgMemberInviteUpdateWithWhereUniqueWithoutOrganizationInput | OrgMemberInviteUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: OrgMemberInviteUpdateManyWithWhereWithoutOrganizationInput | OrgMemberInviteUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: OrgMemberInviteScalarWhereInput | OrgMemberInviteScalarWhereInput[]
  }

  export type IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput> | IntegrationCreateWithoutOrganizationInput[] | IntegrationUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutOrganizationInput | IntegrationCreateOrConnectWithoutOrganizationInput[]
    upsert?: IntegrationUpsertWithWhereUniqueWithoutOrganizationInput | IntegrationUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: IntegrationCreateManyOrganizationInputEnvelope
    set?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    disconnect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    delete?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    update?: IntegrationUpdateWithWhereUniqueWithoutOrganizationInput | IntegrationUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: IntegrationUpdateManyWithWhereWithoutOrganizationInput | IntegrationUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
  }

  export type LeadUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<LeadCreateWithoutOrganizationInput, LeadUncheckedCreateWithoutOrganizationInput> | LeadCreateWithoutOrganizationInput[] | LeadUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutOrganizationInput | LeadCreateOrConnectWithoutOrganizationInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutOrganizationInput | LeadUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: LeadCreateManyOrganizationInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutOrganizationInput | LeadUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutOrganizationInput | LeadUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ContactCreateWithoutOrganizationInput, ContactUncheckedCreateWithoutOrganizationInput> | ContactCreateWithoutOrganizationInput[] | ContactUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutOrganizationInput | ContactCreateOrConnectWithoutOrganizationInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutOrganizationInput | ContactUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ContactCreateManyOrganizationInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutOrganizationInput | ContactUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutOrganizationInput | ContactUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type TemplateUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<TemplateCreateWithoutOrganizationInput, TemplateUncheckedCreateWithoutOrganizationInput> | TemplateCreateWithoutOrganizationInput[] | TemplateUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: TemplateCreateOrConnectWithoutOrganizationInput | TemplateCreateOrConnectWithoutOrganizationInput[]
    upsert?: TemplateUpsertWithWhereUniqueWithoutOrganizationInput | TemplateUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: TemplateCreateManyOrganizationInputEnvelope
    set?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    disconnect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    delete?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    connect?: TemplateWhereUniqueInput | TemplateWhereUniqueInput[]
    update?: TemplateUpdateWithWhereUniqueWithoutOrganizationInput | TemplateUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: TemplateUpdateManyWithWhereWithoutOrganizationInput | TemplateUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
  }

  export type LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<LeadStatusCreateWithoutOrganizationInput, LeadStatusUncheckedCreateWithoutOrganizationInput> | LeadStatusCreateWithoutOrganizationInput[] | LeadStatusUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadStatusCreateOrConnectWithoutOrganizationInput | LeadStatusCreateOrConnectWithoutOrganizationInput[]
    upsert?: LeadStatusUpsertWithWhereUniqueWithoutOrganizationInput | LeadStatusUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: LeadStatusCreateManyOrganizationInputEnvelope
    set?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
    disconnect?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
    delete?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
    connect?: LeadStatusWhereUniqueInput | LeadStatusWhereUniqueInput[]
    update?: LeadStatusUpdateWithWhereUniqueWithoutOrganizationInput | LeadStatusUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: LeadStatusUpdateManyWithWhereWithoutOrganizationInput | LeadStatusUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: LeadStatusScalarWhereInput | LeadStatusScalarWhereInput[]
  }

  export type WebhookUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<WebhookCreateWithoutOrganizationInput, WebhookUncheckedCreateWithoutOrganizationInput> | WebhookCreateWithoutOrganizationInput[] | WebhookUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: WebhookCreateOrConnectWithoutOrganizationInput | WebhookCreateOrConnectWithoutOrganizationInput[]
    upsert?: WebhookUpsertWithWhereUniqueWithoutOrganizationInput | WebhookUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: WebhookCreateManyOrganizationInputEnvelope
    set?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
    disconnect?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
    delete?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
    connect?: WebhookWhereUniqueInput | WebhookWhereUniqueInput[]
    update?: WebhookUpdateWithWhereUniqueWithoutOrganizationInput | WebhookUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: WebhookUpdateManyWithWhereWithoutOrganizationInput | WebhookUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: WebhookScalarWhereInput | WebhookScalarWhereInput[]
  }

  export type EmailUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<EmailCreateWithoutOrganizationInput, EmailUncheckedCreateWithoutOrganizationInput> | EmailCreateWithoutOrganizationInput[] | EmailUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutOrganizationInput | EmailCreateOrConnectWithoutOrganizationInput[]
    upsert?: EmailUpsertWithWhereUniqueWithoutOrganizationInput | EmailUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: EmailCreateManyOrganizationInputEnvelope
    set?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    disconnect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    delete?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    update?: EmailUpdateWithWhereUniqueWithoutOrganizationInput | EmailUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: EmailUpdateManyWithWhereWithoutOrganizationInput | EmailUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: EmailScalarWhereInput | EmailScalarWhereInput[]
  }

  export type MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<MailServiceFromEmailCreateWithoutOrganizationInput, MailServiceFromEmailUncheckedCreateWithoutOrganizationInput> | MailServiceFromEmailCreateWithoutOrganizationInput[] | MailServiceFromEmailUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: MailServiceFromEmailCreateOrConnectWithoutOrganizationInput | MailServiceFromEmailCreateOrConnectWithoutOrganizationInput[]
    upsert?: MailServiceFromEmailUpsertWithWhereUniqueWithoutOrganizationInput | MailServiceFromEmailUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: MailServiceFromEmailCreateManyOrganizationInputEnvelope
    set?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    disconnect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    delete?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    connect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    update?: MailServiceFromEmailUpdateWithWhereUniqueWithoutOrganizationInput | MailServiceFromEmailUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: MailServiceFromEmailUpdateManyWithWhereWithoutOrganizationInput | MailServiceFromEmailUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: MailServiceFromEmailScalarWhereInput | MailServiceFromEmailScalarWhereInput[]
  }

  export type LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput = {
    create?: XOR<LeadProjectCreateWithoutOrganizatioonInput, LeadProjectUncheckedCreateWithoutOrganizatioonInput> | LeadProjectCreateWithoutOrganizatioonInput[] | LeadProjectUncheckedCreateWithoutOrganizatioonInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutOrganizatioonInput | LeadProjectCreateOrConnectWithoutOrganizatioonInput[]
    upsert?: LeadProjectUpsertWithWhereUniqueWithoutOrganizatioonInput | LeadProjectUpsertWithWhereUniqueWithoutOrganizatioonInput[]
    createMany?: LeadProjectCreateManyOrganizatioonInputEnvelope
    set?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    disconnect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    delete?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    update?: LeadProjectUpdateWithWhereUniqueWithoutOrganizatioonInput | LeadProjectUpdateWithWhereUniqueWithoutOrganizatioonInput[]
    updateMany?: LeadProjectUpdateManyWithWhereWithoutOrganizatioonInput | LeadProjectUpdateManyWithWhereWithoutOrganizatioonInput[]
    deleteMany?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
  }

  export type LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<LeadActivityCreateWithoutOrganizationInput, LeadActivityUncheckedCreateWithoutOrganizationInput> | LeadActivityCreateWithoutOrganizationInput[] | LeadActivityUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutOrganizationInput | LeadActivityCreateOrConnectWithoutOrganizationInput[]
    upsert?: LeadActivityUpsertWithWhereUniqueWithoutOrganizationInput | LeadActivityUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: LeadActivityCreateManyOrganizationInputEnvelope
    set?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    disconnect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    delete?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    update?: LeadActivityUpdateWithWhereUniqueWithoutOrganizationInput | LeadActivityUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: LeadActivityUpdateManyWithWhereWithoutOrganizationInput | LeadActivityUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
  }

  export type UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UnsubscribeLinkCreateWithoutOrganizationInput, UnsubscribeLinkUncheckedCreateWithoutOrganizationInput> | UnsubscribeLinkCreateWithoutOrganizationInput[] | UnsubscribeLinkUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UnsubscribeLinkCreateOrConnectWithoutOrganizationInput | UnsubscribeLinkCreateOrConnectWithoutOrganizationInput[]
    upsert?: UnsubscribeLinkUpsertWithWhereUniqueWithoutOrganizationInput | UnsubscribeLinkUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UnsubscribeLinkCreateManyOrganizationInputEnvelope
    set?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
    disconnect?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
    delete?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
    connect?: UnsubscribeLinkWhereUniqueInput | UnsubscribeLinkWhereUniqueInput[]
    update?: UnsubscribeLinkUpdateWithWhereUniqueWithoutOrganizationInput | UnsubscribeLinkUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UnsubscribeLinkUpdateManyWithWhereWithoutOrganizationInput | UnsubscribeLinkUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UnsubscribeLinkScalarWhereInput | UnsubscribeLinkScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutMembersInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutOrgMembersInput = {
    create?: XOR<UserCreateWithoutOrgMembersInput, UserUncheckedCreateWithoutOrgMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrgMembersInput
    connect?: UserWhereUniqueInput
  }

  export type IntegrationCreateNestedManyWithoutMembersInput = {
    create?: XOR<IntegrationCreateWithoutMembersInput, IntegrationUncheckedCreateWithoutMembersInput> | IntegrationCreateWithoutMembersInput[] | IntegrationUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutMembersInput | IntegrationCreateOrConnectWithoutMembersInput[]
    createMany?: IntegrationCreateManyMembersInputEnvelope
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
  }

  export type IntegrationUncheckedCreateNestedManyWithoutMembersInput = {
    create?: XOR<IntegrationCreateWithoutMembersInput, IntegrationUncheckedCreateWithoutMembersInput> | IntegrationCreateWithoutMembersInput[] | IntegrationUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutMembersInput | IntegrationCreateOrConnectWithoutMembersInput[]
    createMany?: IntegrationCreateManyMembersInputEnvelope
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    upsert?: OrganizationUpsertWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutMembersInput, OrganizationUpdateWithoutMembersInput>, OrganizationUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutOrgMembersNestedInput = {
    create?: XOR<UserCreateWithoutOrgMembersInput, UserUncheckedCreateWithoutOrgMembersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrgMembersInput
    upsert?: UserUpsertWithoutOrgMembersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOrgMembersInput, UserUpdateWithoutOrgMembersInput>, UserUncheckedUpdateWithoutOrgMembersInput>
  }

  export type IntegrationUpdateManyWithoutMembersNestedInput = {
    create?: XOR<IntegrationCreateWithoutMembersInput, IntegrationUncheckedCreateWithoutMembersInput> | IntegrationCreateWithoutMembersInput[] | IntegrationUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutMembersInput | IntegrationCreateOrConnectWithoutMembersInput[]
    upsert?: IntegrationUpsertWithWhereUniqueWithoutMembersInput | IntegrationUpsertWithWhereUniqueWithoutMembersInput[]
    createMany?: IntegrationCreateManyMembersInputEnvelope
    set?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    disconnect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    delete?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    update?: IntegrationUpdateWithWhereUniqueWithoutMembersInput | IntegrationUpdateWithWhereUniqueWithoutMembersInput[]
    updateMany?: IntegrationUpdateManyWithWhereWithoutMembersInput | IntegrationUpdateManyWithWhereWithoutMembersInput[]
    deleteMany?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
  }

  export type IntegrationUncheckedUpdateManyWithoutMembersNestedInput = {
    create?: XOR<IntegrationCreateWithoutMembersInput, IntegrationUncheckedCreateWithoutMembersInput> | IntegrationCreateWithoutMembersInput[] | IntegrationUncheckedCreateWithoutMembersInput[]
    connectOrCreate?: IntegrationCreateOrConnectWithoutMembersInput | IntegrationCreateOrConnectWithoutMembersInput[]
    upsert?: IntegrationUpsertWithWhereUniqueWithoutMembersInput | IntegrationUpsertWithWhereUniqueWithoutMembersInput[]
    createMany?: IntegrationCreateManyMembersInputEnvelope
    set?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    disconnect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    delete?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    connect?: IntegrationWhereUniqueInput | IntegrationWhereUniqueInput[]
    update?: IntegrationUpdateWithWhereUniqueWithoutMembersInput | IntegrationUpdateWithWhereUniqueWithoutMembersInput[]
    updateMany?: IntegrationUpdateManyWithWhereWithoutMembersInput | IntegrationUpdateManyWithWhereWithoutMembersInput[]
    deleteMany?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
  }

  export type OrganizationCreateNestedOneWithoutProjectInput = {
    create?: XOR<OrganizationCreateWithoutProjectInput, OrganizationUncheckedCreateWithoutProjectInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutProjectInput
    connect?: OrganizationWhereUniqueInput
  }

  export type LeadProjectCreateNestedManyWithoutProjectInput = {
    create?: XOR<LeadProjectCreateWithoutProjectInput, LeadProjectUncheckedCreateWithoutProjectInput> | LeadProjectCreateWithoutProjectInput[] | LeadProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutProjectInput | LeadProjectCreateOrConnectWithoutProjectInput[]
    createMany?: LeadProjectCreateManyProjectInputEnvelope
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
  }

  export type IntegrationCreateNestedOneWithoutProjectInput = {
    create?: XOR<IntegrationCreateWithoutProjectInput, IntegrationUncheckedCreateWithoutProjectInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutProjectInput
    connect?: IntegrationWhereUniqueInput
  }

  export type LeadProjectUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<LeadProjectCreateWithoutProjectInput, LeadProjectUncheckedCreateWithoutProjectInput> | LeadProjectCreateWithoutProjectInput[] | LeadProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutProjectInput | LeadProjectCreateOrConnectWithoutProjectInput[]
    createMany?: LeadProjectCreateManyProjectInputEnvelope
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type OrganizationUpdateOneRequiredWithoutProjectNestedInput = {
    create?: XOR<OrganizationCreateWithoutProjectInput, OrganizationUncheckedCreateWithoutProjectInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutProjectInput
    upsert?: OrganizationUpsertWithoutProjectInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutProjectInput, OrganizationUpdateWithoutProjectInput>, OrganizationUncheckedUpdateWithoutProjectInput>
  }

  export type LeadProjectUpdateManyWithoutProjectNestedInput = {
    create?: XOR<LeadProjectCreateWithoutProjectInput, LeadProjectUncheckedCreateWithoutProjectInput> | LeadProjectCreateWithoutProjectInput[] | LeadProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutProjectInput | LeadProjectCreateOrConnectWithoutProjectInput[]
    upsert?: LeadProjectUpsertWithWhereUniqueWithoutProjectInput | LeadProjectUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: LeadProjectCreateManyProjectInputEnvelope
    set?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    disconnect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    delete?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    update?: LeadProjectUpdateWithWhereUniqueWithoutProjectInput | LeadProjectUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: LeadProjectUpdateManyWithWhereWithoutProjectInput | LeadProjectUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
  }

  export type IntegrationUpdateOneRequiredWithoutProjectNestedInput = {
    create?: XOR<IntegrationCreateWithoutProjectInput, IntegrationUncheckedCreateWithoutProjectInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutProjectInput
    upsert?: IntegrationUpsertWithoutProjectInput
    connect?: IntegrationWhereUniqueInput
    update?: XOR<XOR<IntegrationUpdateToOneWithWhereWithoutProjectInput, IntegrationUpdateWithoutProjectInput>, IntegrationUncheckedUpdateWithoutProjectInput>
  }

  export type LeadProjectUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<LeadProjectCreateWithoutProjectInput, LeadProjectUncheckedCreateWithoutProjectInput> | LeadProjectCreateWithoutProjectInput[] | LeadProjectUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutProjectInput | LeadProjectCreateOrConnectWithoutProjectInput[]
    upsert?: LeadProjectUpsertWithWhereUniqueWithoutProjectInput | LeadProjectUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: LeadProjectCreateManyProjectInputEnvelope
    set?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    disconnect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    delete?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    update?: LeadProjectUpdateWithWhereUniqueWithoutProjectInput | LeadProjectUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: LeadProjectUpdateManyWithWhereWithoutProjectInput | LeadProjectUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
  }

  export type LeadCreateNestedOneWithoutLeadNotesInput = {
    create?: XOR<LeadCreateWithoutLeadNotesInput, LeadUncheckedCreateWithoutLeadNotesInput>
    connectOrCreate?: LeadCreateOrConnectWithoutLeadNotesInput
    connect?: LeadWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLeadNotesInput = {
    create?: XOR<UserCreateWithoutLeadNotesInput, UserUncheckedCreateWithoutLeadNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeadNotesInput
    connect?: UserWhereUniqueInput
  }

  export type LeadActivityCreateNestedManyWithoutNoteInput = {
    create?: XOR<LeadActivityCreateWithoutNoteInput, LeadActivityUncheckedCreateWithoutNoteInput> | LeadActivityCreateWithoutNoteInput[] | LeadActivityUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutNoteInput | LeadActivityCreateOrConnectWithoutNoteInput[]
    createMany?: LeadActivityCreateManyNoteInputEnvelope
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
  }

  export type LeadActivityUncheckedCreateNestedManyWithoutNoteInput = {
    create?: XOR<LeadActivityCreateWithoutNoteInput, LeadActivityUncheckedCreateWithoutNoteInput> | LeadActivityCreateWithoutNoteInput[] | LeadActivityUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutNoteInput | LeadActivityCreateOrConnectWithoutNoteInput[]
    createMany?: LeadActivityCreateManyNoteInputEnvelope
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
  }

  export type LeadUpdateOneRequiredWithoutLeadNotesNestedInput = {
    create?: XOR<LeadCreateWithoutLeadNotesInput, LeadUncheckedCreateWithoutLeadNotesInput>
    connectOrCreate?: LeadCreateOrConnectWithoutLeadNotesInput
    upsert?: LeadUpsertWithoutLeadNotesInput
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutLeadNotesInput, LeadUpdateWithoutLeadNotesInput>, LeadUncheckedUpdateWithoutLeadNotesInput>
  }

  export type UserUpdateOneRequiredWithoutLeadNotesNestedInput = {
    create?: XOR<UserCreateWithoutLeadNotesInput, UserUncheckedCreateWithoutLeadNotesInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeadNotesInput
    upsert?: UserUpsertWithoutLeadNotesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLeadNotesInput, UserUpdateWithoutLeadNotesInput>, UserUncheckedUpdateWithoutLeadNotesInput>
  }

  export type LeadActivityUpdateManyWithoutNoteNestedInput = {
    create?: XOR<LeadActivityCreateWithoutNoteInput, LeadActivityUncheckedCreateWithoutNoteInput> | LeadActivityCreateWithoutNoteInput[] | LeadActivityUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutNoteInput | LeadActivityCreateOrConnectWithoutNoteInput[]
    upsert?: LeadActivityUpsertWithWhereUniqueWithoutNoteInput | LeadActivityUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: LeadActivityCreateManyNoteInputEnvelope
    set?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    disconnect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    delete?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    update?: LeadActivityUpdateWithWhereUniqueWithoutNoteInput | LeadActivityUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: LeadActivityUpdateManyWithWhereWithoutNoteInput | LeadActivityUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
  }

  export type LeadActivityUncheckedUpdateManyWithoutNoteNestedInput = {
    create?: XOR<LeadActivityCreateWithoutNoteInput, LeadActivityUncheckedCreateWithoutNoteInput> | LeadActivityCreateWithoutNoteInput[] | LeadActivityUncheckedCreateWithoutNoteInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutNoteInput | LeadActivityCreateOrConnectWithoutNoteInput[]
    upsert?: LeadActivityUpsertWithWhereUniqueWithoutNoteInput | LeadActivityUpsertWithWhereUniqueWithoutNoteInput[]
    createMany?: LeadActivityCreateManyNoteInputEnvelope
    set?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    disconnect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    delete?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    update?: LeadActivityUpdateWithWhereUniqueWithoutNoteInput | LeadActivityUpdateWithWhereUniqueWithoutNoteInput[]
    updateMany?: LeadActivityUpdateManyWithWhereWithoutNoteInput | LeadActivityUpdateManyWithWhereWithoutNoteInput[]
    deleteMany?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
  }

  export type LeadStatusCreateNestedOneWithoutLeadInput = {
    create?: XOR<LeadStatusCreateWithoutLeadInput, LeadStatusUncheckedCreateWithoutLeadInput>
    connectOrCreate?: LeadStatusCreateOrConnectWithoutLeadInput
    connect?: LeadStatusWhereUniqueInput
  }

  export type LeadProjectCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadProjectCreateWithoutLeadInput, LeadProjectUncheckedCreateWithoutLeadInput> | LeadProjectCreateWithoutLeadInput[] | LeadProjectUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutLeadInput | LeadProjectCreateOrConnectWithoutLeadInput[]
    createMany?: LeadProjectCreateManyLeadInputEnvelope
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
  }

  export type LeadActivityCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadActivityCreateWithoutLeadInput, LeadActivityUncheckedCreateWithoutLeadInput> | LeadActivityCreateWithoutLeadInput[] | LeadActivityUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutLeadInput | LeadActivityCreateOrConnectWithoutLeadInput[]
    createMany?: LeadActivityCreateManyLeadInputEnvelope
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
  }

  export type LeadNotesCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadNotesCreateWithoutLeadInput, LeadNotesUncheckedCreateWithoutLeadInput> | LeadNotesCreateWithoutLeadInput[] | LeadNotesUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadNotesCreateOrConnectWithoutLeadInput | LeadNotesCreateOrConnectWithoutLeadInput[]
    createMany?: LeadNotesCreateManyLeadInputEnvelope
    connect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
  }

  export type ContactCreateNestedManyWithoutLeadInput = {
    create?: XOR<ContactCreateWithoutLeadInput, ContactUncheckedCreateWithoutLeadInput> | ContactCreateWithoutLeadInput[] | ContactUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutLeadInput | ContactCreateOrConnectWithoutLeadInput[]
    createMany?: ContactCreateManyLeadInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type AttachmentCreateNestedManyWithoutLeadInput = {
    create?: XOR<AttachmentCreateWithoutLeadInput, AttachmentUncheckedCreateWithoutLeadInput> | AttachmentCreateWithoutLeadInput[] | AttachmentUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutLeadInput | AttachmentCreateOrConnectWithoutLeadInput[]
    createMany?: AttachmentCreateManyLeadInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type OrganizationCreateNestedOneWithoutLeadInput = {
    create?: XOR<OrganizationCreateWithoutLeadInput, OrganizationUncheckedCreateWithoutLeadInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLeadInput
    connect?: OrganizationWhereUniqueInput
  }

  export type IntegrationCreateNestedOneWithoutLeadInput = {
    create?: XOR<IntegrationCreateWithoutLeadInput, IntegrationUncheckedCreateWithoutLeadInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutLeadInput
    connect?: IntegrationWhereUniqueInput
  }

  export type EmailCreateNestedManyWithoutLeadInput = {
    create?: XOR<EmailCreateWithoutLeadInput, EmailUncheckedCreateWithoutLeadInput> | EmailCreateWithoutLeadInput[] | EmailUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutLeadInput | EmailCreateOrConnectWithoutLeadInput[]
    createMany?: EmailCreateManyLeadInputEnvelope
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
  }

  export type LeadProjectUncheckedCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadProjectCreateWithoutLeadInput, LeadProjectUncheckedCreateWithoutLeadInput> | LeadProjectCreateWithoutLeadInput[] | LeadProjectUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutLeadInput | LeadProjectCreateOrConnectWithoutLeadInput[]
    createMany?: LeadProjectCreateManyLeadInputEnvelope
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
  }

  export type LeadActivityUncheckedCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadActivityCreateWithoutLeadInput, LeadActivityUncheckedCreateWithoutLeadInput> | LeadActivityCreateWithoutLeadInput[] | LeadActivityUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutLeadInput | LeadActivityCreateOrConnectWithoutLeadInput[]
    createMany?: LeadActivityCreateManyLeadInputEnvelope
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
  }

  export type LeadNotesUncheckedCreateNestedManyWithoutLeadInput = {
    create?: XOR<LeadNotesCreateWithoutLeadInput, LeadNotesUncheckedCreateWithoutLeadInput> | LeadNotesCreateWithoutLeadInput[] | LeadNotesUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadNotesCreateOrConnectWithoutLeadInput | LeadNotesCreateOrConnectWithoutLeadInput[]
    createMany?: LeadNotesCreateManyLeadInputEnvelope
    connect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
  }

  export type ContactUncheckedCreateNestedManyWithoutLeadInput = {
    create?: XOR<ContactCreateWithoutLeadInput, ContactUncheckedCreateWithoutLeadInput> | ContactCreateWithoutLeadInput[] | ContactUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutLeadInput | ContactCreateOrConnectWithoutLeadInput[]
    createMany?: ContactCreateManyLeadInputEnvelope
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
  }

  export type AttachmentUncheckedCreateNestedManyWithoutLeadInput = {
    create?: XOR<AttachmentCreateWithoutLeadInput, AttachmentUncheckedCreateWithoutLeadInput> | AttachmentCreateWithoutLeadInput[] | AttachmentUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutLeadInput | AttachmentCreateOrConnectWithoutLeadInput[]
    createMany?: AttachmentCreateManyLeadInputEnvelope
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
  }

  export type EmailUncheckedCreateNestedManyWithoutLeadInput = {
    create?: XOR<EmailCreateWithoutLeadInput, EmailUncheckedCreateWithoutLeadInput> | EmailCreateWithoutLeadInput[] | EmailUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutLeadInput | EmailCreateOrConnectWithoutLeadInput[]
    createMany?: EmailCreateManyLeadInputEnvelope
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
  }

  export type LeadStatusUpdateOneWithoutLeadNestedInput = {
    create?: XOR<LeadStatusCreateWithoutLeadInput, LeadStatusUncheckedCreateWithoutLeadInput>
    connectOrCreate?: LeadStatusCreateOrConnectWithoutLeadInput
    upsert?: LeadStatusUpsertWithoutLeadInput
    disconnect?: LeadStatusWhereInput | boolean
    delete?: LeadStatusWhereInput | boolean
    connect?: LeadStatusWhereUniqueInput
    update?: XOR<XOR<LeadStatusUpdateToOneWithWhereWithoutLeadInput, LeadStatusUpdateWithoutLeadInput>, LeadStatusUncheckedUpdateWithoutLeadInput>
  }

  export type LeadProjectUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadProjectCreateWithoutLeadInput, LeadProjectUncheckedCreateWithoutLeadInput> | LeadProjectCreateWithoutLeadInput[] | LeadProjectUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutLeadInput | LeadProjectCreateOrConnectWithoutLeadInput[]
    upsert?: LeadProjectUpsertWithWhereUniqueWithoutLeadInput | LeadProjectUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadProjectCreateManyLeadInputEnvelope
    set?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    disconnect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    delete?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    update?: LeadProjectUpdateWithWhereUniqueWithoutLeadInput | LeadProjectUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadProjectUpdateManyWithWhereWithoutLeadInput | LeadProjectUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
  }

  export type LeadActivityUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadActivityCreateWithoutLeadInput, LeadActivityUncheckedCreateWithoutLeadInput> | LeadActivityCreateWithoutLeadInput[] | LeadActivityUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutLeadInput | LeadActivityCreateOrConnectWithoutLeadInput[]
    upsert?: LeadActivityUpsertWithWhereUniqueWithoutLeadInput | LeadActivityUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadActivityCreateManyLeadInputEnvelope
    set?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    disconnect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    delete?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    update?: LeadActivityUpdateWithWhereUniqueWithoutLeadInput | LeadActivityUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadActivityUpdateManyWithWhereWithoutLeadInput | LeadActivityUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
  }

  export type LeadNotesUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadNotesCreateWithoutLeadInput, LeadNotesUncheckedCreateWithoutLeadInput> | LeadNotesCreateWithoutLeadInput[] | LeadNotesUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadNotesCreateOrConnectWithoutLeadInput | LeadNotesCreateOrConnectWithoutLeadInput[]
    upsert?: LeadNotesUpsertWithWhereUniqueWithoutLeadInput | LeadNotesUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadNotesCreateManyLeadInputEnvelope
    set?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    disconnect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    delete?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    connect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    update?: LeadNotesUpdateWithWhereUniqueWithoutLeadInput | LeadNotesUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadNotesUpdateManyWithWhereWithoutLeadInput | LeadNotesUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadNotesScalarWhereInput | LeadNotesScalarWhereInput[]
  }

  export type ContactUpdateManyWithoutLeadNestedInput = {
    create?: XOR<ContactCreateWithoutLeadInput, ContactUncheckedCreateWithoutLeadInput> | ContactCreateWithoutLeadInput[] | ContactUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutLeadInput | ContactCreateOrConnectWithoutLeadInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutLeadInput | ContactUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: ContactCreateManyLeadInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutLeadInput | ContactUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutLeadInput | ContactUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type AttachmentUpdateManyWithoutLeadNestedInput = {
    create?: XOR<AttachmentCreateWithoutLeadInput, AttachmentUncheckedCreateWithoutLeadInput> | AttachmentCreateWithoutLeadInput[] | AttachmentUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutLeadInput | AttachmentCreateOrConnectWithoutLeadInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutLeadInput | AttachmentUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: AttachmentCreateManyLeadInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutLeadInput | AttachmentUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutLeadInput | AttachmentUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutLeadNestedInput = {
    create?: XOR<OrganizationCreateWithoutLeadInput, OrganizationUncheckedCreateWithoutLeadInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLeadInput
    upsert?: OrganizationUpsertWithoutLeadInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutLeadInput, OrganizationUpdateWithoutLeadInput>, OrganizationUncheckedUpdateWithoutLeadInput>
  }

  export type IntegrationUpdateOneWithoutLeadNestedInput = {
    create?: XOR<IntegrationCreateWithoutLeadInput, IntegrationUncheckedCreateWithoutLeadInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutLeadInput
    upsert?: IntegrationUpsertWithoutLeadInput
    disconnect?: IntegrationWhereInput | boolean
    delete?: IntegrationWhereInput | boolean
    connect?: IntegrationWhereUniqueInput
    update?: XOR<XOR<IntegrationUpdateToOneWithWhereWithoutLeadInput, IntegrationUpdateWithoutLeadInput>, IntegrationUncheckedUpdateWithoutLeadInput>
  }

  export type EmailUpdateManyWithoutLeadNestedInput = {
    create?: XOR<EmailCreateWithoutLeadInput, EmailUncheckedCreateWithoutLeadInput> | EmailCreateWithoutLeadInput[] | EmailUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutLeadInput | EmailCreateOrConnectWithoutLeadInput[]
    upsert?: EmailUpsertWithWhereUniqueWithoutLeadInput | EmailUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: EmailCreateManyLeadInputEnvelope
    set?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    disconnect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    delete?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    update?: EmailUpdateWithWhereUniqueWithoutLeadInput | EmailUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: EmailUpdateManyWithWhereWithoutLeadInput | EmailUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: EmailScalarWhereInput | EmailScalarWhereInput[]
  }

  export type LeadProjectUncheckedUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadProjectCreateWithoutLeadInput, LeadProjectUncheckedCreateWithoutLeadInput> | LeadProjectCreateWithoutLeadInput[] | LeadProjectUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutLeadInput | LeadProjectCreateOrConnectWithoutLeadInput[]
    upsert?: LeadProjectUpsertWithWhereUniqueWithoutLeadInput | LeadProjectUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadProjectCreateManyLeadInputEnvelope
    set?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    disconnect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    delete?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    update?: LeadProjectUpdateWithWhereUniqueWithoutLeadInput | LeadProjectUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadProjectUpdateManyWithWhereWithoutLeadInput | LeadProjectUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
  }

  export type LeadActivityUncheckedUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadActivityCreateWithoutLeadInput, LeadActivityUncheckedCreateWithoutLeadInput> | LeadActivityCreateWithoutLeadInput[] | LeadActivityUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadActivityCreateOrConnectWithoutLeadInput | LeadActivityCreateOrConnectWithoutLeadInput[]
    upsert?: LeadActivityUpsertWithWhereUniqueWithoutLeadInput | LeadActivityUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadActivityCreateManyLeadInputEnvelope
    set?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    disconnect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    delete?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    connect?: LeadActivityWhereUniqueInput | LeadActivityWhereUniqueInput[]
    update?: LeadActivityUpdateWithWhereUniqueWithoutLeadInput | LeadActivityUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadActivityUpdateManyWithWhereWithoutLeadInput | LeadActivityUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
  }

  export type LeadNotesUncheckedUpdateManyWithoutLeadNestedInput = {
    create?: XOR<LeadNotesCreateWithoutLeadInput, LeadNotesUncheckedCreateWithoutLeadInput> | LeadNotesCreateWithoutLeadInput[] | LeadNotesUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: LeadNotesCreateOrConnectWithoutLeadInput | LeadNotesCreateOrConnectWithoutLeadInput[]
    upsert?: LeadNotesUpsertWithWhereUniqueWithoutLeadInput | LeadNotesUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: LeadNotesCreateManyLeadInputEnvelope
    set?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    disconnect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    delete?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    connect?: LeadNotesWhereUniqueInput | LeadNotesWhereUniqueInput[]
    update?: LeadNotesUpdateWithWhereUniqueWithoutLeadInput | LeadNotesUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: LeadNotesUpdateManyWithWhereWithoutLeadInput | LeadNotesUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: LeadNotesScalarWhereInput | LeadNotesScalarWhereInput[]
  }

  export type ContactUncheckedUpdateManyWithoutLeadNestedInput = {
    create?: XOR<ContactCreateWithoutLeadInput, ContactUncheckedCreateWithoutLeadInput> | ContactCreateWithoutLeadInput[] | ContactUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: ContactCreateOrConnectWithoutLeadInput | ContactCreateOrConnectWithoutLeadInput[]
    upsert?: ContactUpsertWithWhereUniqueWithoutLeadInput | ContactUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: ContactCreateManyLeadInputEnvelope
    set?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    disconnect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    delete?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    connect?: ContactWhereUniqueInput | ContactWhereUniqueInput[]
    update?: ContactUpdateWithWhereUniqueWithoutLeadInput | ContactUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: ContactUpdateManyWithWhereWithoutLeadInput | ContactUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: ContactScalarWhereInput | ContactScalarWhereInput[]
  }

  export type AttachmentUncheckedUpdateManyWithoutLeadNestedInput = {
    create?: XOR<AttachmentCreateWithoutLeadInput, AttachmentUncheckedCreateWithoutLeadInput> | AttachmentCreateWithoutLeadInput[] | AttachmentUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: AttachmentCreateOrConnectWithoutLeadInput | AttachmentCreateOrConnectWithoutLeadInput[]
    upsert?: AttachmentUpsertWithWhereUniqueWithoutLeadInput | AttachmentUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: AttachmentCreateManyLeadInputEnvelope
    set?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    disconnect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    delete?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    connect?: AttachmentWhereUniqueInput | AttachmentWhereUniqueInput[]
    update?: AttachmentUpdateWithWhereUniqueWithoutLeadInput | AttachmentUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: AttachmentUpdateManyWithWhereWithoutLeadInput | AttachmentUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
  }

  export type EmailUncheckedUpdateManyWithoutLeadNestedInput = {
    create?: XOR<EmailCreateWithoutLeadInput, EmailUncheckedCreateWithoutLeadInput> | EmailCreateWithoutLeadInput[] | EmailUncheckedCreateWithoutLeadInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutLeadInput | EmailCreateOrConnectWithoutLeadInput[]
    upsert?: EmailUpsertWithWhereUniqueWithoutLeadInput | EmailUpsertWithWhereUniqueWithoutLeadInput[]
    createMany?: EmailCreateManyLeadInputEnvelope
    set?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    disconnect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    delete?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    update?: EmailUpdateWithWhereUniqueWithoutLeadInput | EmailUpdateWithWhereUniqueWithoutLeadInput[]
    updateMany?: EmailUpdateManyWithWhereWithoutLeadInput | EmailUpdateManyWithWhereWithoutLeadInput[]
    deleteMany?: EmailScalarWhereInput | EmailScalarWhereInput[]
  }

  export type IntegrationCreateNestedOneWithoutLeadProjectInput = {
    create?: XOR<IntegrationCreateWithoutLeadProjectInput, IntegrationUncheckedCreateWithoutLeadProjectInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutLeadProjectInput
    connect?: IntegrationWhereUniqueInput
  }

  export type LeadCreateNestedOneWithoutProjectInput = {
    create?: XOR<LeadCreateWithoutProjectInput, LeadUncheckedCreateWithoutProjectInput>
    connectOrCreate?: LeadCreateOrConnectWithoutProjectInput
    connect?: LeadWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutLeadProjectInput = {
    create?: XOR<ProjectCreateWithoutLeadProjectInput, ProjectUncheckedCreateWithoutLeadProjectInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutLeadProjectInput
    connect?: ProjectWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutLeadProjectInput = {
    create?: XOR<OrganizationCreateWithoutLeadProjectInput, OrganizationUncheckedCreateWithoutLeadProjectInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLeadProjectInput
    connect?: OrganizationWhereUniqueInput
  }

  export type IntegrationUpdateOneRequiredWithoutLeadProjectNestedInput = {
    create?: XOR<IntegrationCreateWithoutLeadProjectInput, IntegrationUncheckedCreateWithoutLeadProjectInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutLeadProjectInput
    upsert?: IntegrationUpsertWithoutLeadProjectInput
    connect?: IntegrationWhereUniqueInput
    update?: XOR<XOR<IntegrationUpdateToOneWithWhereWithoutLeadProjectInput, IntegrationUpdateWithoutLeadProjectInput>, IntegrationUncheckedUpdateWithoutLeadProjectInput>
  }

  export type LeadUpdateOneRequiredWithoutProjectNestedInput = {
    create?: XOR<LeadCreateWithoutProjectInput, LeadUncheckedCreateWithoutProjectInput>
    connectOrCreate?: LeadCreateOrConnectWithoutProjectInput
    upsert?: LeadUpsertWithoutProjectInput
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutProjectInput, LeadUpdateWithoutProjectInput>, LeadUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectUpdateOneRequiredWithoutLeadProjectNestedInput = {
    create?: XOR<ProjectCreateWithoutLeadProjectInput, ProjectUncheckedCreateWithoutLeadProjectInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutLeadProjectInput
    upsert?: ProjectUpsertWithoutLeadProjectInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutLeadProjectInput, ProjectUpdateWithoutLeadProjectInput>, ProjectUncheckedUpdateWithoutLeadProjectInput>
  }

  export type OrganizationUpdateOneRequiredWithoutLeadProjectNestedInput = {
    create?: XOR<OrganizationCreateWithoutLeadProjectInput, OrganizationUncheckedCreateWithoutLeadProjectInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLeadProjectInput
    upsert?: OrganizationUpsertWithoutLeadProjectInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutLeadProjectInput, OrganizationUpdateWithoutLeadProjectInput>, OrganizationUncheckedUpdateWithoutLeadProjectInput>
  }

  export type OrganizationCreateNestedOneWithoutContactInput = {
    create?: XOR<OrganizationCreateWithoutContactInput, OrganizationUncheckedCreateWithoutContactInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutContactInput
    connect?: OrganizationWhereUniqueInput
  }

  export type LeadCreateNestedOneWithoutContactsInput = {
    create?: XOR<LeadCreateWithoutContactsInput, LeadUncheckedCreateWithoutContactsInput>
    connectOrCreate?: LeadCreateOrConnectWithoutContactsInput
    connect?: LeadWhereUniqueInput
  }

  export type EmailCreateNestedManyWithoutContactInput = {
    create?: XOR<EmailCreateWithoutContactInput, EmailUncheckedCreateWithoutContactInput> | EmailCreateWithoutContactInput[] | EmailUncheckedCreateWithoutContactInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutContactInput | EmailCreateOrConnectWithoutContactInput[]
    createMany?: EmailCreateManyContactInputEnvelope
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
  }

  export type EmailUncheckedCreateNestedManyWithoutContactInput = {
    create?: XOR<EmailCreateWithoutContactInput, EmailUncheckedCreateWithoutContactInput> | EmailCreateWithoutContactInput[] | EmailUncheckedCreateWithoutContactInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutContactInput | EmailCreateOrConnectWithoutContactInput[]
    createMany?: EmailCreateManyContactInputEnvelope
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutContactNestedInput = {
    create?: XOR<OrganizationCreateWithoutContactInput, OrganizationUncheckedCreateWithoutContactInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutContactInput
    upsert?: OrganizationUpsertWithoutContactInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutContactInput, OrganizationUpdateWithoutContactInput>, OrganizationUncheckedUpdateWithoutContactInput>
  }

  export type LeadUpdateOneRequiredWithoutContactsNestedInput = {
    create?: XOR<LeadCreateWithoutContactsInput, LeadUncheckedCreateWithoutContactsInput>
    connectOrCreate?: LeadCreateOrConnectWithoutContactsInput
    upsert?: LeadUpsertWithoutContactsInput
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutContactsInput, LeadUpdateWithoutContactsInput>, LeadUncheckedUpdateWithoutContactsInput>
  }

  export type EmailUpdateManyWithoutContactNestedInput = {
    create?: XOR<EmailCreateWithoutContactInput, EmailUncheckedCreateWithoutContactInput> | EmailCreateWithoutContactInput[] | EmailUncheckedCreateWithoutContactInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutContactInput | EmailCreateOrConnectWithoutContactInput[]
    upsert?: EmailUpsertWithWhereUniqueWithoutContactInput | EmailUpsertWithWhereUniqueWithoutContactInput[]
    createMany?: EmailCreateManyContactInputEnvelope
    set?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    disconnect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    delete?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    update?: EmailUpdateWithWhereUniqueWithoutContactInput | EmailUpdateWithWhereUniqueWithoutContactInput[]
    updateMany?: EmailUpdateManyWithWhereWithoutContactInput | EmailUpdateManyWithWhereWithoutContactInput[]
    deleteMany?: EmailScalarWhereInput | EmailScalarWhereInput[]
  }

  export type EmailUncheckedUpdateManyWithoutContactNestedInput = {
    create?: XOR<EmailCreateWithoutContactInput, EmailUncheckedCreateWithoutContactInput> | EmailCreateWithoutContactInput[] | EmailUncheckedCreateWithoutContactInput[]
    connectOrCreate?: EmailCreateOrConnectWithoutContactInput | EmailCreateOrConnectWithoutContactInput[]
    upsert?: EmailUpsertWithWhereUniqueWithoutContactInput | EmailUpsertWithWhereUniqueWithoutContactInput[]
    createMany?: EmailCreateManyContactInputEnvelope
    set?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    disconnect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    delete?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    connect?: EmailWhereUniqueInput | EmailWhereUniqueInput[]
    update?: EmailUpdateWithWhereUniqueWithoutContactInput | EmailUpdateWithWhereUniqueWithoutContactInput[]
    updateMany?: EmailUpdateManyWithWhereWithoutContactInput | EmailUpdateManyWithWhereWithoutContactInput[]
    deleteMany?: EmailScalarWhereInput | EmailScalarWhereInput[]
  }

  export type LeadCreateNestedOneWithoutAttachmentsInput = {
    create?: XOR<LeadCreateWithoutAttachmentsInput, LeadUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: LeadCreateOrConnectWithoutAttachmentsInput
    connect?: LeadWhereUniqueInput
  }

  export type LeadUpdateOneRequiredWithoutAttachmentsNestedInput = {
    create?: XOR<LeadCreateWithoutAttachmentsInput, LeadUncheckedCreateWithoutAttachmentsInput>
    connectOrCreate?: LeadCreateOrConnectWithoutAttachmentsInput
    upsert?: LeadUpsertWithoutAttachmentsInput
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutAttachmentsInput, LeadUpdateWithoutAttachmentsInput>, LeadUncheckedUpdateWithoutAttachmentsInput>
  }

  export type OrganizationCreateNestedOneWithoutLeadActivityInput = {
    create?: XOR<OrganizationCreateWithoutLeadActivityInput, OrganizationUncheckedCreateWithoutLeadActivityInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLeadActivityInput
    connect?: OrganizationWhereUniqueInput
  }

  export type LeadCreateNestedOneWithoutLeadActivitiesInput = {
    create?: XOR<LeadCreateWithoutLeadActivitiesInput, LeadUncheckedCreateWithoutLeadActivitiesInput>
    connectOrCreate?: LeadCreateOrConnectWithoutLeadActivitiesInput
    connect?: LeadWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutLeadActivityInput = {
    create?: XOR<UserCreateWithoutLeadActivityInput, UserUncheckedCreateWithoutLeadActivityInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeadActivityInput
    connect?: UserWhereUniqueInput
  }

  export type LeadNotesCreateNestedOneWithoutLeadActivityInput = {
    create?: XOR<LeadNotesCreateWithoutLeadActivityInput, LeadNotesUncheckedCreateWithoutLeadActivityInput>
    connectOrCreate?: LeadNotesCreateOrConnectWithoutLeadActivityInput
    connect?: LeadNotesWhereUniqueInput
  }

  export type EnumLeadActivityTypeFieldUpdateOperationsInput = {
    set?: $Enums.LeadActivityType
  }

  export type OrganizationUpdateOneRequiredWithoutLeadActivityNestedInput = {
    create?: XOR<OrganizationCreateWithoutLeadActivityInput, OrganizationUncheckedCreateWithoutLeadActivityInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLeadActivityInput
    upsert?: OrganizationUpsertWithoutLeadActivityInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutLeadActivityInput, OrganizationUpdateWithoutLeadActivityInput>, OrganizationUncheckedUpdateWithoutLeadActivityInput>
  }

  export type LeadUpdateOneRequiredWithoutLeadActivitiesNestedInput = {
    create?: XOR<LeadCreateWithoutLeadActivitiesInput, LeadUncheckedCreateWithoutLeadActivitiesInput>
    connectOrCreate?: LeadCreateOrConnectWithoutLeadActivitiesInput
    upsert?: LeadUpsertWithoutLeadActivitiesInput
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutLeadActivitiesInput, LeadUpdateWithoutLeadActivitiesInput>, LeadUncheckedUpdateWithoutLeadActivitiesInput>
  }

  export type UserUpdateOneWithoutLeadActivityNestedInput = {
    create?: XOR<UserCreateWithoutLeadActivityInput, UserUncheckedCreateWithoutLeadActivityInput>
    connectOrCreate?: UserCreateOrConnectWithoutLeadActivityInput
    upsert?: UserUpsertWithoutLeadActivityInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLeadActivityInput, UserUpdateWithoutLeadActivityInput>, UserUncheckedUpdateWithoutLeadActivityInput>
  }

  export type LeadNotesUpdateOneWithoutLeadActivityNestedInput = {
    create?: XOR<LeadNotesCreateWithoutLeadActivityInput, LeadNotesUncheckedCreateWithoutLeadActivityInput>
    connectOrCreate?: LeadNotesCreateOrConnectWithoutLeadActivityInput
    upsert?: LeadNotesUpsertWithoutLeadActivityInput
    disconnect?: LeadNotesWhereInput | boolean
    delete?: LeadNotesWhereInput | boolean
    connect?: LeadNotesWhereUniqueInput
    update?: XOR<XOR<LeadNotesUpdateToOneWithWhereWithoutLeadActivityInput, LeadNotesUpdateWithoutLeadActivityInput>, LeadNotesUncheckedUpdateWithoutLeadActivityInput>
  }

  export type EmailCreatetoInput = {
    set: string[]
  }

  export type EmailCreateccInput = {
    set: string[]
  }

  export type EmailCreatebccInput = {
    set: string[]
  }

  export type EmailCreatelabelIdsInput = {
    set: string[]
  }

  export type ContactCreateNestedOneWithoutEmailInput = {
    create?: XOR<ContactCreateWithoutEmailInput, ContactUncheckedCreateWithoutEmailInput>
    connectOrCreate?: ContactCreateOrConnectWithoutEmailInput
    connect?: ContactWhereUniqueInput
  }

  export type LeadCreateNestedOneWithoutEmailInput = {
    create?: XOR<LeadCreateWithoutEmailInput, LeadUncheckedCreateWithoutEmailInput>
    connectOrCreate?: LeadCreateOrConnectWithoutEmailInput
    connect?: LeadWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutEmailInput = {
    create?: XOR<OrganizationCreateWithoutEmailInput, OrganizationUncheckedCreateWithoutEmailInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEmailInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EmailQueueCreateNestedManyWithoutEmailInput = {
    create?: XOR<EmailQueueCreateWithoutEmailInput, EmailQueueUncheckedCreateWithoutEmailInput> | EmailQueueCreateWithoutEmailInput[] | EmailQueueUncheckedCreateWithoutEmailInput[]
    connectOrCreate?: EmailQueueCreateOrConnectWithoutEmailInput | EmailQueueCreateOrConnectWithoutEmailInput[]
    createMany?: EmailQueueCreateManyEmailInputEnvelope
    connect?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
  }

  export type EmailQueueUncheckedCreateNestedManyWithoutEmailInput = {
    create?: XOR<EmailQueueCreateWithoutEmailInput, EmailQueueUncheckedCreateWithoutEmailInput> | EmailQueueCreateWithoutEmailInput[] | EmailQueueUncheckedCreateWithoutEmailInput[]
    connectOrCreate?: EmailQueueCreateOrConnectWithoutEmailInput | EmailQueueCreateOrConnectWithoutEmailInput[]
    createMany?: EmailQueueCreateManyEmailInputEnvelope
    connect?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
  }

  export type EmailUpdatetoInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EmailUpdateccInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EmailUpdatebccInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumEmailStatusFieldUpdateOperationsInput = {
    set?: $Enums.EmailStatus
  }

  export type EmailUpdatelabelIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumIntegrationTypeFieldUpdateOperationsInput = {
    set?: $Enums.IntegrationType
  }

  export type ContactUpdateOneWithoutEmailNestedInput = {
    create?: XOR<ContactCreateWithoutEmailInput, ContactUncheckedCreateWithoutEmailInput>
    connectOrCreate?: ContactCreateOrConnectWithoutEmailInput
    upsert?: ContactUpsertWithoutEmailInput
    disconnect?: ContactWhereInput | boolean
    delete?: ContactWhereInput | boolean
    connect?: ContactWhereUniqueInput
    update?: XOR<XOR<ContactUpdateToOneWithWhereWithoutEmailInput, ContactUpdateWithoutEmailInput>, ContactUncheckedUpdateWithoutEmailInput>
  }

  export type LeadUpdateOneWithoutEmailNestedInput = {
    create?: XOR<LeadCreateWithoutEmailInput, LeadUncheckedCreateWithoutEmailInput>
    connectOrCreate?: LeadCreateOrConnectWithoutEmailInput
    upsert?: LeadUpsertWithoutEmailInput
    disconnect?: LeadWhereInput | boolean
    delete?: LeadWhereInput | boolean
    connect?: LeadWhereUniqueInput
    update?: XOR<XOR<LeadUpdateToOneWithWhereWithoutEmailInput, LeadUpdateWithoutEmailInput>, LeadUncheckedUpdateWithoutEmailInput>
  }

  export type OrganizationUpdateOneRequiredWithoutEmailNestedInput = {
    create?: XOR<OrganizationCreateWithoutEmailInput, OrganizationUncheckedCreateWithoutEmailInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutEmailInput
    upsert?: OrganizationUpsertWithoutEmailInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutEmailInput, OrganizationUpdateWithoutEmailInput>, OrganizationUncheckedUpdateWithoutEmailInput>
  }

  export type EmailQueueUpdateManyWithoutEmailNestedInput = {
    create?: XOR<EmailQueueCreateWithoutEmailInput, EmailQueueUncheckedCreateWithoutEmailInput> | EmailQueueCreateWithoutEmailInput[] | EmailQueueUncheckedCreateWithoutEmailInput[]
    connectOrCreate?: EmailQueueCreateOrConnectWithoutEmailInput | EmailQueueCreateOrConnectWithoutEmailInput[]
    upsert?: EmailQueueUpsertWithWhereUniqueWithoutEmailInput | EmailQueueUpsertWithWhereUniqueWithoutEmailInput[]
    createMany?: EmailQueueCreateManyEmailInputEnvelope
    set?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
    disconnect?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
    delete?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
    connect?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
    update?: EmailQueueUpdateWithWhereUniqueWithoutEmailInput | EmailQueueUpdateWithWhereUniqueWithoutEmailInput[]
    updateMany?: EmailQueueUpdateManyWithWhereWithoutEmailInput | EmailQueueUpdateManyWithWhereWithoutEmailInput[]
    deleteMany?: EmailQueueScalarWhereInput | EmailQueueScalarWhereInput[]
  }

  export type EmailQueueUncheckedUpdateManyWithoutEmailNestedInput = {
    create?: XOR<EmailQueueCreateWithoutEmailInput, EmailQueueUncheckedCreateWithoutEmailInput> | EmailQueueCreateWithoutEmailInput[] | EmailQueueUncheckedCreateWithoutEmailInput[]
    connectOrCreate?: EmailQueueCreateOrConnectWithoutEmailInput | EmailQueueCreateOrConnectWithoutEmailInput[]
    upsert?: EmailQueueUpsertWithWhereUniqueWithoutEmailInput | EmailQueueUpsertWithWhereUniqueWithoutEmailInput[]
    createMany?: EmailQueueCreateManyEmailInputEnvelope
    set?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
    disconnect?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
    delete?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
    connect?: EmailQueueWhereUniqueInput | EmailQueueWhereUniqueInput[]
    update?: EmailQueueUpdateWithWhereUniqueWithoutEmailInput | EmailQueueUpdateWithWhereUniqueWithoutEmailInput[]
    updateMany?: EmailQueueUpdateManyWithWhereWithoutEmailInput | EmailQueueUpdateManyWithWhereWithoutEmailInput[]
    deleteMany?: EmailQueueScalarWhereInput | EmailQueueScalarWhereInput[]
  }

  export type EmailCreateNestedOneWithoutEmailQueueInput = {
    create?: XOR<EmailCreateWithoutEmailQueueInput, EmailUncheckedCreateWithoutEmailQueueInput>
    connectOrCreate?: EmailCreateOrConnectWithoutEmailQueueInput
    connect?: EmailWhereUniqueInput
  }

  export type EnumQueueStatusFieldUpdateOperationsInput = {
    set?: $Enums.QueueStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EmailUpdateOneRequiredWithoutEmailQueueNestedInput = {
    create?: XOR<EmailCreateWithoutEmailQueueInput, EmailUncheckedCreateWithoutEmailQueueInput>
    connectOrCreate?: EmailCreateOrConnectWithoutEmailQueueInput
    upsert?: EmailUpsertWithoutEmailQueueInput
    connect?: EmailWhereUniqueInput
    update?: XOR<XOR<EmailUpdateToOneWithWhereWithoutEmailQueueInput, EmailUpdateWithoutEmailQueueInput>, EmailUncheckedUpdateWithoutEmailQueueInput>
  }

  export type OrgMemberCreateNestedOneWithoutIntegrationInput = {
    create?: XOR<OrgMemberCreateWithoutIntegrationInput, OrgMemberUncheckedCreateWithoutIntegrationInput>
    connectOrCreate?: OrgMemberCreateOrConnectWithoutIntegrationInput
    connect?: OrgMemberWhereUniqueInput
  }

  export type ProjectCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<ProjectCreateWithoutIntegrationInput, ProjectUncheckedCreateWithoutIntegrationInput> | ProjectCreateWithoutIntegrationInput[] | ProjectUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutIntegrationInput | ProjectCreateOrConnectWithoutIntegrationInput[]
    createMany?: ProjectCreateManyIntegrationInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type OrganizationCreateNestedOneWithoutIntegrationsInput = {
    create?: XOR<OrganizationCreateWithoutIntegrationsInput, OrganizationUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutIntegrationsInput
    connect?: OrganizationWhereUniqueInput
  }

  export type LeadCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<LeadCreateWithoutIntegrationInput, LeadUncheckedCreateWithoutIntegrationInput> | LeadCreateWithoutIntegrationInput[] | LeadUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutIntegrationInput | LeadCreateOrConnectWithoutIntegrationInput[]
    createMany?: LeadCreateManyIntegrationInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type LeadProjectCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<LeadProjectCreateWithoutIntegrationInput, LeadProjectUncheckedCreateWithoutIntegrationInput> | LeadProjectCreateWithoutIntegrationInput[] | LeadProjectUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutIntegrationInput | LeadProjectCreateOrConnectWithoutIntegrationInput[]
    createMany?: LeadProjectCreateManyIntegrationInputEnvelope
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
  }

  export type JobCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<JobCreateWithoutIntegrationInput, JobUncheckedCreateWithoutIntegrationInput> | JobCreateWithoutIntegrationInput[] | JobUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutIntegrationInput | JobCreateOrConnectWithoutIntegrationInput[]
    createMany?: JobCreateManyIntegrationInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type MailServiceFromEmailCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<MailServiceFromEmailCreateWithoutIntegrationInput, MailServiceFromEmailUncheckedCreateWithoutIntegrationInput> | MailServiceFromEmailCreateWithoutIntegrationInput[] | MailServiceFromEmailUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: MailServiceFromEmailCreateOrConnectWithoutIntegrationInput | MailServiceFromEmailCreateOrConnectWithoutIntegrationInput[]
    createMany?: MailServiceFromEmailCreateManyIntegrationInputEnvelope
    connect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<ProjectCreateWithoutIntegrationInput, ProjectUncheckedCreateWithoutIntegrationInput> | ProjectCreateWithoutIntegrationInput[] | ProjectUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutIntegrationInput | ProjectCreateOrConnectWithoutIntegrationInput[]
    createMany?: ProjectCreateManyIntegrationInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type LeadUncheckedCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<LeadCreateWithoutIntegrationInput, LeadUncheckedCreateWithoutIntegrationInput> | LeadCreateWithoutIntegrationInput[] | LeadUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutIntegrationInput | LeadCreateOrConnectWithoutIntegrationInput[]
    createMany?: LeadCreateManyIntegrationInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type LeadProjectUncheckedCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<LeadProjectCreateWithoutIntegrationInput, LeadProjectUncheckedCreateWithoutIntegrationInput> | LeadProjectCreateWithoutIntegrationInput[] | LeadProjectUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutIntegrationInput | LeadProjectCreateOrConnectWithoutIntegrationInput[]
    createMany?: LeadProjectCreateManyIntegrationInputEnvelope
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
  }

  export type JobUncheckedCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<JobCreateWithoutIntegrationInput, JobUncheckedCreateWithoutIntegrationInput> | JobCreateWithoutIntegrationInput[] | JobUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutIntegrationInput | JobCreateOrConnectWithoutIntegrationInput[]
    createMany?: JobCreateManyIntegrationInputEnvelope
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
  }

  export type MailServiceFromEmailUncheckedCreateNestedManyWithoutIntegrationInput = {
    create?: XOR<MailServiceFromEmailCreateWithoutIntegrationInput, MailServiceFromEmailUncheckedCreateWithoutIntegrationInput> | MailServiceFromEmailCreateWithoutIntegrationInput[] | MailServiceFromEmailUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: MailServiceFromEmailCreateOrConnectWithoutIntegrationInput | MailServiceFromEmailCreateOrConnectWithoutIntegrationInput[]
    createMany?: MailServiceFromEmailCreateManyIntegrationInputEnvelope
    connect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
  }

  export type EnumIntegrationCategoryFieldUpdateOperationsInput = {
    set?: $Enums.IntegrationCategory
  }

  export type EnumIntegrationSharingTypeFieldUpdateOperationsInput = {
    set?: $Enums.IntegrationSharingType
  }

  export type OrgMemberUpdateOneWithoutIntegrationNestedInput = {
    create?: XOR<OrgMemberCreateWithoutIntegrationInput, OrgMemberUncheckedCreateWithoutIntegrationInput>
    connectOrCreate?: OrgMemberCreateOrConnectWithoutIntegrationInput
    upsert?: OrgMemberUpsertWithoutIntegrationInput
    disconnect?: OrgMemberWhereInput | boolean
    delete?: OrgMemberWhereInput | boolean
    connect?: OrgMemberWhereUniqueInput
    update?: XOR<XOR<OrgMemberUpdateToOneWithWhereWithoutIntegrationInput, OrgMemberUpdateWithoutIntegrationInput>, OrgMemberUncheckedUpdateWithoutIntegrationInput>
  }

  export type ProjectUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<ProjectCreateWithoutIntegrationInput, ProjectUncheckedCreateWithoutIntegrationInput> | ProjectCreateWithoutIntegrationInput[] | ProjectUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutIntegrationInput | ProjectCreateOrConnectWithoutIntegrationInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutIntegrationInput | ProjectUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: ProjectCreateManyIntegrationInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutIntegrationInput | ProjectUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutIntegrationInput | ProjectUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput = {
    create?: XOR<OrganizationCreateWithoutIntegrationsInput, OrganizationUncheckedCreateWithoutIntegrationsInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutIntegrationsInput
    upsert?: OrganizationUpsertWithoutIntegrationsInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutIntegrationsInput, OrganizationUpdateWithoutIntegrationsInput>, OrganizationUncheckedUpdateWithoutIntegrationsInput>
  }

  export type LeadUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<LeadCreateWithoutIntegrationInput, LeadUncheckedCreateWithoutIntegrationInput> | LeadCreateWithoutIntegrationInput[] | LeadUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutIntegrationInput | LeadCreateOrConnectWithoutIntegrationInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutIntegrationInput | LeadUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: LeadCreateManyIntegrationInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutIntegrationInput | LeadUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutIntegrationInput | LeadUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type LeadProjectUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<LeadProjectCreateWithoutIntegrationInput, LeadProjectUncheckedCreateWithoutIntegrationInput> | LeadProjectCreateWithoutIntegrationInput[] | LeadProjectUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutIntegrationInput | LeadProjectCreateOrConnectWithoutIntegrationInput[]
    upsert?: LeadProjectUpsertWithWhereUniqueWithoutIntegrationInput | LeadProjectUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: LeadProjectCreateManyIntegrationInputEnvelope
    set?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    disconnect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    delete?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    update?: LeadProjectUpdateWithWhereUniqueWithoutIntegrationInput | LeadProjectUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: LeadProjectUpdateManyWithWhereWithoutIntegrationInput | LeadProjectUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
  }

  export type JobUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<JobCreateWithoutIntegrationInput, JobUncheckedCreateWithoutIntegrationInput> | JobCreateWithoutIntegrationInput[] | JobUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutIntegrationInput | JobCreateOrConnectWithoutIntegrationInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutIntegrationInput | JobUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: JobCreateManyIntegrationInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutIntegrationInput | JobUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: JobUpdateManyWithWhereWithoutIntegrationInput | JobUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type MailServiceFromEmailUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<MailServiceFromEmailCreateWithoutIntegrationInput, MailServiceFromEmailUncheckedCreateWithoutIntegrationInput> | MailServiceFromEmailCreateWithoutIntegrationInput[] | MailServiceFromEmailUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: MailServiceFromEmailCreateOrConnectWithoutIntegrationInput | MailServiceFromEmailCreateOrConnectWithoutIntegrationInput[]
    upsert?: MailServiceFromEmailUpsertWithWhereUniqueWithoutIntegrationInput | MailServiceFromEmailUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: MailServiceFromEmailCreateManyIntegrationInputEnvelope
    set?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    disconnect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    delete?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    connect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    update?: MailServiceFromEmailUpdateWithWhereUniqueWithoutIntegrationInput | MailServiceFromEmailUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: MailServiceFromEmailUpdateManyWithWhereWithoutIntegrationInput | MailServiceFromEmailUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: MailServiceFromEmailScalarWhereInput | MailServiceFromEmailScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<ProjectCreateWithoutIntegrationInput, ProjectUncheckedCreateWithoutIntegrationInput> | ProjectCreateWithoutIntegrationInput[] | ProjectUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutIntegrationInput | ProjectCreateOrConnectWithoutIntegrationInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutIntegrationInput | ProjectUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: ProjectCreateManyIntegrationInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutIntegrationInput | ProjectUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutIntegrationInput | ProjectUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type LeadUncheckedUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<LeadCreateWithoutIntegrationInput, LeadUncheckedCreateWithoutIntegrationInput> | LeadCreateWithoutIntegrationInput[] | LeadUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutIntegrationInput | LeadCreateOrConnectWithoutIntegrationInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutIntegrationInput | LeadUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: LeadCreateManyIntegrationInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutIntegrationInput | LeadUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutIntegrationInput | LeadUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type LeadProjectUncheckedUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<LeadProjectCreateWithoutIntegrationInput, LeadProjectUncheckedCreateWithoutIntegrationInput> | LeadProjectCreateWithoutIntegrationInput[] | LeadProjectUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: LeadProjectCreateOrConnectWithoutIntegrationInput | LeadProjectCreateOrConnectWithoutIntegrationInput[]
    upsert?: LeadProjectUpsertWithWhereUniqueWithoutIntegrationInput | LeadProjectUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: LeadProjectCreateManyIntegrationInputEnvelope
    set?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    disconnect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    delete?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    connect?: LeadProjectWhereUniqueInput | LeadProjectWhereUniqueInput[]
    update?: LeadProjectUpdateWithWhereUniqueWithoutIntegrationInput | LeadProjectUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: LeadProjectUpdateManyWithWhereWithoutIntegrationInput | LeadProjectUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
  }

  export type JobUncheckedUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<JobCreateWithoutIntegrationInput, JobUncheckedCreateWithoutIntegrationInput> | JobCreateWithoutIntegrationInput[] | JobUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: JobCreateOrConnectWithoutIntegrationInput | JobCreateOrConnectWithoutIntegrationInput[]
    upsert?: JobUpsertWithWhereUniqueWithoutIntegrationInput | JobUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: JobCreateManyIntegrationInputEnvelope
    set?: JobWhereUniqueInput | JobWhereUniqueInput[]
    disconnect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    delete?: JobWhereUniqueInput | JobWhereUniqueInput[]
    connect?: JobWhereUniqueInput | JobWhereUniqueInput[]
    update?: JobUpdateWithWhereUniqueWithoutIntegrationInput | JobUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: JobUpdateManyWithWhereWithoutIntegrationInput | JobUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: JobScalarWhereInput | JobScalarWhereInput[]
  }

  export type MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationNestedInput = {
    create?: XOR<MailServiceFromEmailCreateWithoutIntegrationInput, MailServiceFromEmailUncheckedCreateWithoutIntegrationInput> | MailServiceFromEmailCreateWithoutIntegrationInput[] | MailServiceFromEmailUncheckedCreateWithoutIntegrationInput[]
    connectOrCreate?: MailServiceFromEmailCreateOrConnectWithoutIntegrationInput | MailServiceFromEmailCreateOrConnectWithoutIntegrationInput[]
    upsert?: MailServiceFromEmailUpsertWithWhereUniqueWithoutIntegrationInput | MailServiceFromEmailUpsertWithWhereUniqueWithoutIntegrationInput[]
    createMany?: MailServiceFromEmailCreateManyIntegrationInputEnvelope
    set?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    disconnect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    delete?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    connect?: MailServiceFromEmailWhereUniqueInput | MailServiceFromEmailWhereUniqueInput[]
    update?: MailServiceFromEmailUpdateWithWhereUniqueWithoutIntegrationInput | MailServiceFromEmailUpdateWithWhereUniqueWithoutIntegrationInput[]
    updateMany?: MailServiceFromEmailUpdateManyWithWhereWithoutIntegrationInput | MailServiceFromEmailUpdateManyWithWhereWithoutIntegrationInput[]
    deleteMany?: MailServiceFromEmailScalarWhereInput | MailServiceFromEmailScalarWhereInput[]
  }

  export type IntegrationCreateNestedOneWithoutMailServiceFromEmailInput = {
    create?: XOR<IntegrationCreateWithoutMailServiceFromEmailInput, IntegrationUncheckedCreateWithoutMailServiceFromEmailInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutMailServiceFromEmailInput
    connect?: IntegrationWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutMailServiceFromEmailInput = {
    create?: XOR<OrganizationCreateWithoutMailServiceFromEmailInput, OrganizationUncheckedCreateWithoutMailServiceFromEmailInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMailServiceFromEmailInput
    connect?: OrganizationWhereUniqueInput
  }

  export type IntegrationUpdateOneRequiredWithoutMailServiceFromEmailNestedInput = {
    create?: XOR<IntegrationCreateWithoutMailServiceFromEmailInput, IntegrationUncheckedCreateWithoutMailServiceFromEmailInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutMailServiceFromEmailInput
    upsert?: IntegrationUpsertWithoutMailServiceFromEmailInput
    connect?: IntegrationWhereUniqueInput
    update?: XOR<XOR<IntegrationUpdateToOneWithWhereWithoutMailServiceFromEmailInput, IntegrationUpdateWithoutMailServiceFromEmailInput>, IntegrationUncheckedUpdateWithoutMailServiceFromEmailInput>
  }

  export type OrganizationUpdateOneRequiredWithoutMailServiceFromEmailNestedInput = {
    create?: XOR<OrganizationCreateWithoutMailServiceFromEmailInput, OrganizationUncheckedCreateWithoutMailServiceFromEmailInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMailServiceFromEmailInput
    upsert?: OrganizationUpsertWithoutMailServiceFromEmailInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutMailServiceFromEmailInput, OrganizationUpdateWithoutMailServiceFromEmailInput>, OrganizationUncheckedUpdateWithoutMailServiceFromEmailInput>
  }

  export type OrganizationCreateNestedOneWithoutUnsubscribeLinkInput = {
    create?: XOR<OrganizationCreateWithoutUnsubscribeLinkInput, OrganizationUncheckedCreateWithoutUnsubscribeLinkInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUnsubscribeLinkInput
    connect?: OrganizationWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutUnsubscribeLinkNestedInput = {
    create?: XOR<OrganizationCreateWithoutUnsubscribeLinkInput, OrganizationUncheckedCreateWithoutUnsubscribeLinkInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUnsubscribeLinkInput
    upsert?: OrganizationUpsertWithoutUnsubscribeLinkInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUnsubscribeLinkInput, OrganizationUpdateWithoutUnsubscribeLinkInput>, OrganizationUncheckedUpdateWithoutUnsubscribeLinkInput>
  }

  export type IntegrationCreateNestedOneWithoutJobsInput = {
    create?: XOR<IntegrationCreateWithoutJobsInput, IntegrationUncheckedCreateWithoutJobsInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutJobsInput
    connect?: IntegrationWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutJobInput = {
    create?: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput> | TaskCreateWithoutJobInput[] | TaskUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutJobInput | TaskCreateOrConnectWithoutJobInput[]
    createMany?: TaskCreateManyJobInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutJobInput = {
    create?: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput> | TaskCreateWithoutJobInput[] | TaskUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutJobInput | TaskCreateOrConnectWithoutJobInput[]
    createMany?: TaskCreateManyJobInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type EnumJobStatusFieldUpdateOperationsInput = {
    set?: $Enums.JobStatus
  }

  export type IntegrationUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<IntegrationCreateWithoutJobsInput, IntegrationUncheckedCreateWithoutJobsInput>
    connectOrCreate?: IntegrationCreateOrConnectWithoutJobsInput
    upsert?: IntegrationUpsertWithoutJobsInput
    connect?: IntegrationWhereUniqueInput
    update?: XOR<XOR<IntegrationUpdateToOneWithWhereWithoutJobsInput, IntegrationUpdateWithoutJobsInput>, IntegrationUncheckedUpdateWithoutJobsInput>
  }

  export type TaskUpdateManyWithoutJobNestedInput = {
    create?: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput> | TaskCreateWithoutJobInput[] | TaskUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutJobInput | TaskCreateOrConnectWithoutJobInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutJobInput | TaskUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: TaskCreateManyJobInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutJobInput | TaskUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutJobInput | TaskUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutJobNestedInput = {
    create?: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput> | TaskCreateWithoutJobInput[] | TaskUncheckedCreateWithoutJobInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutJobInput | TaskCreateOrConnectWithoutJobInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutJobInput | TaskUpsertWithWhereUniqueWithoutJobInput[]
    createMany?: TaskCreateManyJobInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutJobInput | TaskUpdateWithWhereUniqueWithoutJobInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutJobInput | TaskUpdateManyWithWhereWithoutJobInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type JobCreateNestedOneWithoutTasksInput = {
    create?: XOR<JobCreateWithoutTasksInput, JobUncheckedCreateWithoutTasksInput>
    connectOrCreate?: JobCreateOrConnectWithoutTasksInput
    connect?: JobWhereUniqueInput
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type JobUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<JobCreateWithoutTasksInput, JobUncheckedCreateWithoutTasksInput>
    connectOrCreate?: JobCreateOrConnectWithoutTasksInput
    upsert?: JobUpsertWithoutTasksInput
    connect?: JobWhereUniqueInput
    update?: XOR<XOR<JobUpdateToOneWithWhereWithoutTasksInput, JobUpdateWithoutTasksInput>, JobUncheckedUpdateWithoutTasksInput>
  }

  export type OrganizationCreateNestedOneWithoutWebhooksInput = {
    create?: XOR<OrganizationCreateWithoutWebhooksInput, OrganizationUncheckedCreateWithoutWebhooksInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutWebhooksInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EnumWebhookTypeFieldUpdateOperationsInput = {
    set?: $Enums.WebhookType
  }

  export type OrganizationUpdateOneRequiredWithoutWebhooksNestedInput = {
    create?: XOR<OrganizationCreateWithoutWebhooksInput, OrganizationUncheckedCreateWithoutWebhooksInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutWebhooksInput
    upsert?: OrganizationUpsertWithoutWebhooksInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutWebhooksInput, OrganizationUpdateWithoutWebhooksInput>, OrganizationUncheckedUpdateWithoutWebhooksInput>
  }

  export type OrganizationCreateNestedOneWithoutTemplateInput = {
    create?: XOR<OrganizationCreateWithoutTemplateInput, OrganizationUncheckedCreateWithoutTemplateInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTemplateInput
    connect?: OrganizationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTemplatesInput = {
    create?: XOR<UserCreateWithoutTemplatesInput, UserUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTemplatesInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationUpdateOneWithoutTemplateNestedInput = {
    create?: XOR<OrganizationCreateWithoutTemplateInput, OrganizationUncheckedCreateWithoutTemplateInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTemplateInput
    upsert?: OrganizationUpsertWithoutTemplateInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutTemplateInput, OrganizationUpdateWithoutTemplateInput>, OrganizationUncheckedUpdateWithoutTemplateInput>
  }

  export type UserUpdateOneWithoutTemplatesNestedInput = {
    create?: XOR<UserCreateWithoutTemplatesInput, UserUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: UserCreateOrConnectWithoutTemplatesInput
    upsert?: UserUpsertWithoutTemplatesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTemplatesInput, UserUpdateWithoutTemplatesInput>, UserUncheckedUpdateWithoutTemplatesInput>
  }

  export type LeadCreateNestedManyWithoutStatusInput = {
    create?: XOR<LeadCreateWithoutStatusInput, LeadUncheckedCreateWithoutStatusInput> | LeadCreateWithoutStatusInput[] | LeadUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutStatusInput | LeadCreateOrConnectWithoutStatusInput[]
    createMany?: LeadCreateManyStatusInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type OrganizationCreateNestedOneWithoutLeadStatusInput = {
    create?: XOR<OrganizationCreateWithoutLeadStatusInput, OrganizationUncheckedCreateWithoutLeadStatusInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLeadStatusInput
    connect?: OrganizationWhereUniqueInput
  }

  export type LeadUncheckedCreateNestedManyWithoutStatusInput = {
    create?: XOR<LeadCreateWithoutStatusInput, LeadUncheckedCreateWithoutStatusInput> | LeadCreateWithoutStatusInput[] | LeadUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutStatusInput | LeadCreateOrConnectWithoutStatusInput[]
    createMany?: LeadCreateManyStatusInputEnvelope
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
  }

  export type LeadUpdateManyWithoutStatusNestedInput = {
    create?: XOR<LeadCreateWithoutStatusInput, LeadUncheckedCreateWithoutStatusInput> | LeadCreateWithoutStatusInput[] | LeadUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutStatusInput | LeadCreateOrConnectWithoutStatusInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutStatusInput | LeadUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: LeadCreateManyStatusInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutStatusInput | LeadUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutStatusInput | LeadUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type OrganizationUpdateOneRequiredWithoutLeadStatusNestedInput = {
    create?: XOR<OrganizationCreateWithoutLeadStatusInput, OrganizationUncheckedCreateWithoutLeadStatusInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutLeadStatusInput
    upsert?: OrganizationUpsertWithoutLeadStatusInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutLeadStatusInput, OrganizationUpdateWithoutLeadStatusInput>, OrganizationUncheckedUpdateWithoutLeadStatusInput>
  }

  export type LeadUncheckedUpdateManyWithoutStatusNestedInput = {
    create?: XOR<LeadCreateWithoutStatusInput, LeadUncheckedCreateWithoutStatusInput> | LeadCreateWithoutStatusInput[] | LeadUncheckedCreateWithoutStatusInput[]
    connectOrCreate?: LeadCreateOrConnectWithoutStatusInput | LeadCreateOrConnectWithoutStatusInput[]
    upsert?: LeadUpsertWithWhereUniqueWithoutStatusInput | LeadUpsertWithWhereUniqueWithoutStatusInput[]
    createMany?: LeadCreateManyStatusInputEnvelope
    set?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    disconnect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    delete?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    connect?: LeadWhereUniqueInput | LeadWhereUniqueInput[]
    update?: LeadUpdateWithWhereUniqueWithoutStatusInput | LeadUpdateWithWhereUniqueWithoutStatusInput[]
    updateMany?: LeadUpdateManyWithWhereWithoutStatusInput | LeadUpdateManyWithWhereWithoutStatusInput[]
    deleteMany?: LeadScalarWhereInput | LeadScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumAuthenticationMethodFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthenticationMethod | EnumAuthenticationMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthenticationMethod[] | ListEnumAuthenticationMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthenticationMethod[] | ListEnumAuthenticationMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthenticationMethodFilter<$PrismaModel> | $Enums.AuthenticationMethod
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumAuthenticationMethodWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.AuthenticationMethod | EnumAuthenticationMethodFieldRefInput<$PrismaModel>
    in?: $Enums.AuthenticationMethod[] | ListEnumAuthenticationMethodFieldRefInput<$PrismaModel>
    notIn?: $Enums.AuthenticationMethod[] | ListEnumAuthenticationMethodFieldRefInput<$PrismaModel>
    not?: NestedEnumAuthenticationMethodWithAggregatesFilter<$PrismaModel> | $Enums.AuthenticationMethod
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumAuthenticationMethodFilter<$PrismaModel>
    _max?: NestedEnumAuthenticationMethodFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumOrgMemberRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgMemberRole | EnumOrgMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgMemberRole[] | ListEnumOrgMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgMemberRole[] | ListEnumOrgMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgMemberRoleFilter<$PrismaModel> | $Enums.OrgMemberRole
  }

  export type NestedEnumOrgMemberRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.OrgMemberRole | EnumOrgMemberRoleFieldRefInput<$PrismaModel>
    in?: $Enums.OrgMemberRole[] | ListEnumOrgMemberRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.OrgMemberRole[] | ListEnumOrgMemberRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumOrgMemberRoleWithAggregatesFilter<$PrismaModel> | $Enums.OrgMemberRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumOrgMemberRoleFilter<$PrismaModel>
    _max?: NestedEnumOrgMemberRoleFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel> | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumLeadActivityTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.LeadActivityType | EnumLeadActivityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LeadActivityType[] | ListEnumLeadActivityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeadActivityType[] | ListEnumLeadActivityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLeadActivityTypeFilter<$PrismaModel> | $Enums.LeadActivityType
  }

  export type NestedEnumLeadActivityTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LeadActivityType | EnumLeadActivityTypeFieldRefInput<$PrismaModel>
    in?: $Enums.LeadActivityType[] | ListEnumLeadActivityTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.LeadActivityType[] | ListEnumLeadActivityTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumLeadActivityTypeWithAggregatesFilter<$PrismaModel> | $Enums.LeadActivityType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLeadActivityTypeFilter<$PrismaModel>
    _max?: NestedEnumLeadActivityTypeFilter<$PrismaModel>
  }

  export type NestedEnumEmailStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusFilter<$PrismaModel> | $Enums.EmailStatus
  }

  export type NestedEnumIntegrationTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationType | EnumIntegrationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationType[] | ListEnumIntegrationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationType[] | ListEnumIntegrationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationTypeFilter<$PrismaModel> | $Enums.IntegrationType
  }

  export type NestedEnumEmailStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EmailStatus | EnumEmailStatusFieldRefInput<$PrismaModel>
    in?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.EmailStatus[] | ListEnumEmailStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumEmailStatusWithAggregatesFilter<$PrismaModel> | $Enums.EmailStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEmailStatusFilter<$PrismaModel>
    _max?: NestedEnumEmailStatusFilter<$PrismaModel>
  }

  export type NestedEnumIntegrationTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationType | EnumIntegrationTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationType[] | ListEnumIntegrationTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationType[] | ListEnumIntegrationTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationTypeWithAggregatesFilter<$PrismaModel> | $Enums.IntegrationType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIntegrationTypeFilter<$PrismaModel>
    _max?: NestedEnumIntegrationTypeFilter<$PrismaModel>
  }

  export type NestedEnumQueueStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QueueStatus | EnumQueueStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QueueStatus[] | ListEnumQueueStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QueueStatus[] | ListEnumQueueStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQueueStatusFilter<$PrismaModel> | $Enums.QueueStatus
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumQueueStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QueueStatus | EnumQueueStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QueueStatus[] | ListEnumQueueStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QueueStatus[] | ListEnumQueueStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQueueStatusWithAggregatesFilter<$PrismaModel> | $Enums.QueueStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQueueStatusFilter<$PrismaModel>
    _max?: NestedEnumQueueStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumIntegrationCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationCategory | EnumIntegrationCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationCategory[] | ListEnumIntegrationCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationCategory[] | ListEnumIntegrationCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationCategoryFilter<$PrismaModel> | $Enums.IntegrationCategory
  }

  export type NestedEnumIntegrationSharingTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationSharingType | EnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationSharingType[] | ListEnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationSharingType[] | ListEnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationSharingTypeFilter<$PrismaModel> | $Enums.IntegrationSharingType
  }

  export type NestedEnumIntegrationCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationCategory | EnumIntegrationCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationCategory[] | ListEnumIntegrationCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationCategory[] | ListEnumIntegrationCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationCategoryWithAggregatesFilter<$PrismaModel> | $Enums.IntegrationCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIntegrationCategoryFilter<$PrismaModel>
    _max?: NestedEnumIntegrationCategoryFilter<$PrismaModel>
  }

  export type NestedEnumIntegrationSharingTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.IntegrationSharingType | EnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    in?: $Enums.IntegrationSharingType[] | ListEnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.IntegrationSharingType[] | ListEnumIntegrationSharingTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumIntegrationSharingTypeWithAggregatesFilter<$PrismaModel> | $Enums.IntegrationSharingType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumIntegrationSharingTypeFilter<$PrismaModel>
    _max?: NestedEnumIntegrationSharingTypeFilter<$PrismaModel>
  }

  export type NestedEnumJobStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusFilter<$PrismaModel> | $Enums.JobStatus
  }

  export type NestedEnumJobStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.JobStatus | EnumJobStatusFieldRefInput<$PrismaModel>
    in?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.JobStatus[] | ListEnumJobStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumJobStatusWithAggregatesFilter<$PrismaModel> | $Enums.JobStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumJobStatusFilter<$PrismaModel>
    _max?: NestedEnumJobStatusFilter<$PrismaModel>
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedEnumWebhookTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.WebhookType | EnumWebhookTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WebhookType[] | ListEnumWebhookTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WebhookType[] | ListEnumWebhookTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWebhookTypeFilter<$PrismaModel> | $Enums.WebhookType
  }

  export type NestedEnumWebhookTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.WebhookType | EnumWebhookTypeFieldRefInput<$PrismaModel>
    in?: $Enums.WebhookType[] | ListEnumWebhookTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.WebhookType[] | ListEnumWebhookTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumWebhookTypeWithAggregatesFilter<$PrismaModel> | $Enums.WebhookType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumWebhookTypeFilter<$PrismaModel>
    _max?: NestedEnumWebhookTypeFilter<$PrismaModel>
  }

  export type LeadActivityCreateWithoutUserInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    type: $Enums.LeadActivityType
    organization: OrganizationCreateNestedOneWithoutLeadActivityInput
    lead: LeadCreateNestedOneWithoutLeadActivitiesInput
    note?: LeadNotesCreateNestedOneWithoutLeadActivityInput
  }

  export type LeadActivityUncheckedCreateWithoutUserInput = {
    id?: string
    leadId: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    noteId?: string | null
    type: $Enums.LeadActivityType
    orgId: string
  }

  export type LeadActivityCreateOrConnectWithoutUserInput = {
    where: LeadActivityWhereUniqueInput
    create: XOR<LeadActivityCreateWithoutUserInput, LeadActivityUncheckedCreateWithoutUserInput>
  }

  export type LeadActivityCreateManyUserInputEnvelope = {
    data: LeadActivityCreateManyUserInput | LeadActivityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrgMemberCreateWithoutUserInput = {
    id?: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
    organization: OrganizationCreateNestedOneWithoutMembersInput
    Integration?: IntegrationCreateNestedManyWithoutMembersInput
  }

  export type OrgMemberUncheckedCreateWithoutUserInput = {
    id?: string
    organizationId: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
    Integration?: IntegrationUncheckedCreateNestedManyWithoutMembersInput
  }

  export type OrgMemberCreateOrConnectWithoutUserInput = {
    where: OrgMemberWhereUniqueInput
    create: XOR<OrgMemberCreateWithoutUserInput, OrgMemberUncheckedCreateWithoutUserInput>
  }

  export type OrgMemberCreateManyUserInputEnvelope = {
    data: OrgMemberCreateManyUserInput | OrgMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OrgMemberInviteCreateWithoutInviterInput = {
    id?: string
    token: string
    email: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organization: OrganizationCreateNestedOneWithoutInvitesInput
  }

  export type OrgMemberInviteUncheckedCreateWithoutInviterInput = {
    id?: string
    token: string
    email: string
    role?: $Enums.OrgMemberRole
    organizationId: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type OrgMemberInviteCreateOrConnectWithoutInviterInput = {
    where: OrgMemberInviteWhereUniqueInput
    create: XOR<OrgMemberInviteCreateWithoutInviterInput, OrgMemberInviteUncheckedCreateWithoutInviterInput>
  }

  export type OrgMemberInviteCreateManyInviterInputEnvelope = {
    data: OrgMemberInviteCreateManyInviterInput | OrgMemberInviteCreateManyInviterInput[]
    skipDuplicates?: boolean
  }

  export type TemplateCreateWithoutUserInput = {
    id?: string
    html: string
    name: string
    createdAt: bigint | number
    isEnabled: boolean
    updatedAt: bigint | number
    deletedAt: bigint | number
    organization?: OrganizationCreateNestedOneWithoutTemplateInput
  }

  export type TemplateUncheckedCreateWithoutUserInput = {
    id?: string
    html: string
    name: string
    createdAt: bigint | number
    isEnabled: boolean
    updatedAt: bigint | number
    deletedAt: bigint | number
    orgId?: string | null
  }

  export type TemplateCreateOrConnectWithoutUserInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutUserInput, TemplateUncheckedCreateWithoutUserInput>
  }

  export type TemplateCreateManyUserInputEnvelope = {
    data: TemplateCreateManyUserInput | TemplateCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LeadNotesCreateWithoutUserInput = {
    id?: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    lead: LeadCreateNestedOneWithoutLeadNotesInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutNoteInput
  }

  export type LeadNotesUncheckedCreateWithoutUserInput = {
    id?: string
    leadId: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutNoteInput
  }

  export type LeadNotesCreateOrConnectWithoutUserInput = {
    where: LeadNotesWhereUniqueInput
    create: XOR<LeadNotesCreateWithoutUserInput, LeadNotesUncheckedCreateWithoutUserInput>
  }

  export type LeadNotesCreateManyUserInputEnvelope = {
    data: LeadNotesCreateManyUserInput | LeadNotesCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type LeadActivityUpsertWithWhereUniqueWithoutUserInput = {
    where: LeadActivityWhereUniqueInput
    update: XOR<LeadActivityUpdateWithoutUserInput, LeadActivityUncheckedUpdateWithoutUserInput>
    create: XOR<LeadActivityCreateWithoutUserInput, LeadActivityUncheckedCreateWithoutUserInput>
  }

  export type LeadActivityUpdateWithWhereUniqueWithoutUserInput = {
    where: LeadActivityWhereUniqueInput
    data: XOR<LeadActivityUpdateWithoutUserInput, LeadActivityUncheckedUpdateWithoutUserInput>
  }

  export type LeadActivityUpdateManyWithWhereWithoutUserInput = {
    where: LeadActivityScalarWhereInput
    data: XOR<LeadActivityUpdateManyMutationInput, LeadActivityUncheckedUpdateManyWithoutUserInput>
  }

  export type LeadActivityScalarWhereInput = {
    AND?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
    OR?: LeadActivityScalarWhereInput[]
    NOT?: LeadActivityScalarWhereInput | LeadActivityScalarWhereInput[]
    id?: StringFilter<"LeadActivity"> | string
    leadId?: StringFilter<"LeadActivity"> | string
    data?: JsonFilter<"LeadActivity">
    updatedAt?: BigIntFilter<"LeadActivity"> | bigint | number
    createdAt?: BigIntFilter<"LeadActivity"> | bigint | number
    deletedAt?: BigIntFilter<"LeadActivity"> | bigint | number
    userId?: StringNullableFilter<"LeadActivity"> | string | null
    noteId?: StringNullableFilter<"LeadActivity"> | string | null
    type?: EnumLeadActivityTypeFilter<"LeadActivity"> | $Enums.LeadActivityType
    orgId?: StringFilter<"LeadActivity"> | string
  }

  export type OrgMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: OrgMemberWhereUniqueInput
    update: XOR<OrgMemberUpdateWithoutUserInput, OrgMemberUncheckedUpdateWithoutUserInput>
    create: XOR<OrgMemberCreateWithoutUserInput, OrgMemberUncheckedCreateWithoutUserInput>
  }

  export type OrgMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: OrgMemberWhereUniqueInput
    data: XOR<OrgMemberUpdateWithoutUserInput, OrgMemberUncheckedUpdateWithoutUserInput>
  }

  export type OrgMemberUpdateManyWithWhereWithoutUserInput = {
    where: OrgMemberScalarWhereInput
    data: XOR<OrgMemberUpdateManyMutationInput, OrgMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type OrgMemberScalarWhereInput = {
    AND?: OrgMemberScalarWhereInput | OrgMemberScalarWhereInput[]
    OR?: OrgMemberScalarWhereInput[]
    NOT?: OrgMemberScalarWhereInput | OrgMemberScalarWhereInput[]
    id?: StringFilter<"OrgMember"> | string
    organizationId?: StringFilter<"OrgMember"> | string
    userId?: StringFilter<"OrgMember"> | string
    role?: EnumOrgMemberRoleFilter<"OrgMember"> | $Enums.OrgMemberRole
    createdAt?: BigIntFilter<"OrgMember"> | bigint | number
    updatedAt?: BigIntFilter<"OrgMember"> | bigint | number
    deletedAt?: BigIntFilter<"OrgMember"> | bigint | number
    signature?: StringFilter<"OrgMember"> | string
  }

  export type OrgMemberInviteUpsertWithWhereUniqueWithoutInviterInput = {
    where: OrgMemberInviteWhereUniqueInput
    update: XOR<OrgMemberInviteUpdateWithoutInviterInput, OrgMemberInviteUncheckedUpdateWithoutInviterInput>
    create: XOR<OrgMemberInviteCreateWithoutInviterInput, OrgMemberInviteUncheckedCreateWithoutInviterInput>
  }

  export type OrgMemberInviteUpdateWithWhereUniqueWithoutInviterInput = {
    where: OrgMemberInviteWhereUniqueInput
    data: XOR<OrgMemberInviteUpdateWithoutInviterInput, OrgMemberInviteUncheckedUpdateWithoutInviterInput>
  }

  export type OrgMemberInviteUpdateManyWithWhereWithoutInviterInput = {
    where: OrgMemberInviteScalarWhereInput
    data: XOR<OrgMemberInviteUpdateManyMutationInput, OrgMemberInviteUncheckedUpdateManyWithoutInviterInput>
  }

  export type OrgMemberInviteScalarWhereInput = {
    AND?: OrgMemberInviteScalarWhereInput | OrgMemberInviteScalarWhereInput[]
    OR?: OrgMemberInviteScalarWhereInput[]
    NOT?: OrgMemberInviteScalarWhereInput | OrgMemberInviteScalarWhereInput[]
    id?: StringFilter<"OrgMemberInvite"> | string
    token?: StringFilter<"OrgMemberInvite"> | string
    email?: StringFilter<"OrgMemberInvite"> | string
    role?: EnumOrgMemberRoleFilter<"OrgMemberInvite"> | $Enums.OrgMemberRole
    organizationId?: StringFilter<"OrgMemberInvite"> | string
    inviterId?: StringFilter<"OrgMemberInvite"> | string
    createdAt?: BigIntFilter<"OrgMemberInvite"> | bigint | number
    updatedAt?: BigIntFilter<"OrgMemberInvite"> | bigint | number
    deletedAt?: BigIntFilter<"OrgMemberInvite"> | bigint | number
  }

  export type TemplateUpsertWithWhereUniqueWithoutUserInput = {
    where: TemplateWhereUniqueInput
    update: XOR<TemplateUpdateWithoutUserInput, TemplateUncheckedUpdateWithoutUserInput>
    create: XOR<TemplateCreateWithoutUserInput, TemplateUncheckedCreateWithoutUserInput>
  }

  export type TemplateUpdateWithWhereUniqueWithoutUserInput = {
    where: TemplateWhereUniqueInput
    data: XOR<TemplateUpdateWithoutUserInput, TemplateUncheckedUpdateWithoutUserInput>
  }

  export type TemplateUpdateManyWithWhereWithoutUserInput = {
    where: TemplateScalarWhereInput
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyWithoutUserInput>
  }

  export type TemplateScalarWhereInput = {
    AND?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
    OR?: TemplateScalarWhereInput[]
    NOT?: TemplateScalarWhereInput | TemplateScalarWhereInput[]
    id?: StringFilter<"Template"> | string
    html?: StringFilter<"Template"> | string
    name?: StringFilter<"Template"> | string
    createdAt?: BigIntFilter<"Template"> | bigint | number
    isEnabled?: BoolFilter<"Template"> | boolean
    updatedAt?: BigIntFilter<"Template"> | bigint | number
    deletedAt?: BigIntFilter<"Template"> | bigint | number
    userId?: StringNullableFilter<"Template"> | string | null
    orgId?: StringNullableFilter<"Template"> | string | null
  }

  export type LeadNotesUpsertWithWhereUniqueWithoutUserInput = {
    where: LeadNotesWhereUniqueInput
    update: XOR<LeadNotesUpdateWithoutUserInput, LeadNotesUncheckedUpdateWithoutUserInput>
    create: XOR<LeadNotesCreateWithoutUserInput, LeadNotesUncheckedCreateWithoutUserInput>
  }

  export type LeadNotesUpdateWithWhereUniqueWithoutUserInput = {
    where: LeadNotesWhereUniqueInput
    data: XOR<LeadNotesUpdateWithoutUserInput, LeadNotesUncheckedUpdateWithoutUserInput>
  }

  export type LeadNotesUpdateManyWithWhereWithoutUserInput = {
    where: LeadNotesScalarWhereInput
    data: XOR<LeadNotesUpdateManyMutationInput, LeadNotesUncheckedUpdateManyWithoutUserInput>
  }

  export type LeadNotesScalarWhereInput = {
    AND?: LeadNotesScalarWhereInput | LeadNotesScalarWhereInput[]
    OR?: LeadNotesScalarWhereInput[]
    NOT?: LeadNotesScalarWhereInput | LeadNotesScalarWhereInput[]
    id?: StringFilter<"LeadNotes"> | string
    leadId?: StringFilter<"LeadNotes"> | string
    data?: StringFilter<"LeadNotes"> | string
    createdAt?: BigIntFilter<"LeadNotes"> | bigint | number
    updatedAt?: BigIntFilter<"LeadNotes"> | bigint | number
    deletedAt?: BigIntFilter<"LeadNotes"> | bigint | number
    userId?: StringFilter<"LeadNotes"> | string
  }

  export type UserCreateWithoutOrgMemberInvitesInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityCreateNestedManyWithoutUserInput
    orgMembers?: OrgMemberCreateNestedManyWithoutUserInput
    templates?: TemplateCreateNestedManyWithoutUserInput
    LeadNotes?: LeadNotesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrgMemberInvitesInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutUserInput
    orgMembers?: OrgMemberUncheckedCreateNestedManyWithoutUserInput
    templates?: TemplateUncheckedCreateNestedManyWithoutUserInput
    LeadNotes?: LeadNotesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrgMemberInvitesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrgMemberInvitesInput, UserUncheckedCreateWithoutOrgMemberInvitesInput>
  }

  export type OrganizationCreateWithoutInvitesInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutInvitesInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutInvitesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutInvitesInput, OrganizationUncheckedCreateWithoutInvitesInput>
  }

  export type UserUpsertWithoutOrgMemberInvitesInput = {
    update: XOR<UserUpdateWithoutOrgMemberInvitesInput, UserUncheckedUpdateWithoutOrgMemberInvitesInput>
    create: XOR<UserCreateWithoutOrgMemberInvitesInput, UserUncheckedCreateWithoutOrgMemberInvitesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrgMemberInvitesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrgMemberInvitesInput, UserUncheckedUpdateWithoutOrgMemberInvitesInput>
  }

  export type UserUpdateWithoutOrgMemberInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUpdateManyWithoutUserNestedInput
    orgMembers?: OrgMemberUpdateManyWithoutUserNestedInput
    templates?: TemplateUpdateManyWithoutUserNestedInput
    LeadNotes?: LeadNotesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrgMemberInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutUserNestedInput
    orgMembers?: OrgMemberUncheckedUpdateManyWithoutUserNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutUserNestedInput
    LeadNotes?: LeadNotesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationUpsertWithoutInvitesInput = {
    update: XOR<OrganizationUpdateWithoutInvitesInput, OrganizationUncheckedUpdateWithoutInvitesInput>
    create: XOR<OrganizationCreateWithoutInvitesInput, OrganizationUncheckedCreateWithoutInvitesInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutInvitesInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutInvitesInput, OrganizationUncheckedUpdateWithoutInvitesInput>
  }

  export type OrganizationUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type ProjectCreateWithoutOrganizationInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    leadProject?: LeadProjectCreateNestedManyWithoutProjectInput
    integration: IntegrationCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    integrationId: string
    leadProject?: LeadProjectUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutOrganizationInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput>
  }

  export type ProjectCreateManyOrganizationInputEnvelope = {
    data: ProjectCreateManyOrganizationInput | ProjectCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type OrgMemberCreateWithoutOrganizationInput = {
    id?: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
    user: UserCreateNestedOneWithoutOrgMembersInput
    Integration?: IntegrationCreateNestedManyWithoutMembersInput
  }

  export type OrgMemberUncheckedCreateWithoutOrganizationInput = {
    id?: string
    userId: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
    Integration?: IntegrationUncheckedCreateNestedManyWithoutMembersInput
  }

  export type OrgMemberCreateOrConnectWithoutOrganizationInput = {
    where: OrgMemberWhereUniqueInput
    create: XOR<OrgMemberCreateWithoutOrganizationInput, OrgMemberUncheckedCreateWithoutOrganizationInput>
  }

  export type OrgMemberCreateManyOrganizationInputEnvelope = {
    data: OrgMemberCreateManyOrganizationInput | OrgMemberCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type OrgMemberInviteCreateWithoutOrganizationInput = {
    id?: string
    token: string
    email: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    inviter: UserCreateNestedOneWithoutOrgMemberInvitesInput
  }

  export type OrgMemberInviteUncheckedCreateWithoutOrganizationInput = {
    id?: string
    token: string
    email: string
    role?: $Enums.OrgMemberRole
    inviterId: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type OrgMemberInviteCreateOrConnectWithoutOrganizationInput = {
    where: OrgMemberInviteWhereUniqueInput
    create: XOR<OrgMemberInviteCreateWithoutOrganizationInput, OrgMemberInviteUncheckedCreateWithoutOrganizationInput>
  }

  export type OrgMemberInviteCreateManyOrganizationInputEnvelope = {
    data: OrgMemberInviteCreateManyOrganizationInput | OrgMemberInviteCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type IntegrationCreateWithoutOrganizationInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    members?: OrgMemberCreateNestedOneWithoutIntegrationInput
    Project?: ProjectCreateNestedManyWithoutIntegrationInput
    Lead?: LeadCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutIntegrationInput
    Jobs?: JobCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    orgMemberId?: string | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    Project?: ProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Jobs?: JobUncheckedCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutOrganizationInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput>
  }

  export type IntegrationCreateManyOrganizationInputEnvelope = {
    data: IntegrationCreateManyOrganizationInput | IntegrationCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type LeadCreateWithoutOrganizationInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: LeadStatusCreateNestedOneWithoutLeadInput
    Project?: LeadProjectCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesCreateNestedManyWithoutLeadInput
    contacts?: ContactCreateNestedManyWithoutLeadInput
    attachments?: AttachmentCreateNestedManyWithoutLeadInput
    integration?: IntegrationCreateNestedOneWithoutLeadInput
    Email?: EmailCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutOrganizationInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    Project?: LeadProjectUncheckedCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityUncheckedCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesUncheckedCreateNestedManyWithoutLeadInput
    contacts?: ContactUncheckedCreateNestedManyWithoutLeadInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutLeadInput
    Email?: EmailUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutOrganizationInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutOrganizationInput, LeadUncheckedCreateWithoutOrganizationInput>
  }

  export type LeadCreateManyOrganizationInputEnvelope = {
    data: LeadCreateManyOrganizationInput | LeadCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutOrganizationInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    isPrimay?: boolean
    isUnsubscribed?: boolean
    lead: LeadCreateNestedOneWithoutContactsInput
    Email?: EmailCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutOrganizationInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    leadId: string
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    isPrimay?: boolean
    isUnsubscribed?: boolean
    Email?: EmailUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutOrganizationInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutOrganizationInput, ContactUncheckedCreateWithoutOrganizationInput>
  }

  export type ContactCreateManyOrganizationInputEnvelope = {
    data: ContactCreateManyOrganizationInput | ContactCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type TemplateCreateWithoutOrganizationInput = {
    id?: string
    html: string
    name: string
    createdAt: bigint | number
    isEnabled: boolean
    updatedAt: bigint | number
    deletedAt: bigint | number
    user?: UserCreateNestedOneWithoutTemplatesInput
  }

  export type TemplateUncheckedCreateWithoutOrganizationInput = {
    id?: string
    html: string
    name: string
    createdAt: bigint | number
    isEnabled: boolean
    updatedAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
  }

  export type TemplateCreateOrConnectWithoutOrganizationInput = {
    where: TemplateWhereUniqueInput
    create: XOR<TemplateCreateWithoutOrganizationInput, TemplateUncheckedCreateWithoutOrganizationInput>
  }

  export type TemplateCreateManyOrganizationInputEnvelope = {
    data: TemplateCreateManyOrganizationInput | TemplateCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type LeadStatusCreateWithoutOrganizationInput = {
    id?: string
    status: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    Lead?: LeadCreateNestedManyWithoutStatusInput
  }

  export type LeadStatusUncheckedCreateWithoutOrganizationInput = {
    id?: string
    status: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    Lead?: LeadUncheckedCreateNestedManyWithoutStatusInput
  }

  export type LeadStatusCreateOrConnectWithoutOrganizationInput = {
    where: LeadStatusWhereUniqueInput
    create: XOR<LeadStatusCreateWithoutOrganizationInput, LeadStatusUncheckedCreateWithoutOrganizationInput>
  }

  export type LeadStatusCreateManyOrganizationInputEnvelope = {
    data: LeadStatusCreateManyOrganizationInput | LeadStatusCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type WebhookCreateWithoutOrganizationInput = {
    id?: string
    url: string
    type: $Enums.WebhookType
    createdAt?: bigint | number
    data: JsonNullValueInput | InputJsonValue
  }

  export type WebhookUncheckedCreateWithoutOrganizationInput = {
    id?: string
    url: string
    type: $Enums.WebhookType
    createdAt?: bigint | number
    data: JsonNullValueInput | InputJsonValue
  }

  export type WebhookCreateOrConnectWithoutOrganizationInput = {
    where: WebhookWhereUniqueInput
    create: XOR<WebhookCreateWithoutOrganizationInput, WebhookUncheckedCreateWithoutOrganizationInput>
  }

  export type WebhookCreateManyOrganizationInputEnvelope = {
    data: WebhookCreateManyOrganizationInput | WebhookCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type EmailCreateWithoutOrganizationInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    source: $Enums.IntegrationType
    contact?: ContactCreateNestedOneWithoutEmailInput
    lead?: LeadCreateNestedOneWithoutEmailInput
    EmailQueue?: EmailQueueCreateNestedManyWithoutEmailInput
  }

  export type EmailUncheckedCreateWithoutOrganizationInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    leadId?: string | null
    contactId?: string | null
    source: $Enums.IntegrationType
    EmailQueue?: EmailQueueUncheckedCreateNestedManyWithoutEmailInput
  }

  export type EmailCreateOrConnectWithoutOrganizationInput = {
    where: EmailWhereUniqueInput
    create: XOR<EmailCreateWithoutOrganizationInput, EmailUncheckedCreateWithoutOrganizationInput>
  }

  export type EmailCreateManyOrganizationInputEnvelope = {
    data: EmailCreateManyOrganizationInput | EmailCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type MailServiceFromEmailCreateWithoutOrganizationInput = {
    id?: string
    fromName: string
    fromEmail: string
    replyTo?: string | null
    type: $Enums.IntegrationType
    createdAt?: bigint | number
    updatedAt?: bigint | number
    integration: IntegrationCreateNestedOneWithoutMailServiceFromEmailInput
  }

  export type MailServiceFromEmailUncheckedCreateWithoutOrganizationInput = {
    id?: string
    fromName: string
    fromEmail: string
    replyTo?: string | null
    type: $Enums.IntegrationType
    integrationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type MailServiceFromEmailCreateOrConnectWithoutOrganizationInput = {
    where: MailServiceFromEmailWhereUniqueInput
    create: XOR<MailServiceFromEmailCreateWithoutOrganizationInput, MailServiceFromEmailUncheckedCreateWithoutOrganizationInput>
  }

  export type MailServiceFromEmailCreateManyOrganizationInputEnvelope = {
    data: MailServiceFromEmailCreateManyOrganizationInput | MailServiceFromEmailCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type LeadProjectCreateWithoutOrganizatioonInput = {
    id?: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
    integration: IntegrationCreateNestedOneWithoutLeadProjectInput
    lead: LeadCreateNestedOneWithoutProjectInput
    project: ProjectCreateNestedOneWithoutLeadProjectInput
  }

  export type LeadProjectUncheckedCreateWithoutOrganizatioonInput = {
    id?: string
    leadId: string
    projectId: string
    integrationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type LeadProjectCreateOrConnectWithoutOrganizatioonInput = {
    where: LeadProjectWhereUniqueInput
    create: XOR<LeadProjectCreateWithoutOrganizatioonInput, LeadProjectUncheckedCreateWithoutOrganizatioonInput>
  }

  export type LeadProjectCreateManyOrganizatioonInputEnvelope = {
    data: LeadProjectCreateManyOrganizatioonInput | LeadProjectCreateManyOrganizatioonInput[]
    skipDuplicates?: boolean
  }

  export type LeadActivityCreateWithoutOrganizationInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    type: $Enums.LeadActivityType
    lead: LeadCreateNestedOneWithoutLeadActivitiesInput
    user?: UserCreateNestedOneWithoutLeadActivityInput
    note?: LeadNotesCreateNestedOneWithoutLeadActivityInput
  }

  export type LeadActivityUncheckedCreateWithoutOrganizationInput = {
    id?: string
    leadId: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    noteId?: string | null
    type: $Enums.LeadActivityType
  }

  export type LeadActivityCreateOrConnectWithoutOrganizationInput = {
    where: LeadActivityWhereUniqueInput
    create: XOR<LeadActivityCreateWithoutOrganizationInput, LeadActivityUncheckedCreateWithoutOrganizationInput>
  }

  export type LeadActivityCreateManyOrganizationInputEnvelope = {
    data: LeadActivityCreateManyOrganizationInput | LeadActivityCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UnsubscribeLinkCreateWithoutOrganizationInput = {
    id?: string
    name: string
    message?: string | null
    anchorText: string
    isActive?: boolean
  }

  export type UnsubscribeLinkUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    message?: string | null
    anchorText: string
    isActive?: boolean
  }

  export type UnsubscribeLinkCreateOrConnectWithoutOrganizationInput = {
    where: UnsubscribeLinkWhereUniqueInput
    create: XOR<UnsubscribeLinkCreateWithoutOrganizationInput, UnsubscribeLinkUncheckedCreateWithoutOrganizationInput>
  }

  export type UnsubscribeLinkCreateManyOrganizationInputEnvelope = {
    data: UnsubscribeLinkCreateManyOrganizationInput | UnsubscribeLinkCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ProjectUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutOrganizationInput, ProjectUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ProjectCreateWithoutOrganizationInput, ProjectUncheckedCreateWithoutOrganizationInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutOrganizationInput, ProjectUncheckedUpdateWithoutOrganizationInput>
  }

  export type ProjectUpdateManyWithWhereWithoutOrganizationInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    type?: StringFilter<"Project"> | string
    data?: JsonFilter<"Project">
    cliAccessToken?: StringNullableFilter<"Project"> | string | null
    isSynced?: BoolFilter<"Project"> | boolean
    organizationId?: StringFilter<"Project"> | string
    createdAt?: BigIntFilter<"Project"> | bigint | number
    updatedAt?: BigIntFilter<"Project"> | bigint | number
    deletedAt?: BigIntNullableFilter<"Project"> | bigint | number | null
    integrationId?: StringFilter<"Project"> | string
  }

  export type OrgMemberUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: OrgMemberWhereUniqueInput
    update: XOR<OrgMemberUpdateWithoutOrganizationInput, OrgMemberUncheckedUpdateWithoutOrganizationInput>
    create: XOR<OrgMemberCreateWithoutOrganizationInput, OrgMemberUncheckedCreateWithoutOrganizationInput>
  }

  export type OrgMemberUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: OrgMemberWhereUniqueInput
    data: XOR<OrgMemberUpdateWithoutOrganizationInput, OrgMemberUncheckedUpdateWithoutOrganizationInput>
  }

  export type OrgMemberUpdateManyWithWhereWithoutOrganizationInput = {
    where: OrgMemberScalarWhereInput
    data: XOR<OrgMemberUpdateManyMutationInput, OrgMemberUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type OrgMemberInviteUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: OrgMemberInviteWhereUniqueInput
    update: XOR<OrgMemberInviteUpdateWithoutOrganizationInput, OrgMemberInviteUncheckedUpdateWithoutOrganizationInput>
    create: XOR<OrgMemberInviteCreateWithoutOrganizationInput, OrgMemberInviteUncheckedCreateWithoutOrganizationInput>
  }

  export type OrgMemberInviteUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: OrgMemberInviteWhereUniqueInput
    data: XOR<OrgMemberInviteUpdateWithoutOrganizationInput, OrgMemberInviteUncheckedUpdateWithoutOrganizationInput>
  }

  export type OrgMemberInviteUpdateManyWithWhereWithoutOrganizationInput = {
    where: OrgMemberInviteScalarWhereInput
    data: XOR<OrgMemberInviteUpdateManyMutationInput, OrgMemberInviteUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type IntegrationUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: IntegrationWhereUniqueInput
    update: XOR<IntegrationUpdateWithoutOrganizationInput, IntegrationUncheckedUpdateWithoutOrganizationInput>
    create: XOR<IntegrationCreateWithoutOrganizationInput, IntegrationUncheckedCreateWithoutOrganizationInput>
  }

  export type IntegrationUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: IntegrationWhereUniqueInput
    data: XOR<IntegrationUpdateWithoutOrganizationInput, IntegrationUncheckedUpdateWithoutOrganizationInput>
  }

  export type IntegrationUpdateManyWithWhereWithoutOrganizationInput = {
    where: IntegrationScalarWhereInput
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type IntegrationScalarWhereInput = {
    AND?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
    OR?: IntegrationScalarWhereInput[]
    NOT?: IntegrationScalarWhereInput | IntegrationScalarWhereInput[]
    id?: StringFilter<"Integration"> | string
    organizationId?: StringFilter<"Integration"> | string
    name?: StringFilter<"Integration"> | string
    data?: JsonFilter<"Integration">
    description?: StringNullableFilter<"Integration"> | string | null
    type?: EnumIntegrationTypeFilter<"Integration"> | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFilter<"Integration"> | $Enums.IntegrationCategory
    createdAt?: BigIntFilter<"Integration"> | bigint | number
    updatedAt?: BigIntFilter<"Integration"> | bigint | number
    deletedAt?: BigIntNullableFilter<"Integration"> | bigint | number | null
    orgMemberId?: StringNullableFilter<"Integration"> | string | null
    isSingular?: BoolFilter<"Integration"> | boolean
    sharedType?: EnumIntegrationSharingTypeFilter<"Integration"> | $Enums.IntegrationSharingType
  }

  export type LeadUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: LeadWhereUniqueInput
    update: XOR<LeadUpdateWithoutOrganizationInput, LeadUncheckedUpdateWithoutOrganizationInput>
    create: XOR<LeadCreateWithoutOrganizationInput, LeadUncheckedCreateWithoutOrganizationInput>
  }

  export type LeadUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: LeadWhereUniqueInput
    data: XOR<LeadUpdateWithoutOrganizationInput, LeadUncheckedUpdateWithoutOrganizationInput>
  }

  export type LeadUpdateManyWithWhereWithoutOrganizationInput = {
    where: LeadScalarWhereInput
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type LeadScalarWhereInput = {
    AND?: LeadScalarWhereInput | LeadScalarWhereInput[]
    OR?: LeadScalarWhereInput[]
    NOT?: LeadScalarWhereInput | LeadScalarWhereInput[]
    id?: StringFilter<"Lead"> | string
    shopifyDomain?: StringFilter<"Lead"> | string
    shopifyStoreId?: StringFilter<"Lead"> | string
    statusId?: StringNullableFilter<"Lead"> | string | null
    leadSource?: StringNullableFilter<"Lead"> | string | null
    shopDetails?: JsonNullableFilter<"Lead">
    industry?: StringNullableFilter<"Lead"> | string | null
    createdAt?: BigIntFilter<"Lead"> | bigint | number
    updatedAt?: BigIntFilter<"Lead"> | bigint | number
    deletedAt?: BigIntFilter<"Lead"> | bigint | number
    integrationId?: StringNullableFilter<"Lead"> | string | null
    organizationId?: StringFilter<"Lead"> | string
  }

  export type ContactUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutOrganizationInput, ContactUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ContactCreateWithoutOrganizationInput, ContactUncheckedCreateWithoutOrganizationInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutOrganizationInput, ContactUncheckedUpdateWithoutOrganizationInput>
  }

  export type ContactUpdateManyWithWhereWithoutOrganizationInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type ContactScalarWhereInput = {
    AND?: ContactScalarWhereInput | ContactScalarWhereInput[]
    OR?: ContactScalarWhereInput[]
    NOT?: ContactScalarWhereInput | ContactScalarWhereInput[]
    id?: StringFilter<"Contact"> | string
    firstName?: StringNullableFilter<"Contact"> | string | null
    lastName?: StringNullableFilter<"Contact"> | string | null
    suffix?: StringNullableFilter<"Contact"> | string | null
    phone?: JsonNullableFilter<"Contact">
    name?: StringNullableFilter<"Contact"> | string | null
    email?: StringNullableFilter<"Contact"> | string | null
    secondaryEmail?: StringNullableFilter<"Contact"> | string | null
    primaryPhNo?: JsonNullableFilter<"Contact">
    secondaryPhNo?: JsonNullableFilter<"Contact">
    industry?: StringNullableFilter<"Contact"> | string | null
    type?: StringNullableFilter<"Contact"> | string | null
    leadId?: StringFilter<"Contact"> | string
    lastContacted?: BigIntNullableFilter<"Contact"> | bigint | number | null
    createdAt?: BigIntFilter<"Contact"> | bigint | number
    updatedAt?: BigIntFilter<"Contact"> | bigint | number
    deletedAt?: BigIntFilter<"Contact"> | bigint | number
    organizationId?: StringFilter<"Contact"> | string
    isPrimay?: BoolFilter<"Contact"> | boolean
    isUnsubscribed?: BoolFilter<"Contact"> | boolean
  }

  export type TemplateUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: TemplateWhereUniqueInput
    update: XOR<TemplateUpdateWithoutOrganizationInput, TemplateUncheckedUpdateWithoutOrganizationInput>
    create: XOR<TemplateCreateWithoutOrganizationInput, TemplateUncheckedCreateWithoutOrganizationInput>
  }

  export type TemplateUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: TemplateWhereUniqueInput
    data: XOR<TemplateUpdateWithoutOrganizationInput, TemplateUncheckedUpdateWithoutOrganizationInput>
  }

  export type TemplateUpdateManyWithWhereWithoutOrganizationInput = {
    where: TemplateScalarWhereInput
    data: XOR<TemplateUpdateManyMutationInput, TemplateUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type LeadStatusUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: LeadStatusWhereUniqueInput
    update: XOR<LeadStatusUpdateWithoutOrganizationInput, LeadStatusUncheckedUpdateWithoutOrganizationInput>
    create: XOR<LeadStatusCreateWithoutOrganizationInput, LeadStatusUncheckedCreateWithoutOrganizationInput>
  }

  export type LeadStatusUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: LeadStatusWhereUniqueInput
    data: XOR<LeadStatusUpdateWithoutOrganizationInput, LeadStatusUncheckedUpdateWithoutOrganizationInput>
  }

  export type LeadStatusUpdateManyWithWhereWithoutOrganizationInput = {
    where: LeadStatusScalarWhereInput
    data: XOR<LeadStatusUpdateManyMutationInput, LeadStatusUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type LeadStatusScalarWhereInput = {
    AND?: LeadStatusScalarWhereInput | LeadStatusScalarWhereInput[]
    OR?: LeadStatusScalarWhereInput[]
    NOT?: LeadStatusScalarWhereInput | LeadStatusScalarWhereInput[]
    id?: StringFilter<"LeadStatus"> | string
    status?: StringFilter<"LeadStatus"> | string
    createdAt?: BigIntFilter<"LeadStatus"> | bigint | number
    updatedAt?: BigIntFilter<"LeadStatus"> | bigint | number
    deletedAt?: BigIntFilter<"LeadStatus"> | bigint | number
    organizationId?: StringFilter<"LeadStatus"> | string
  }

  export type WebhookUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: WebhookWhereUniqueInput
    update: XOR<WebhookUpdateWithoutOrganizationInput, WebhookUncheckedUpdateWithoutOrganizationInput>
    create: XOR<WebhookCreateWithoutOrganizationInput, WebhookUncheckedCreateWithoutOrganizationInput>
  }

  export type WebhookUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: WebhookWhereUniqueInput
    data: XOR<WebhookUpdateWithoutOrganizationInput, WebhookUncheckedUpdateWithoutOrganizationInput>
  }

  export type WebhookUpdateManyWithWhereWithoutOrganizationInput = {
    where: WebhookScalarWhereInput
    data: XOR<WebhookUpdateManyMutationInput, WebhookUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type WebhookScalarWhereInput = {
    AND?: WebhookScalarWhereInput | WebhookScalarWhereInput[]
    OR?: WebhookScalarWhereInput[]
    NOT?: WebhookScalarWhereInput | WebhookScalarWhereInput[]
    id?: StringFilter<"Webhook"> | string
    url?: StringFilter<"Webhook"> | string
    type?: EnumWebhookTypeFilter<"Webhook"> | $Enums.WebhookType
    createdAt?: BigIntFilter<"Webhook"> | bigint | number
    organizationId?: StringFilter<"Webhook"> | string
    data?: JsonFilter<"Webhook">
  }

  export type EmailUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: EmailWhereUniqueInput
    update: XOR<EmailUpdateWithoutOrganizationInput, EmailUncheckedUpdateWithoutOrganizationInput>
    create: XOR<EmailCreateWithoutOrganizationInput, EmailUncheckedCreateWithoutOrganizationInput>
  }

  export type EmailUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: EmailWhereUniqueInput
    data: XOR<EmailUpdateWithoutOrganizationInput, EmailUncheckedUpdateWithoutOrganizationInput>
  }

  export type EmailUpdateManyWithWhereWithoutOrganizationInput = {
    where: EmailScalarWhereInput
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type EmailScalarWhereInput = {
    AND?: EmailScalarWhereInput | EmailScalarWhereInput[]
    OR?: EmailScalarWhereInput[]
    NOT?: EmailScalarWhereInput | EmailScalarWhereInput[]
    id?: StringFilter<"Email"> | string
    from?: JsonFilter<"Email">
    to?: StringNullableListFilter<"Email">
    replyTo?: StringNullableFilter<"Email"> | string | null
    cc?: StringNullableListFilter<"Email">
    bcc?: StringNullableListFilter<"Email">
    status?: EnumEmailStatusFilter<"Email"> | $Enums.EmailStatus
    subject?: StringNullableFilter<"Email"> | string | null
    body?: StringFilter<"Email"> | string
    html?: StringNullableFilter<"Email"> | string | null
    trackingId?: StringNullableFilter<"Email"> | string | null
    messageId?: StringNullableFilter<"Email"> | string | null
    threadId?: StringNullableFilter<"Email"> | string | null
    historyId?: StringNullableFilter<"Email"> | string | null
    labelIds?: StringNullableListFilter<"Email">
    isOpened?: BoolFilter<"Email"> | boolean
    openedAt?: BigIntFilter<"Email"> | bigint | number
    isClicked?: BoolFilter<"Email"> | boolean
    clickedAt?: BigIntFilter<"Email"> | bigint | number
    sentAt?: BigIntFilter<"Email"> | bigint | number
    deletedAt?: BigIntFilter<"Email"> | bigint | number
    integrationId?: StringFilter<"Email"> | string
    organizationId?: StringFilter<"Email"> | string
    leadId?: StringNullableFilter<"Email"> | string | null
    contactId?: StringNullableFilter<"Email"> | string | null
    source?: EnumIntegrationTypeFilter<"Email"> | $Enums.IntegrationType
  }

  export type MailServiceFromEmailUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: MailServiceFromEmailWhereUniqueInput
    update: XOR<MailServiceFromEmailUpdateWithoutOrganizationInput, MailServiceFromEmailUncheckedUpdateWithoutOrganizationInput>
    create: XOR<MailServiceFromEmailCreateWithoutOrganizationInput, MailServiceFromEmailUncheckedCreateWithoutOrganizationInput>
  }

  export type MailServiceFromEmailUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: MailServiceFromEmailWhereUniqueInput
    data: XOR<MailServiceFromEmailUpdateWithoutOrganizationInput, MailServiceFromEmailUncheckedUpdateWithoutOrganizationInput>
  }

  export type MailServiceFromEmailUpdateManyWithWhereWithoutOrganizationInput = {
    where: MailServiceFromEmailScalarWhereInput
    data: XOR<MailServiceFromEmailUpdateManyMutationInput, MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type MailServiceFromEmailScalarWhereInput = {
    AND?: MailServiceFromEmailScalarWhereInput | MailServiceFromEmailScalarWhereInput[]
    OR?: MailServiceFromEmailScalarWhereInput[]
    NOT?: MailServiceFromEmailScalarWhereInput | MailServiceFromEmailScalarWhereInput[]
    id?: StringFilter<"MailServiceFromEmail"> | string
    fromName?: StringFilter<"MailServiceFromEmail"> | string
    fromEmail?: StringFilter<"MailServiceFromEmail"> | string
    replyTo?: StringNullableFilter<"MailServiceFromEmail"> | string | null
    type?: EnumIntegrationTypeFilter<"MailServiceFromEmail"> | $Enums.IntegrationType
    integrationId?: StringFilter<"MailServiceFromEmail"> | string
    organizationId?: StringFilter<"MailServiceFromEmail"> | string
    createdAt?: BigIntFilter<"MailServiceFromEmail"> | bigint | number
    updatedAt?: BigIntFilter<"MailServiceFromEmail"> | bigint | number
  }

  export type LeadProjectUpsertWithWhereUniqueWithoutOrganizatioonInput = {
    where: LeadProjectWhereUniqueInput
    update: XOR<LeadProjectUpdateWithoutOrganizatioonInput, LeadProjectUncheckedUpdateWithoutOrganizatioonInput>
    create: XOR<LeadProjectCreateWithoutOrganizatioonInput, LeadProjectUncheckedCreateWithoutOrganizatioonInput>
  }

  export type LeadProjectUpdateWithWhereUniqueWithoutOrganizatioonInput = {
    where: LeadProjectWhereUniqueInput
    data: XOR<LeadProjectUpdateWithoutOrganizatioonInput, LeadProjectUncheckedUpdateWithoutOrganizatioonInput>
  }

  export type LeadProjectUpdateManyWithWhereWithoutOrganizatioonInput = {
    where: LeadProjectScalarWhereInput
    data: XOR<LeadProjectUpdateManyMutationInput, LeadProjectUncheckedUpdateManyWithoutOrganizatioonInput>
  }

  export type LeadProjectScalarWhereInput = {
    AND?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
    OR?: LeadProjectScalarWhereInput[]
    NOT?: LeadProjectScalarWhereInput | LeadProjectScalarWhereInput[]
    id?: StringFilter<"LeadProject"> | string
    leadId?: StringFilter<"LeadProject"> | string
    projectId?: StringFilter<"LeadProject"> | string
    integrationId?: StringFilter<"LeadProject"> | string
    orgId?: StringFilter<"LeadProject"> | string
    createdAt?: BigIntFilter<"LeadProject"> | bigint | number
    updatedAt?: BigIntFilter<"LeadProject"> | bigint | number
    deletedAt?: BigIntFilter<"LeadProject"> | bigint | number
    status?: StringNullableFilter<"LeadProject"> | string | null
  }

  export type LeadActivityUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: LeadActivityWhereUniqueInput
    update: XOR<LeadActivityUpdateWithoutOrganizationInput, LeadActivityUncheckedUpdateWithoutOrganizationInput>
    create: XOR<LeadActivityCreateWithoutOrganizationInput, LeadActivityUncheckedCreateWithoutOrganizationInput>
  }

  export type LeadActivityUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: LeadActivityWhereUniqueInput
    data: XOR<LeadActivityUpdateWithoutOrganizationInput, LeadActivityUncheckedUpdateWithoutOrganizationInput>
  }

  export type LeadActivityUpdateManyWithWhereWithoutOrganizationInput = {
    where: LeadActivityScalarWhereInput
    data: XOR<LeadActivityUpdateManyMutationInput, LeadActivityUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UnsubscribeLinkUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UnsubscribeLinkWhereUniqueInput
    update: XOR<UnsubscribeLinkUpdateWithoutOrganizationInput, UnsubscribeLinkUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UnsubscribeLinkCreateWithoutOrganizationInput, UnsubscribeLinkUncheckedCreateWithoutOrganizationInput>
  }

  export type UnsubscribeLinkUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UnsubscribeLinkWhereUniqueInput
    data: XOR<UnsubscribeLinkUpdateWithoutOrganizationInput, UnsubscribeLinkUncheckedUpdateWithoutOrganizationInput>
  }

  export type UnsubscribeLinkUpdateManyWithWhereWithoutOrganizationInput = {
    where: UnsubscribeLinkScalarWhereInput
    data: XOR<UnsubscribeLinkUpdateManyMutationInput, UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UnsubscribeLinkScalarWhereInput = {
    AND?: UnsubscribeLinkScalarWhereInput | UnsubscribeLinkScalarWhereInput[]
    OR?: UnsubscribeLinkScalarWhereInput[]
    NOT?: UnsubscribeLinkScalarWhereInput | UnsubscribeLinkScalarWhereInput[]
    id?: StringFilter<"UnsubscribeLink"> | string
    name?: StringFilter<"UnsubscribeLink"> | string
    message?: StringNullableFilter<"UnsubscribeLink"> | string | null
    anchorText?: StringFilter<"UnsubscribeLink"> | string
    isActive?: BoolFilter<"UnsubscribeLink"> | boolean
    organizationId?: StringFilter<"UnsubscribeLink"> | string
  }

  export type OrganizationCreateWithoutMembersInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutMembersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutOrgMembersInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteCreateNestedManyWithoutInviterInput
    templates?: TemplateCreateNestedManyWithoutUserInput
    LeadNotes?: LeadNotesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrgMembersInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteUncheckedCreateNestedManyWithoutInviterInput
    templates?: TemplateUncheckedCreateNestedManyWithoutUserInput
    LeadNotes?: LeadNotesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrgMembersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrgMembersInput, UserUncheckedCreateWithoutOrgMembersInput>
  }

  export type IntegrationCreateWithoutMembersInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    Project?: ProjectCreateNestedManyWithoutIntegrationInput
    organization: OrganizationCreateNestedOneWithoutIntegrationsInput
    Lead?: LeadCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutIntegrationInput
    Jobs?: JobCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutMembersInput = {
    id?: string
    organizationId: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    Project?: ProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Jobs?: JobUncheckedCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutMembersInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutMembersInput, IntegrationUncheckedCreateWithoutMembersInput>
  }

  export type IntegrationCreateManyMembersInputEnvelope = {
    data: IntegrationCreateManyMembersInput | IntegrationCreateManyMembersInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutMembersInput = {
    update: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutMembersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
  }

  export type OrganizationUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutOrgMembersInput = {
    update: XOR<UserUpdateWithoutOrgMembersInput, UserUncheckedUpdateWithoutOrgMembersInput>
    create: XOR<UserCreateWithoutOrgMembersInput, UserUncheckedCreateWithoutOrgMembersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOrgMembersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOrgMembersInput, UserUncheckedUpdateWithoutOrgMembersInput>
  }

  export type UserUpdateWithoutOrgMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUpdateManyWithoutInviterNestedInput
    templates?: TemplateUpdateManyWithoutUserNestedInput
    LeadNotes?: LeadNotesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrgMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUncheckedUpdateManyWithoutInviterNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutUserNestedInput
    LeadNotes?: LeadNotesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type IntegrationUpsertWithWhereUniqueWithoutMembersInput = {
    where: IntegrationWhereUniqueInput
    update: XOR<IntegrationUpdateWithoutMembersInput, IntegrationUncheckedUpdateWithoutMembersInput>
    create: XOR<IntegrationCreateWithoutMembersInput, IntegrationUncheckedCreateWithoutMembersInput>
  }

  export type IntegrationUpdateWithWhereUniqueWithoutMembersInput = {
    where: IntegrationWhereUniqueInput
    data: XOR<IntegrationUpdateWithoutMembersInput, IntegrationUncheckedUpdateWithoutMembersInput>
  }

  export type IntegrationUpdateManyWithWhereWithoutMembersInput = {
    where: IntegrationScalarWhereInput
    data: XOR<IntegrationUpdateManyMutationInput, IntegrationUncheckedUpdateManyWithoutMembersInput>
  }

  export type OrganizationCreateWithoutProjectInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutProjectInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutProjectInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutProjectInput, OrganizationUncheckedCreateWithoutProjectInput>
  }

  export type LeadProjectCreateWithoutProjectInput = {
    id?: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
    integration: IntegrationCreateNestedOneWithoutLeadProjectInput
    lead: LeadCreateNestedOneWithoutProjectInput
    organizatioon: OrganizationCreateNestedOneWithoutLeadProjectInput
  }

  export type LeadProjectUncheckedCreateWithoutProjectInput = {
    id?: string
    leadId: string
    integrationId: string
    orgId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type LeadProjectCreateOrConnectWithoutProjectInput = {
    where: LeadProjectWhereUniqueInput
    create: XOR<LeadProjectCreateWithoutProjectInput, LeadProjectUncheckedCreateWithoutProjectInput>
  }

  export type LeadProjectCreateManyProjectInputEnvelope = {
    data: LeadProjectCreateManyProjectInput | LeadProjectCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type IntegrationCreateWithoutProjectInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    members?: OrgMemberCreateNestedOneWithoutIntegrationInput
    organization: OrganizationCreateNestedOneWithoutIntegrationsInput
    Lead?: LeadCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutIntegrationInput
    Jobs?: JobCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutProjectInput = {
    id?: string
    organizationId: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    orgMemberId?: string | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    Lead?: LeadUncheckedCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Jobs?: JobUncheckedCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutProjectInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutProjectInput, IntegrationUncheckedCreateWithoutProjectInput>
  }

  export type OrganizationUpsertWithoutProjectInput = {
    update: XOR<OrganizationUpdateWithoutProjectInput, OrganizationUncheckedUpdateWithoutProjectInput>
    create: XOR<OrganizationCreateWithoutProjectInput, OrganizationUncheckedCreateWithoutProjectInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutProjectInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutProjectInput, OrganizationUncheckedUpdateWithoutProjectInput>
  }

  export type OrganizationUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type LeadProjectUpsertWithWhereUniqueWithoutProjectInput = {
    where: LeadProjectWhereUniqueInput
    update: XOR<LeadProjectUpdateWithoutProjectInput, LeadProjectUncheckedUpdateWithoutProjectInput>
    create: XOR<LeadProjectCreateWithoutProjectInput, LeadProjectUncheckedCreateWithoutProjectInput>
  }

  export type LeadProjectUpdateWithWhereUniqueWithoutProjectInput = {
    where: LeadProjectWhereUniqueInput
    data: XOR<LeadProjectUpdateWithoutProjectInput, LeadProjectUncheckedUpdateWithoutProjectInput>
  }

  export type LeadProjectUpdateManyWithWhereWithoutProjectInput = {
    where: LeadProjectScalarWhereInput
    data: XOR<LeadProjectUpdateManyMutationInput, LeadProjectUncheckedUpdateManyWithoutProjectInput>
  }

  export type IntegrationUpsertWithoutProjectInput = {
    update: XOR<IntegrationUpdateWithoutProjectInput, IntegrationUncheckedUpdateWithoutProjectInput>
    create: XOR<IntegrationCreateWithoutProjectInput, IntegrationUncheckedCreateWithoutProjectInput>
    where?: IntegrationWhereInput
  }

  export type IntegrationUpdateToOneWithWhereWithoutProjectInput = {
    where?: IntegrationWhereInput
    data: XOR<IntegrationUpdateWithoutProjectInput, IntegrationUncheckedUpdateWithoutProjectInput>
  }

  export type IntegrationUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    members?: OrgMemberUpdateOneWithoutIntegrationNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput
    Lead?: LeadUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orgMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    Lead?: LeadUncheckedUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUncheckedUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type LeadCreateWithoutLeadNotesInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: LeadStatusCreateNestedOneWithoutLeadInput
    Project?: LeadProjectCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityCreateNestedManyWithoutLeadInput
    contacts?: ContactCreateNestedManyWithoutLeadInput
    attachments?: AttachmentCreateNestedManyWithoutLeadInput
    organization: OrganizationCreateNestedOneWithoutLeadInput
    integration?: IntegrationCreateNestedOneWithoutLeadInput
    Email?: EmailCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutLeadNotesInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
    Project?: LeadProjectUncheckedCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityUncheckedCreateNestedManyWithoutLeadInput
    contacts?: ContactUncheckedCreateNestedManyWithoutLeadInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutLeadInput
    Email?: EmailUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutLeadNotesInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutLeadNotesInput, LeadUncheckedCreateWithoutLeadNotesInput>
  }

  export type UserCreateWithoutLeadNotesInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityCreateNestedManyWithoutUserInput
    orgMembers?: OrgMemberCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteCreateNestedManyWithoutInviterInput
    templates?: TemplateCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLeadNotesInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutUserInput
    orgMembers?: OrgMemberUncheckedCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteUncheckedCreateNestedManyWithoutInviterInput
    templates?: TemplateUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLeadNotesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLeadNotesInput, UserUncheckedCreateWithoutLeadNotesInput>
  }

  export type LeadActivityCreateWithoutNoteInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    type: $Enums.LeadActivityType
    organization: OrganizationCreateNestedOneWithoutLeadActivityInput
    lead: LeadCreateNestedOneWithoutLeadActivitiesInput
    user?: UserCreateNestedOneWithoutLeadActivityInput
  }

  export type LeadActivityUncheckedCreateWithoutNoteInput = {
    id?: string
    leadId: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    type: $Enums.LeadActivityType
    orgId: string
  }

  export type LeadActivityCreateOrConnectWithoutNoteInput = {
    where: LeadActivityWhereUniqueInput
    create: XOR<LeadActivityCreateWithoutNoteInput, LeadActivityUncheckedCreateWithoutNoteInput>
  }

  export type LeadActivityCreateManyNoteInputEnvelope = {
    data: LeadActivityCreateManyNoteInput | LeadActivityCreateManyNoteInput[]
    skipDuplicates?: boolean
  }

  export type LeadUpsertWithoutLeadNotesInput = {
    update: XOR<LeadUpdateWithoutLeadNotesInput, LeadUncheckedUpdateWithoutLeadNotesInput>
    create: XOR<LeadCreateWithoutLeadNotesInput, LeadUncheckedCreateWithoutLeadNotesInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutLeadNotesInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutLeadNotesInput, LeadUncheckedUpdateWithoutLeadNotesInput>
  }

  export type LeadUpdateWithoutLeadNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: LeadStatusUpdateOneWithoutLeadNestedInput
    Project?: LeadProjectUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUpdateManyWithoutLeadNestedInput
    contacts?: ContactUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUpdateManyWithoutLeadNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadNestedInput
    integration?: IntegrationUpdateOneWithoutLeadNestedInput
    Email?: EmailUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutLeadNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    Project?: LeadProjectUncheckedUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUncheckedUpdateManyWithoutLeadNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutLeadNestedInput
    Email?: EmailUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type UserUpsertWithoutLeadNotesInput = {
    update: XOR<UserUpdateWithoutLeadNotesInput, UserUncheckedUpdateWithoutLeadNotesInput>
    create: XOR<UserCreateWithoutLeadNotesInput, UserUncheckedCreateWithoutLeadNotesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLeadNotesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLeadNotesInput, UserUncheckedUpdateWithoutLeadNotesInput>
  }

  export type UserUpdateWithoutLeadNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUpdateManyWithoutUserNestedInput
    orgMembers?: OrgMemberUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUpdateManyWithoutInviterNestedInput
    templates?: TemplateUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLeadNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutUserNestedInput
    orgMembers?: OrgMemberUncheckedUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUncheckedUpdateManyWithoutInviterNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LeadActivityUpsertWithWhereUniqueWithoutNoteInput = {
    where: LeadActivityWhereUniqueInput
    update: XOR<LeadActivityUpdateWithoutNoteInput, LeadActivityUncheckedUpdateWithoutNoteInput>
    create: XOR<LeadActivityCreateWithoutNoteInput, LeadActivityUncheckedCreateWithoutNoteInput>
  }

  export type LeadActivityUpdateWithWhereUniqueWithoutNoteInput = {
    where: LeadActivityWhereUniqueInput
    data: XOR<LeadActivityUpdateWithoutNoteInput, LeadActivityUncheckedUpdateWithoutNoteInput>
  }

  export type LeadActivityUpdateManyWithWhereWithoutNoteInput = {
    where: LeadActivityScalarWhereInput
    data: XOR<LeadActivityUpdateManyMutationInput, LeadActivityUncheckedUpdateManyWithoutNoteInput>
  }

  export type LeadStatusCreateWithoutLeadInput = {
    id?: string
    status: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organization: OrganizationCreateNestedOneWithoutLeadStatusInput
  }

  export type LeadStatusUncheckedCreateWithoutLeadInput = {
    id?: string
    status: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organizationId: string
  }

  export type LeadStatusCreateOrConnectWithoutLeadInput = {
    where: LeadStatusWhereUniqueInput
    create: XOR<LeadStatusCreateWithoutLeadInput, LeadStatusUncheckedCreateWithoutLeadInput>
  }

  export type LeadProjectCreateWithoutLeadInput = {
    id?: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
    integration: IntegrationCreateNestedOneWithoutLeadProjectInput
    project: ProjectCreateNestedOneWithoutLeadProjectInput
    organizatioon: OrganizationCreateNestedOneWithoutLeadProjectInput
  }

  export type LeadProjectUncheckedCreateWithoutLeadInput = {
    id?: string
    projectId: string
    integrationId: string
    orgId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type LeadProjectCreateOrConnectWithoutLeadInput = {
    where: LeadProjectWhereUniqueInput
    create: XOR<LeadProjectCreateWithoutLeadInput, LeadProjectUncheckedCreateWithoutLeadInput>
  }

  export type LeadProjectCreateManyLeadInputEnvelope = {
    data: LeadProjectCreateManyLeadInput | LeadProjectCreateManyLeadInput[]
    skipDuplicates?: boolean
  }

  export type LeadActivityCreateWithoutLeadInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    type: $Enums.LeadActivityType
    organization: OrganizationCreateNestedOneWithoutLeadActivityInput
    user?: UserCreateNestedOneWithoutLeadActivityInput
    note?: LeadNotesCreateNestedOneWithoutLeadActivityInput
  }

  export type LeadActivityUncheckedCreateWithoutLeadInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    noteId?: string | null
    type: $Enums.LeadActivityType
    orgId: string
  }

  export type LeadActivityCreateOrConnectWithoutLeadInput = {
    where: LeadActivityWhereUniqueInput
    create: XOR<LeadActivityCreateWithoutLeadInput, LeadActivityUncheckedCreateWithoutLeadInput>
  }

  export type LeadActivityCreateManyLeadInputEnvelope = {
    data: LeadActivityCreateManyLeadInput | LeadActivityCreateManyLeadInput[]
    skipDuplicates?: boolean
  }

  export type LeadNotesCreateWithoutLeadInput = {
    id?: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    user: UserCreateNestedOneWithoutLeadNotesInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutNoteInput
  }

  export type LeadNotesUncheckedCreateWithoutLeadInput = {
    id?: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    userId: string
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutNoteInput
  }

  export type LeadNotesCreateOrConnectWithoutLeadInput = {
    where: LeadNotesWhereUniqueInput
    create: XOR<LeadNotesCreateWithoutLeadInput, LeadNotesUncheckedCreateWithoutLeadInput>
  }

  export type LeadNotesCreateManyLeadInputEnvelope = {
    data: LeadNotesCreateManyLeadInput | LeadNotesCreateManyLeadInput[]
    skipDuplicates?: boolean
  }

  export type ContactCreateWithoutLeadInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    isPrimay?: boolean
    isUnsubscribed?: boolean
    organization: OrganizationCreateNestedOneWithoutContactInput
    Email?: EmailCreateNestedManyWithoutContactInput
  }

  export type ContactUncheckedCreateWithoutLeadInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organizationId: string
    isPrimay?: boolean
    isUnsubscribed?: boolean
    Email?: EmailUncheckedCreateNestedManyWithoutContactInput
  }

  export type ContactCreateOrConnectWithoutLeadInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutLeadInput, ContactUncheckedCreateWithoutLeadInput>
  }

  export type ContactCreateManyLeadInputEnvelope = {
    data: ContactCreateManyLeadInput | ContactCreateManyLeadInput[]
    skipDuplicates?: boolean
  }

  export type AttachmentCreateWithoutLeadInput = {
    id?: string
    attachmentUrl: string
    attachmentType: string
    eTag: string
    attachmentName: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type AttachmentUncheckedCreateWithoutLeadInput = {
    id?: string
    attachmentUrl: string
    attachmentType: string
    eTag: string
    attachmentName: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type AttachmentCreateOrConnectWithoutLeadInput = {
    where: AttachmentWhereUniqueInput
    create: XOR<AttachmentCreateWithoutLeadInput, AttachmentUncheckedCreateWithoutLeadInput>
  }

  export type AttachmentCreateManyLeadInputEnvelope = {
    data: AttachmentCreateManyLeadInput | AttachmentCreateManyLeadInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationCreateWithoutLeadInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutLeadInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutLeadInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutLeadInput, OrganizationUncheckedCreateWithoutLeadInput>
  }

  export type IntegrationCreateWithoutLeadInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    members?: OrgMemberCreateNestedOneWithoutIntegrationInput
    Project?: ProjectCreateNestedManyWithoutIntegrationInput
    organization: OrganizationCreateNestedOneWithoutIntegrationsInput
    LeadProject?: LeadProjectCreateNestedManyWithoutIntegrationInput
    Jobs?: JobCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutLeadInput = {
    id?: string
    organizationId: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    orgMemberId?: string | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    Project?: ProjectUncheckedCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Jobs?: JobUncheckedCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutLeadInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutLeadInput, IntegrationUncheckedCreateWithoutLeadInput>
  }

  export type EmailCreateWithoutLeadInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    source: $Enums.IntegrationType
    contact?: ContactCreateNestedOneWithoutEmailInput
    organization: OrganizationCreateNestedOneWithoutEmailInput
    EmailQueue?: EmailQueueCreateNestedManyWithoutEmailInput
  }

  export type EmailUncheckedCreateWithoutLeadInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    organizationId: string
    contactId?: string | null
    source: $Enums.IntegrationType
    EmailQueue?: EmailQueueUncheckedCreateNestedManyWithoutEmailInput
  }

  export type EmailCreateOrConnectWithoutLeadInput = {
    where: EmailWhereUniqueInput
    create: XOR<EmailCreateWithoutLeadInput, EmailUncheckedCreateWithoutLeadInput>
  }

  export type EmailCreateManyLeadInputEnvelope = {
    data: EmailCreateManyLeadInput | EmailCreateManyLeadInput[]
    skipDuplicates?: boolean
  }

  export type LeadStatusUpsertWithoutLeadInput = {
    update: XOR<LeadStatusUpdateWithoutLeadInput, LeadStatusUncheckedUpdateWithoutLeadInput>
    create: XOR<LeadStatusCreateWithoutLeadInput, LeadStatusUncheckedCreateWithoutLeadInput>
    where?: LeadStatusWhereInput
  }

  export type LeadStatusUpdateToOneWithWhereWithoutLeadInput = {
    where?: LeadStatusWhereInput
    data: XOR<LeadStatusUpdateWithoutLeadInput, LeadStatusUncheckedUpdateWithoutLeadInput>
  }

  export type LeadStatusUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organization?: OrganizationUpdateOneRequiredWithoutLeadStatusNestedInput
  }

  export type LeadStatusUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadProjectUpsertWithWhereUniqueWithoutLeadInput = {
    where: LeadProjectWhereUniqueInput
    update: XOR<LeadProjectUpdateWithoutLeadInput, LeadProjectUncheckedUpdateWithoutLeadInput>
    create: XOR<LeadProjectCreateWithoutLeadInput, LeadProjectUncheckedCreateWithoutLeadInput>
  }

  export type LeadProjectUpdateWithWhereUniqueWithoutLeadInput = {
    where: LeadProjectWhereUniqueInput
    data: XOR<LeadProjectUpdateWithoutLeadInput, LeadProjectUncheckedUpdateWithoutLeadInput>
  }

  export type LeadProjectUpdateManyWithWhereWithoutLeadInput = {
    where: LeadProjectScalarWhereInput
    data: XOR<LeadProjectUpdateManyMutationInput, LeadProjectUncheckedUpdateManyWithoutLeadInput>
  }

  export type LeadActivityUpsertWithWhereUniqueWithoutLeadInput = {
    where: LeadActivityWhereUniqueInput
    update: XOR<LeadActivityUpdateWithoutLeadInput, LeadActivityUncheckedUpdateWithoutLeadInput>
    create: XOR<LeadActivityCreateWithoutLeadInput, LeadActivityUncheckedCreateWithoutLeadInput>
  }

  export type LeadActivityUpdateWithWhereUniqueWithoutLeadInput = {
    where: LeadActivityWhereUniqueInput
    data: XOR<LeadActivityUpdateWithoutLeadInput, LeadActivityUncheckedUpdateWithoutLeadInput>
  }

  export type LeadActivityUpdateManyWithWhereWithoutLeadInput = {
    where: LeadActivityScalarWhereInput
    data: XOR<LeadActivityUpdateManyMutationInput, LeadActivityUncheckedUpdateManyWithoutLeadInput>
  }

  export type LeadNotesUpsertWithWhereUniqueWithoutLeadInput = {
    where: LeadNotesWhereUniqueInput
    update: XOR<LeadNotesUpdateWithoutLeadInput, LeadNotesUncheckedUpdateWithoutLeadInput>
    create: XOR<LeadNotesCreateWithoutLeadInput, LeadNotesUncheckedCreateWithoutLeadInput>
  }

  export type LeadNotesUpdateWithWhereUniqueWithoutLeadInput = {
    where: LeadNotesWhereUniqueInput
    data: XOR<LeadNotesUpdateWithoutLeadInput, LeadNotesUncheckedUpdateWithoutLeadInput>
  }

  export type LeadNotesUpdateManyWithWhereWithoutLeadInput = {
    where: LeadNotesScalarWhereInput
    data: XOR<LeadNotesUpdateManyMutationInput, LeadNotesUncheckedUpdateManyWithoutLeadInput>
  }

  export type ContactUpsertWithWhereUniqueWithoutLeadInput = {
    where: ContactWhereUniqueInput
    update: XOR<ContactUpdateWithoutLeadInput, ContactUncheckedUpdateWithoutLeadInput>
    create: XOR<ContactCreateWithoutLeadInput, ContactUncheckedCreateWithoutLeadInput>
  }

  export type ContactUpdateWithWhereUniqueWithoutLeadInput = {
    where: ContactWhereUniqueInput
    data: XOR<ContactUpdateWithoutLeadInput, ContactUncheckedUpdateWithoutLeadInput>
  }

  export type ContactUpdateManyWithWhereWithoutLeadInput = {
    where: ContactScalarWhereInput
    data: XOR<ContactUpdateManyMutationInput, ContactUncheckedUpdateManyWithoutLeadInput>
  }

  export type AttachmentUpsertWithWhereUniqueWithoutLeadInput = {
    where: AttachmentWhereUniqueInput
    update: XOR<AttachmentUpdateWithoutLeadInput, AttachmentUncheckedUpdateWithoutLeadInput>
    create: XOR<AttachmentCreateWithoutLeadInput, AttachmentUncheckedCreateWithoutLeadInput>
  }

  export type AttachmentUpdateWithWhereUniqueWithoutLeadInput = {
    where: AttachmentWhereUniqueInput
    data: XOR<AttachmentUpdateWithoutLeadInput, AttachmentUncheckedUpdateWithoutLeadInput>
  }

  export type AttachmentUpdateManyWithWhereWithoutLeadInput = {
    where: AttachmentScalarWhereInput
    data: XOR<AttachmentUpdateManyMutationInput, AttachmentUncheckedUpdateManyWithoutLeadInput>
  }

  export type AttachmentScalarWhereInput = {
    AND?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    OR?: AttachmentScalarWhereInput[]
    NOT?: AttachmentScalarWhereInput | AttachmentScalarWhereInput[]
    id?: StringFilter<"Attachment"> | string
    attachmentUrl?: StringFilter<"Attachment"> | string
    attachmentType?: StringFilter<"Attachment"> | string
    eTag?: StringFilter<"Attachment"> | string
    attachmentName?: StringFilter<"Attachment"> | string
    leadId?: StringFilter<"Attachment"> | string
    createdAt?: BigIntFilter<"Attachment"> | bigint | number
    updatedAt?: BigIntFilter<"Attachment"> | bigint | number
    deletedAt?: BigIntFilter<"Attachment"> | bigint | number
  }

  export type OrganizationUpsertWithoutLeadInput = {
    update: XOR<OrganizationUpdateWithoutLeadInput, OrganizationUncheckedUpdateWithoutLeadInput>
    create: XOR<OrganizationCreateWithoutLeadInput, OrganizationUncheckedCreateWithoutLeadInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutLeadInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutLeadInput, OrganizationUncheckedUpdateWithoutLeadInput>
  }

  export type OrganizationUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type IntegrationUpsertWithoutLeadInput = {
    update: XOR<IntegrationUpdateWithoutLeadInput, IntegrationUncheckedUpdateWithoutLeadInput>
    create: XOR<IntegrationCreateWithoutLeadInput, IntegrationUncheckedCreateWithoutLeadInput>
    where?: IntegrationWhereInput
  }

  export type IntegrationUpdateToOneWithWhereWithoutLeadInput = {
    where?: IntegrationWhereInput
    data: XOR<IntegrationUpdateWithoutLeadInput, IntegrationUncheckedUpdateWithoutLeadInput>
  }

  export type IntegrationUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    members?: OrgMemberUpdateOneWithoutIntegrationNestedInput
    Project?: ProjectUpdateManyWithoutIntegrationNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orgMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    Project?: ProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUncheckedUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type EmailUpsertWithWhereUniqueWithoutLeadInput = {
    where: EmailWhereUniqueInput
    update: XOR<EmailUpdateWithoutLeadInput, EmailUncheckedUpdateWithoutLeadInput>
    create: XOR<EmailCreateWithoutLeadInput, EmailUncheckedCreateWithoutLeadInput>
  }

  export type EmailUpdateWithWhereUniqueWithoutLeadInput = {
    where: EmailWhereUniqueInput
    data: XOR<EmailUpdateWithoutLeadInput, EmailUncheckedUpdateWithoutLeadInput>
  }

  export type EmailUpdateManyWithWhereWithoutLeadInput = {
    where: EmailScalarWhereInput
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyWithoutLeadInput>
  }

  export type IntegrationCreateWithoutLeadProjectInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    members?: OrgMemberCreateNestedOneWithoutIntegrationInput
    Project?: ProjectCreateNestedManyWithoutIntegrationInput
    organization: OrganizationCreateNestedOneWithoutIntegrationsInput
    Lead?: LeadCreateNestedManyWithoutIntegrationInput
    Jobs?: JobCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutLeadProjectInput = {
    id?: string
    organizationId: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    orgMemberId?: string | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    Project?: ProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutIntegrationInput
    Jobs?: JobUncheckedCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutLeadProjectInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutLeadProjectInput, IntegrationUncheckedCreateWithoutLeadProjectInput>
  }

  export type LeadCreateWithoutProjectInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: LeadStatusCreateNestedOneWithoutLeadInput
    leadActivities?: LeadActivityCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesCreateNestedManyWithoutLeadInput
    contacts?: ContactCreateNestedManyWithoutLeadInput
    attachments?: AttachmentCreateNestedManyWithoutLeadInput
    organization: OrganizationCreateNestedOneWithoutLeadInput
    integration?: IntegrationCreateNestedOneWithoutLeadInput
    Email?: EmailCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutProjectInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
    leadActivities?: LeadActivityUncheckedCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesUncheckedCreateNestedManyWithoutLeadInput
    contacts?: ContactUncheckedCreateNestedManyWithoutLeadInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutLeadInput
    Email?: EmailUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutProjectInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutProjectInput, LeadUncheckedCreateWithoutProjectInput>
  }

  export type ProjectCreateWithoutLeadProjectInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    organization: OrganizationCreateNestedOneWithoutProjectInput
    integration: IntegrationCreateNestedOneWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutLeadProjectInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    organizationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    integrationId: string
  }

  export type ProjectCreateOrConnectWithoutLeadProjectInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutLeadProjectInput, ProjectUncheckedCreateWithoutLeadProjectInput>
  }

  export type OrganizationCreateWithoutLeadProjectInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutLeadProjectInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutLeadProjectInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutLeadProjectInput, OrganizationUncheckedCreateWithoutLeadProjectInput>
  }

  export type IntegrationUpsertWithoutLeadProjectInput = {
    update: XOR<IntegrationUpdateWithoutLeadProjectInput, IntegrationUncheckedUpdateWithoutLeadProjectInput>
    create: XOR<IntegrationCreateWithoutLeadProjectInput, IntegrationUncheckedCreateWithoutLeadProjectInput>
    where?: IntegrationWhereInput
  }

  export type IntegrationUpdateToOneWithWhereWithoutLeadProjectInput = {
    where?: IntegrationWhereInput
    data: XOR<IntegrationUpdateWithoutLeadProjectInput, IntegrationUncheckedUpdateWithoutLeadProjectInput>
  }

  export type IntegrationUpdateWithoutLeadProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    members?: OrgMemberUpdateOneWithoutIntegrationNestedInput
    Project?: ProjectUpdateManyWithoutIntegrationNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput
    Lead?: LeadUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutLeadProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orgMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    Project?: ProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUncheckedUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type LeadUpsertWithoutProjectInput = {
    update: XOR<LeadUpdateWithoutProjectInput, LeadUncheckedUpdateWithoutProjectInput>
    create: XOR<LeadCreateWithoutProjectInput, LeadUncheckedCreateWithoutProjectInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutProjectInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutProjectInput, LeadUncheckedUpdateWithoutProjectInput>
  }

  export type LeadUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: LeadStatusUpdateOneWithoutLeadNestedInput
    leadActivities?: LeadActivityUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUpdateManyWithoutLeadNestedInput
    contacts?: ContactUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUpdateManyWithoutLeadNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadNestedInput
    integration?: IntegrationUpdateOneWithoutLeadNestedInput
    Email?: EmailUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    leadActivities?: LeadActivityUncheckedUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUncheckedUpdateManyWithoutLeadNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutLeadNestedInput
    Email?: EmailUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type ProjectUpsertWithoutLeadProjectInput = {
    update: XOR<ProjectUpdateWithoutLeadProjectInput, ProjectUncheckedUpdateWithoutLeadProjectInput>
    create: XOR<ProjectCreateWithoutLeadProjectInput, ProjectUncheckedCreateWithoutLeadProjectInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutLeadProjectInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutLeadProjectInput, ProjectUncheckedUpdateWithoutLeadProjectInput>
  }

  export type ProjectUpdateWithoutLeadProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    organization?: OrganizationUpdateOneRequiredWithoutProjectNestedInput
    integration?: IntegrationUpdateOneRequiredWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutLeadProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    integrationId?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUpsertWithoutLeadProjectInput = {
    update: XOR<OrganizationUpdateWithoutLeadProjectInput, OrganizationUncheckedUpdateWithoutLeadProjectInput>
    create: XOR<OrganizationCreateWithoutLeadProjectInput, OrganizationUncheckedCreateWithoutLeadProjectInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutLeadProjectInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutLeadProjectInput, OrganizationUncheckedUpdateWithoutLeadProjectInput>
  }

  export type OrganizationUpdateWithoutLeadProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutLeadProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutContactInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutContactInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutContactInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutContactInput, OrganizationUncheckedCreateWithoutContactInput>
  }

  export type LeadCreateWithoutContactsInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: LeadStatusCreateNestedOneWithoutLeadInput
    Project?: LeadProjectCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesCreateNestedManyWithoutLeadInput
    attachments?: AttachmentCreateNestedManyWithoutLeadInput
    organization: OrganizationCreateNestedOneWithoutLeadInput
    integration?: IntegrationCreateNestedOneWithoutLeadInput
    Email?: EmailCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutContactsInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
    Project?: LeadProjectUncheckedCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityUncheckedCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesUncheckedCreateNestedManyWithoutLeadInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutLeadInput
    Email?: EmailUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutContactsInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutContactsInput, LeadUncheckedCreateWithoutContactsInput>
  }

  export type EmailCreateWithoutContactInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    source: $Enums.IntegrationType
    lead?: LeadCreateNestedOneWithoutEmailInput
    organization: OrganizationCreateNestedOneWithoutEmailInput
    EmailQueue?: EmailQueueCreateNestedManyWithoutEmailInput
  }

  export type EmailUncheckedCreateWithoutContactInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    organizationId: string
    leadId?: string | null
    source: $Enums.IntegrationType
    EmailQueue?: EmailQueueUncheckedCreateNestedManyWithoutEmailInput
  }

  export type EmailCreateOrConnectWithoutContactInput = {
    where: EmailWhereUniqueInput
    create: XOR<EmailCreateWithoutContactInput, EmailUncheckedCreateWithoutContactInput>
  }

  export type EmailCreateManyContactInputEnvelope = {
    data: EmailCreateManyContactInput | EmailCreateManyContactInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationUpsertWithoutContactInput = {
    update: XOR<OrganizationUpdateWithoutContactInput, OrganizationUncheckedUpdateWithoutContactInput>
    create: XOR<OrganizationCreateWithoutContactInput, OrganizationUncheckedCreateWithoutContactInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutContactInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutContactInput, OrganizationUncheckedUpdateWithoutContactInput>
  }

  export type OrganizationUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type LeadUpsertWithoutContactsInput = {
    update: XOR<LeadUpdateWithoutContactsInput, LeadUncheckedUpdateWithoutContactsInput>
    create: XOR<LeadCreateWithoutContactsInput, LeadUncheckedCreateWithoutContactsInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutContactsInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutContactsInput, LeadUncheckedUpdateWithoutContactsInput>
  }

  export type LeadUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: LeadStatusUpdateOneWithoutLeadNestedInput
    Project?: LeadProjectUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUpdateManyWithoutLeadNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadNestedInput
    integration?: IntegrationUpdateOneWithoutLeadNestedInput
    Email?: EmailUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutContactsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    Project?: LeadProjectUncheckedUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUncheckedUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUncheckedUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutLeadNestedInput
    Email?: EmailUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type EmailUpsertWithWhereUniqueWithoutContactInput = {
    where: EmailWhereUniqueInput
    update: XOR<EmailUpdateWithoutContactInput, EmailUncheckedUpdateWithoutContactInput>
    create: XOR<EmailCreateWithoutContactInput, EmailUncheckedCreateWithoutContactInput>
  }

  export type EmailUpdateWithWhereUniqueWithoutContactInput = {
    where: EmailWhereUniqueInput
    data: XOR<EmailUpdateWithoutContactInput, EmailUncheckedUpdateWithoutContactInput>
  }

  export type EmailUpdateManyWithWhereWithoutContactInput = {
    where: EmailScalarWhereInput
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyWithoutContactInput>
  }

  export type LeadCreateWithoutAttachmentsInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: LeadStatusCreateNestedOneWithoutLeadInput
    Project?: LeadProjectCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesCreateNestedManyWithoutLeadInput
    contacts?: ContactCreateNestedManyWithoutLeadInput
    organization: OrganizationCreateNestedOneWithoutLeadInput
    integration?: IntegrationCreateNestedOneWithoutLeadInput
    Email?: EmailCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutAttachmentsInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
    Project?: LeadProjectUncheckedCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityUncheckedCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesUncheckedCreateNestedManyWithoutLeadInput
    contacts?: ContactUncheckedCreateNestedManyWithoutLeadInput
    Email?: EmailUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutAttachmentsInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutAttachmentsInput, LeadUncheckedCreateWithoutAttachmentsInput>
  }

  export type LeadUpsertWithoutAttachmentsInput = {
    update: XOR<LeadUpdateWithoutAttachmentsInput, LeadUncheckedUpdateWithoutAttachmentsInput>
    create: XOR<LeadCreateWithoutAttachmentsInput, LeadUncheckedCreateWithoutAttachmentsInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutAttachmentsInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutAttachmentsInput, LeadUncheckedUpdateWithoutAttachmentsInput>
  }

  export type LeadUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: LeadStatusUpdateOneWithoutLeadNestedInput
    Project?: LeadProjectUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUpdateManyWithoutLeadNestedInput
    contacts?: ContactUpdateManyWithoutLeadNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadNestedInput
    integration?: IntegrationUpdateOneWithoutLeadNestedInput
    Email?: EmailUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutAttachmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    Project?: LeadProjectUncheckedUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUncheckedUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUncheckedUpdateManyWithoutLeadNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutLeadNestedInput
    Email?: EmailUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type OrganizationCreateWithoutLeadActivityInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutLeadActivityInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutLeadActivityInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutLeadActivityInput, OrganizationUncheckedCreateWithoutLeadActivityInput>
  }

  export type LeadCreateWithoutLeadActivitiesInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: LeadStatusCreateNestedOneWithoutLeadInput
    Project?: LeadProjectCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesCreateNestedManyWithoutLeadInput
    contacts?: ContactCreateNestedManyWithoutLeadInput
    attachments?: AttachmentCreateNestedManyWithoutLeadInput
    organization: OrganizationCreateNestedOneWithoutLeadInput
    integration?: IntegrationCreateNestedOneWithoutLeadInput
    Email?: EmailCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutLeadActivitiesInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
    Project?: LeadProjectUncheckedCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesUncheckedCreateNestedManyWithoutLeadInput
    contacts?: ContactUncheckedCreateNestedManyWithoutLeadInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutLeadInput
    Email?: EmailUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutLeadActivitiesInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutLeadActivitiesInput, LeadUncheckedCreateWithoutLeadActivitiesInput>
  }

  export type UserCreateWithoutLeadActivityInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    orgMembers?: OrgMemberCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteCreateNestedManyWithoutInviterInput
    templates?: TemplateCreateNestedManyWithoutUserInput
    LeadNotes?: LeadNotesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLeadActivityInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    orgMembers?: OrgMemberUncheckedCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteUncheckedCreateNestedManyWithoutInviterInput
    templates?: TemplateUncheckedCreateNestedManyWithoutUserInput
    LeadNotes?: LeadNotesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLeadActivityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLeadActivityInput, UserUncheckedCreateWithoutLeadActivityInput>
  }

  export type LeadNotesCreateWithoutLeadActivityInput = {
    id?: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    lead: LeadCreateNestedOneWithoutLeadNotesInput
    user: UserCreateNestedOneWithoutLeadNotesInput
  }

  export type LeadNotesUncheckedCreateWithoutLeadActivityInput = {
    id?: string
    leadId: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    userId: string
  }

  export type LeadNotesCreateOrConnectWithoutLeadActivityInput = {
    where: LeadNotesWhereUniqueInput
    create: XOR<LeadNotesCreateWithoutLeadActivityInput, LeadNotesUncheckedCreateWithoutLeadActivityInput>
  }

  export type OrganizationUpsertWithoutLeadActivityInput = {
    update: XOR<OrganizationUpdateWithoutLeadActivityInput, OrganizationUncheckedUpdateWithoutLeadActivityInput>
    create: XOR<OrganizationCreateWithoutLeadActivityInput, OrganizationUncheckedCreateWithoutLeadActivityInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutLeadActivityInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutLeadActivityInput, OrganizationUncheckedUpdateWithoutLeadActivityInput>
  }

  export type OrganizationUpdateWithoutLeadActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutLeadActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type LeadUpsertWithoutLeadActivitiesInput = {
    update: XOR<LeadUpdateWithoutLeadActivitiesInput, LeadUncheckedUpdateWithoutLeadActivitiesInput>
    create: XOR<LeadCreateWithoutLeadActivitiesInput, LeadUncheckedCreateWithoutLeadActivitiesInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutLeadActivitiesInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutLeadActivitiesInput, LeadUncheckedUpdateWithoutLeadActivitiesInput>
  }

  export type LeadUpdateWithoutLeadActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: LeadStatusUpdateOneWithoutLeadNestedInput
    Project?: LeadProjectUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUpdateManyWithoutLeadNestedInput
    contacts?: ContactUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUpdateManyWithoutLeadNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadNestedInput
    integration?: IntegrationUpdateOneWithoutLeadNestedInput
    Email?: EmailUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutLeadActivitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    Project?: LeadProjectUncheckedUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUncheckedUpdateManyWithoutLeadNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutLeadNestedInput
    Email?: EmailUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type UserUpsertWithoutLeadActivityInput = {
    update: XOR<UserUpdateWithoutLeadActivityInput, UserUncheckedUpdateWithoutLeadActivityInput>
    create: XOR<UserCreateWithoutLeadActivityInput, UserUncheckedCreateWithoutLeadActivityInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLeadActivityInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLeadActivityInput, UserUncheckedUpdateWithoutLeadActivityInput>
  }

  export type UserUpdateWithoutLeadActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    orgMembers?: OrgMemberUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUpdateManyWithoutInviterNestedInput
    templates?: TemplateUpdateManyWithoutUserNestedInput
    LeadNotes?: LeadNotesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLeadActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    orgMembers?: OrgMemberUncheckedUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUncheckedUpdateManyWithoutInviterNestedInput
    templates?: TemplateUncheckedUpdateManyWithoutUserNestedInput
    LeadNotes?: LeadNotesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LeadNotesUpsertWithoutLeadActivityInput = {
    update: XOR<LeadNotesUpdateWithoutLeadActivityInput, LeadNotesUncheckedUpdateWithoutLeadActivityInput>
    create: XOR<LeadNotesCreateWithoutLeadActivityInput, LeadNotesUncheckedCreateWithoutLeadActivityInput>
    where?: LeadNotesWhereInput
  }

  export type LeadNotesUpdateToOneWithWhereWithoutLeadActivityInput = {
    where?: LeadNotesWhereInput
    data: XOR<LeadNotesUpdateWithoutLeadActivityInput, LeadNotesUncheckedUpdateWithoutLeadActivityInput>
  }

  export type LeadNotesUpdateWithoutLeadActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    lead?: LeadUpdateOneRequiredWithoutLeadNotesNestedInput
    user?: UserUpdateOneRequiredWithoutLeadNotesNestedInput
  }

  export type LeadNotesUncheckedUpdateWithoutLeadActivityInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ContactCreateWithoutEmailInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    isPrimay?: boolean
    isUnsubscribed?: boolean
    organization: OrganizationCreateNestedOneWithoutContactInput
    lead: LeadCreateNestedOneWithoutContactsInput
  }

  export type ContactUncheckedCreateWithoutEmailInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    leadId: string
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organizationId: string
    isPrimay?: boolean
    isUnsubscribed?: boolean
  }

  export type ContactCreateOrConnectWithoutEmailInput = {
    where: ContactWhereUniqueInput
    create: XOR<ContactCreateWithoutEmailInput, ContactUncheckedCreateWithoutEmailInput>
  }

  export type LeadCreateWithoutEmailInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: LeadStatusCreateNestedOneWithoutLeadInput
    Project?: LeadProjectCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesCreateNestedManyWithoutLeadInput
    contacts?: ContactCreateNestedManyWithoutLeadInput
    attachments?: AttachmentCreateNestedManyWithoutLeadInput
    organization: OrganizationCreateNestedOneWithoutLeadInput
    integration?: IntegrationCreateNestedOneWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutEmailInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
    Project?: LeadProjectUncheckedCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityUncheckedCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesUncheckedCreateNestedManyWithoutLeadInput
    contacts?: ContactUncheckedCreateNestedManyWithoutLeadInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutEmailInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutEmailInput, LeadUncheckedCreateWithoutEmailInput>
  }

  export type OrganizationCreateWithoutEmailInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutEmailInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutEmailInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutEmailInput, OrganizationUncheckedCreateWithoutEmailInput>
  }

  export type EmailQueueCreateWithoutEmailInput = {
    id?: string
    scheduledAt: bigint | number
    status: $Enums.QueueStatus
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailQueueUncheckedCreateWithoutEmailInput = {
    id?: string
    scheduledAt: bigint | number
    status: $Enums.QueueStatus
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailQueueCreateOrConnectWithoutEmailInput = {
    where: EmailQueueWhereUniqueInput
    create: XOR<EmailQueueCreateWithoutEmailInput, EmailQueueUncheckedCreateWithoutEmailInput>
  }

  export type EmailQueueCreateManyEmailInputEnvelope = {
    data: EmailQueueCreateManyEmailInput | EmailQueueCreateManyEmailInput[]
    skipDuplicates?: boolean
  }

  export type ContactUpsertWithoutEmailInput = {
    update: XOR<ContactUpdateWithoutEmailInput, ContactUncheckedUpdateWithoutEmailInput>
    create: XOR<ContactCreateWithoutEmailInput, ContactUncheckedCreateWithoutEmailInput>
    where?: ContactWhereInput
  }

  export type ContactUpdateToOneWithWhereWithoutEmailInput = {
    where?: ContactWhereInput
    data: XOR<ContactUpdateWithoutEmailInput, ContactUncheckedUpdateWithoutEmailInput>
  }

  export type ContactUpdateWithoutEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutContactNestedInput
    lead?: LeadUpdateOneRequiredWithoutContactsNestedInput
  }

  export type ContactUncheckedUpdateWithoutEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    leadId?: StringFieldUpdateOperationsInput | string
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LeadUpsertWithoutEmailInput = {
    update: XOR<LeadUpdateWithoutEmailInput, LeadUncheckedUpdateWithoutEmailInput>
    create: XOR<LeadCreateWithoutEmailInput, LeadUncheckedCreateWithoutEmailInput>
    where?: LeadWhereInput
  }

  export type LeadUpdateToOneWithWhereWithoutEmailInput = {
    where?: LeadWhereInput
    data: XOR<LeadUpdateWithoutEmailInput, LeadUncheckedUpdateWithoutEmailInput>
  }

  export type LeadUpdateWithoutEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: LeadStatusUpdateOneWithoutLeadNestedInput
    Project?: LeadProjectUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUpdateManyWithoutLeadNestedInput
    contacts?: ContactUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUpdateManyWithoutLeadNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadNestedInput
    integration?: IntegrationUpdateOneWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    Project?: LeadProjectUncheckedUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUncheckedUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUncheckedUpdateManyWithoutLeadNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type OrganizationUpsertWithoutEmailInput = {
    update: XOR<OrganizationUpdateWithoutEmailInput, OrganizationUncheckedUpdateWithoutEmailInput>
    create: XOR<OrganizationCreateWithoutEmailInput, OrganizationUncheckedCreateWithoutEmailInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutEmailInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutEmailInput, OrganizationUncheckedUpdateWithoutEmailInput>
  }

  export type OrganizationUpdateWithoutEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type EmailQueueUpsertWithWhereUniqueWithoutEmailInput = {
    where: EmailQueueWhereUniqueInput
    update: XOR<EmailQueueUpdateWithoutEmailInput, EmailQueueUncheckedUpdateWithoutEmailInput>
    create: XOR<EmailQueueCreateWithoutEmailInput, EmailQueueUncheckedCreateWithoutEmailInput>
  }

  export type EmailQueueUpdateWithWhereUniqueWithoutEmailInput = {
    where: EmailQueueWhereUniqueInput
    data: XOR<EmailQueueUpdateWithoutEmailInput, EmailQueueUncheckedUpdateWithoutEmailInput>
  }

  export type EmailQueueUpdateManyWithWhereWithoutEmailInput = {
    where: EmailQueueScalarWhereInput
    data: XOR<EmailQueueUpdateManyMutationInput, EmailQueueUncheckedUpdateManyWithoutEmailInput>
  }

  export type EmailQueueScalarWhereInput = {
    AND?: EmailQueueScalarWhereInput | EmailQueueScalarWhereInput[]
    OR?: EmailQueueScalarWhereInput[]
    NOT?: EmailQueueScalarWhereInput | EmailQueueScalarWhereInput[]
    id?: StringFilter<"EmailQueue"> | string
    emailId?: StringFilter<"EmailQueue"> | string
    scheduledAt?: BigIntFilter<"EmailQueue"> | bigint | number
    status?: EnumQueueStatusFilter<"EmailQueue"> | $Enums.QueueStatus
    retryCount?: IntFilter<"EmailQueue"> | number
    createdAt?: DateTimeFilter<"EmailQueue"> | Date | string
    updatedAt?: DateTimeFilter<"EmailQueue"> | Date | string
  }

  export type EmailCreateWithoutEmailQueueInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    source: $Enums.IntegrationType
    contact?: ContactCreateNestedOneWithoutEmailInput
    lead?: LeadCreateNestedOneWithoutEmailInput
    organization: OrganizationCreateNestedOneWithoutEmailInput
  }

  export type EmailUncheckedCreateWithoutEmailQueueInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    organizationId: string
    leadId?: string | null
    contactId?: string | null
    source: $Enums.IntegrationType
  }

  export type EmailCreateOrConnectWithoutEmailQueueInput = {
    where: EmailWhereUniqueInput
    create: XOR<EmailCreateWithoutEmailQueueInput, EmailUncheckedCreateWithoutEmailQueueInput>
  }

  export type EmailUpsertWithoutEmailQueueInput = {
    update: XOR<EmailUpdateWithoutEmailQueueInput, EmailUncheckedUpdateWithoutEmailQueueInput>
    create: XOR<EmailCreateWithoutEmailQueueInput, EmailUncheckedCreateWithoutEmailQueueInput>
    where?: EmailWhereInput
  }

  export type EmailUpdateToOneWithWhereWithoutEmailQueueInput = {
    where?: EmailWhereInput
    data: XOR<EmailUpdateWithoutEmailQueueInput, EmailUncheckedUpdateWithoutEmailQueueInput>
  }

  export type EmailUpdateWithoutEmailQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    contact?: ContactUpdateOneWithoutEmailNestedInput
    lead?: LeadUpdateOneWithoutEmailNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutEmailNestedInput
  }

  export type EmailUncheckedUpdateWithoutEmailQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
  }

  export type OrgMemberCreateWithoutIntegrationInput = {
    id?: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
    organization: OrganizationCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutOrgMembersInput
  }

  export type OrgMemberUncheckedCreateWithoutIntegrationInput = {
    id?: string
    organizationId: string
    userId: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
  }

  export type OrgMemberCreateOrConnectWithoutIntegrationInput = {
    where: OrgMemberWhereUniqueInput
    create: XOR<OrgMemberCreateWithoutIntegrationInput, OrgMemberUncheckedCreateWithoutIntegrationInput>
  }

  export type ProjectCreateWithoutIntegrationInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    organization: OrganizationCreateNestedOneWithoutProjectInput
    leadProject?: LeadProjectCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutIntegrationInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    organizationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    leadProject?: LeadProjectUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutIntegrationInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutIntegrationInput, ProjectUncheckedCreateWithoutIntegrationInput>
  }

  export type ProjectCreateManyIntegrationInputEnvelope = {
    data: ProjectCreateManyIntegrationInput | ProjectCreateManyIntegrationInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationCreateWithoutIntegrationsInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutIntegrationsInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutIntegrationsInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutIntegrationsInput, OrganizationUncheckedCreateWithoutIntegrationsInput>
  }

  export type LeadCreateWithoutIntegrationInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: LeadStatusCreateNestedOneWithoutLeadInput
    Project?: LeadProjectCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesCreateNestedManyWithoutLeadInput
    contacts?: ContactCreateNestedManyWithoutLeadInput
    attachments?: AttachmentCreateNestedManyWithoutLeadInput
    organization: OrganizationCreateNestedOneWithoutLeadInput
    Email?: EmailCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutIntegrationInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    organizationId: string
    Project?: LeadProjectUncheckedCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityUncheckedCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesUncheckedCreateNestedManyWithoutLeadInput
    contacts?: ContactUncheckedCreateNestedManyWithoutLeadInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutLeadInput
    Email?: EmailUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutIntegrationInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutIntegrationInput, LeadUncheckedCreateWithoutIntegrationInput>
  }

  export type LeadCreateManyIntegrationInputEnvelope = {
    data: LeadCreateManyIntegrationInput | LeadCreateManyIntegrationInput[]
    skipDuplicates?: boolean
  }

  export type LeadProjectCreateWithoutIntegrationInput = {
    id?: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
    lead: LeadCreateNestedOneWithoutProjectInput
    project: ProjectCreateNestedOneWithoutLeadProjectInput
    organizatioon: OrganizationCreateNestedOneWithoutLeadProjectInput
  }

  export type LeadProjectUncheckedCreateWithoutIntegrationInput = {
    id?: string
    leadId: string
    projectId: string
    orgId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type LeadProjectCreateOrConnectWithoutIntegrationInput = {
    where: LeadProjectWhereUniqueInput
    create: XOR<LeadProjectCreateWithoutIntegrationInput, LeadProjectUncheckedCreateWithoutIntegrationInput>
  }

  export type LeadProjectCreateManyIntegrationInputEnvelope = {
    data: LeadProjectCreateManyIntegrationInput | LeadProjectCreateManyIntegrationInput[]
    skipDuplicates?: boolean
  }

  export type JobCreateWithoutIntegrationInput = {
    id?: string
    name: string
    status: $Enums.JobStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
    organizationId: string
    tasks?: TaskCreateNestedManyWithoutJobInput
  }

  export type JobUncheckedCreateWithoutIntegrationInput = {
    id?: string
    name: string
    status: $Enums.JobStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
    organizationId: string
    tasks?: TaskUncheckedCreateNestedManyWithoutJobInput
  }

  export type JobCreateOrConnectWithoutIntegrationInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutIntegrationInput, JobUncheckedCreateWithoutIntegrationInput>
  }

  export type JobCreateManyIntegrationInputEnvelope = {
    data: JobCreateManyIntegrationInput | JobCreateManyIntegrationInput[]
    skipDuplicates?: boolean
  }

  export type MailServiceFromEmailCreateWithoutIntegrationInput = {
    id?: string
    fromName: string
    fromEmail: string
    replyTo?: string | null
    type: $Enums.IntegrationType
    createdAt?: bigint | number
    updatedAt?: bigint | number
    organization: OrganizationCreateNestedOneWithoutMailServiceFromEmailInput
  }

  export type MailServiceFromEmailUncheckedCreateWithoutIntegrationInput = {
    id?: string
    fromName: string
    fromEmail: string
    replyTo?: string | null
    type: $Enums.IntegrationType
    organizationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type MailServiceFromEmailCreateOrConnectWithoutIntegrationInput = {
    where: MailServiceFromEmailWhereUniqueInput
    create: XOR<MailServiceFromEmailCreateWithoutIntegrationInput, MailServiceFromEmailUncheckedCreateWithoutIntegrationInput>
  }

  export type MailServiceFromEmailCreateManyIntegrationInputEnvelope = {
    data: MailServiceFromEmailCreateManyIntegrationInput | MailServiceFromEmailCreateManyIntegrationInput[]
    skipDuplicates?: boolean
  }

  export type OrgMemberUpsertWithoutIntegrationInput = {
    update: XOR<OrgMemberUpdateWithoutIntegrationInput, OrgMemberUncheckedUpdateWithoutIntegrationInput>
    create: XOR<OrgMemberCreateWithoutIntegrationInput, OrgMemberUncheckedCreateWithoutIntegrationInput>
    where?: OrgMemberWhereInput
  }

  export type OrgMemberUpdateToOneWithWhereWithoutIntegrationInput = {
    where?: OrgMemberWhereInput
    data: XOR<OrgMemberUpdateWithoutIntegrationInput, OrgMemberUncheckedUpdateWithoutIntegrationInput>
  }

  export type OrgMemberUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutOrgMembersNestedInput
  }

  export type OrgMemberUncheckedUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectUpsertWithWhereUniqueWithoutIntegrationInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutIntegrationInput, ProjectUncheckedUpdateWithoutIntegrationInput>
    create: XOR<ProjectCreateWithoutIntegrationInput, ProjectUncheckedCreateWithoutIntegrationInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutIntegrationInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutIntegrationInput, ProjectUncheckedUpdateWithoutIntegrationInput>
  }

  export type ProjectUpdateManyWithWhereWithoutIntegrationInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutIntegrationInput>
  }

  export type OrganizationUpsertWithoutIntegrationsInput = {
    update: XOR<OrganizationUpdateWithoutIntegrationsInput, OrganizationUncheckedUpdateWithoutIntegrationsInput>
    create: XOR<OrganizationCreateWithoutIntegrationsInput, OrganizationUncheckedCreateWithoutIntegrationsInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutIntegrationsInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutIntegrationsInput, OrganizationUncheckedUpdateWithoutIntegrationsInput>
  }

  export type OrganizationUpdateWithoutIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutIntegrationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type LeadUpsertWithWhereUniqueWithoutIntegrationInput = {
    where: LeadWhereUniqueInput
    update: XOR<LeadUpdateWithoutIntegrationInput, LeadUncheckedUpdateWithoutIntegrationInput>
    create: XOR<LeadCreateWithoutIntegrationInput, LeadUncheckedCreateWithoutIntegrationInput>
  }

  export type LeadUpdateWithWhereUniqueWithoutIntegrationInput = {
    where: LeadWhereUniqueInput
    data: XOR<LeadUpdateWithoutIntegrationInput, LeadUncheckedUpdateWithoutIntegrationInput>
  }

  export type LeadUpdateManyWithWhereWithoutIntegrationInput = {
    where: LeadScalarWhereInput
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyWithoutIntegrationInput>
  }

  export type LeadProjectUpsertWithWhereUniqueWithoutIntegrationInput = {
    where: LeadProjectWhereUniqueInput
    update: XOR<LeadProjectUpdateWithoutIntegrationInput, LeadProjectUncheckedUpdateWithoutIntegrationInput>
    create: XOR<LeadProjectCreateWithoutIntegrationInput, LeadProjectUncheckedCreateWithoutIntegrationInput>
  }

  export type LeadProjectUpdateWithWhereUniqueWithoutIntegrationInput = {
    where: LeadProjectWhereUniqueInput
    data: XOR<LeadProjectUpdateWithoutIntegrationInput, LeadProjectUncheckedUpdateWithoutIntegrationInput>
  }

  export type LeadProjectUpdateManyWithWhereWithoutIntegrationInput = {
    where: LeadProjectScalarWhereInput
    data: XOR<LeadProjectUpdateManyMutationInput, LeadProjectUncheckedUpdateManyWithoutIntegrationInput>
  }

  export type JobUpsertWithWhereUniqueWithoutIntegrationInput = {
    where: JobWhereUniqueInput
    update: XOR<JobUpdateWithoutIntegrationInput, JobUncheckedUpdateWithoutIntegrationInput>
    create: XOR<JobCreateWithoutIntegrationInput, JobUncheckedCreateWithoutIntegrationInput>
  }

  export type JobUpdateWithWhereUniqueWithoutIntegrationInput = {
    where: JobWhereUniqueInput
    data: XOR<JobUpdateWithoutIntegrationInput, JobUncheckedUpdateWithoutIntegrationInput>
  }

  export type JobUpdateManyWithWhereWithoutIntegrationInput = {
    where: JobScalarWhereInput
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyWithoutIntegrationInput>
  }

  export type JobScalarWhereInput = {
    AND?: JobScalarWhereInput | JobScalarWhereInput[]
    OR?: JobScalarWhereInput[]
    NOT?: JobScalarWhereInput | JobScalarWhereInput[]
    id?: StringFilter<"Job"> | string
    name?: StringFilter<"Job"> | string
    status?: EnumJobStatusFilter<"Job"> | $Enums.JobStatus
    createdAt?: BigIntFilter<"Job"> | bigint | number
    updatedAt?: BigIntFilter<"Job"> | bigint | number
    integrationId?: StringFilter<"Job"> | string
    organizationId?: StringFilter<"Job"> | string
  }

  export type MailServiceFromEmailUpsertWithWhereUniqueWithoutIntegrationInput = {
    where: MailServiceFromEmailWhereUniqueInput
    update: XOR<MailServiceFromEmailUpdateWithoutIntegrationInput, MailServiceFromEmailUncheckedUpdateWithoutIntegrationInput>
    create: XOR<MailServiceFromEmailCreateWithoutIntegrationInput, MailServiceFromEmailUncheckedCreateWithoutIntegrationInput>
  }

  export type MailServiceFromEmailUpdateWithWhereUniqueWithoutIntegrationInput = {
    where: MailServiceFromEmailWhereUniqueInput
    data: XOR<MailServiceFromEmailUpdateWithoutIntegrationInput, MailServiceFromEmailUncheckedUpdateWithoutIntegrationInput>
  }

  export type MailServiceFromEmailUpdateManyWithWhereWithoutIntegrationInput = {
    where: MailServiceFromEmailScalarWhereInput
    data: XOR<MailServiceFromEmailUpdateManyMutationInput, MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationInput>
  }

  export type IntegrationCreateWithoutMailServiceFromEmailInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    members?: OrgMemberCreateNestedOneWithoutIntegrationInput
    Project?: ProjectCreateNestedManyWithoutIntegrationInput
    organization: OrganizationCreateNestedOneWithoutIntegrationsInput
    Lead?: LeadCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutIntegrationInput
    Jobs?: JobCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutMailServiceFromEmailInput = {
    id?: string
    organizationId: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    orgMemberId?: string | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    Project?: ProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Jobs?: JobUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutMailServiceFromEmailInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutMailServiceFromEmailInput, IntegrationUncheckedCreateWithoutMailServiceFromEmailInput>
  }

  export type OrganizationCreateWithoutMailServiceFromEmailInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutMailServiceFromEmailInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutMailServiceFromEmailInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutMailServiceFromEmailInput, OrganizationUncheckedCreateWithoutMailServiceFromEmailInput>
  }

  export type IntegrationUpsertWithoutMailServiceFromEmailInput = {
    update: XOR<IntegrationUpdateWithoutMailServiceFromEmailInput, IntegrationUncheckedUpdateWithoutMailServiceFromEmailInput>
    create: XOR<IntegrationCreateWithoutMailServiceFromEmailInput, IntegrationUncheckedCreateWithoutMailServiceFromEmailInput>
    where?: IntegrationWhereInput
  }

  export type IntegrationUpdateToOneWithWhereWithoutMailServiceFromEmailInput = {
    where?: IntegrationWhereInput
    data: XOR<IntegrationUpdateWithoutMailServiceFromEmailInput, IntegrationUncheckedUpdateWithoutMailServiceFromEmailInput>
  }

  export type IntegrationUpdateWithoutMailServiceFromEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    members?: OrgMemberUpdateOneWithoutIntegrationNestedInput
    Project?: ProjectUpdateManyWithoutIntegrationNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput
    Lead?: LeadUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutMailServiceFromEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orgMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    Project?: ProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type OrganizationUpsertWithoutMailServiceFromEmailInput = {
    update: XOR<OrganizationUpdateWithoutMailServiceFromEmailInput, OrganizationUncheckedUpdateWithoutMailServiceFromEmailInput>
    create: XOR<OrganizationCreateWithoutMailServiceFromEmailInput, OrganizationUncheckedCreateWithoutMailServiceFromEmailInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutMailServiceFromEmailInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutMailServiceFromEmailInput, OrganizationUncheckedUpdateWithoutMailServiceFromEmailInput>
  }

  export type OrganizationUpdateWithoutMailServiceFromEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutMailServiceFromEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutUnsubscribeLinkInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUnsubscribeLinkInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUnsubscribeLinkInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUnsubscribeLinkInput, OrganizationUncheckedCreateWithoutUnsubscribeLinkInput>
  }

  export type OrganizationUpsertWithoutUnsubscribeLinkInput = {
    update: XOR<OrganizationUpdateWithoutUnsubscribeLinkInput, OrganizationUncheckedUpdateWithoutUnsubscribeLinkInput>
    create: XOR<OrganizationCreateWithoutUnsubscribeLinkInput, OrganizationUncheckedCreateWithoutUnsubscribeLinkInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUnsubscribeLinkInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUnsubscribeLinkInput, OrganizationUncheckedUpdateWithoutUnsubscribeLinkInput>
  }

  export type OrganizationUpdateWithoutUnsubscribeLinkInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUnsubscribeLinkInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type IntegrationCreateWithoutJobsInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    members?: OrgMemberCreateNestedOneWithoutIntegrationInput
    Project?: ProjectCreateNestedManyWithoutIntegrationInput
    organization: OrganizationCreateNestedOneWithoutIntegrationsInput
    Lead?: LeadCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationUncheckedCreateWithoutJobsInput = {
    id?: string
    organizationId: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    orgMemberId?: string | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
    Project?: ProjectUncheckedCreateNestedManyWithoutIntegrationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutIntegrationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutIntegrationInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutIntegrationInput
  }

  export type IntegrationCreateOrConnectWithoutJobsInput = {
    where: IntegrationWhereUniqueInput
    create: XOR<IntegrationCreateWithoutJobsInput, IntegrationUncheckedCreateWithoutJobsInput>
  }

  export type TaskCreateWithoutJobInput = {
    id?: string
    name: string
    status: $Enums.TaskStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type TaskUncheckedCreateWithoutJobInput = {
    id?: string
    name: string
    status: $Enums.TaskStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type TaskCreateOrConnectWithoutJobInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput>
  }

  export type TaskCreateManyJobInputEnvelope = {
    data: TaskCreateManyJobInput | TaskCreateManyJobInput[]
    skipDuplicates?: boolean
  }

  export type IntegrationUpsertWithoutJobsInput = {
    update: XOR<IntegrationUpdateWithoutJobsInput, IntegrationUncheckedUpdateWithoutJobsInput>
    create: XOR<IntegrationCreateWithoutJobsInput, IntegrationUncheckedCreateWithoutJobsInput>
    where?: IntegrationWhereInput
  }

  export type IntegrationUpdateToOneWithWhereWithoutJobsInput = {
    where?: IntegrationWhereInput
    data: XOR<IntegrationUpdateWithoutJobsInput, IntegrationUncheckedUpdateWithoutJobsInput>
  }

  export type IntegrationUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    members?: OrgMemberUpdateOneWithoutIntegrationNestedInput
    Project?: ProjectUpdateManyWithoutIntegrationNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput
    Lead?: LeadUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orgMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    Project?: ProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutJobInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutJobInput, TaskUncheckedUpdateWithoutJobInput>
    create: XOR<TaskCreateWithoutJobInput, TaskUncheckedCreateWithoutJobInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutJobInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutJobInput, TaskUncheckedUpdateWithoutJobInput>
  }

  export type TaskUpdateManyWithWhereWithoutJobInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutJobInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    jobId?: StringFilter<"Task"> | string
    name?: StringFilter<"Task"> | string
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    createdAt?: BigIntFilter<"Task"> | bigint | number
    updatedAt?: BigIntFilter<"Task"> | bigint | number
  }

  export type JobCreateWithoutTasksInput = {
    id?: string
    name: string
    status: $Enums.JobStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
    organizationId: string
    integration: IntegrationCreateNestedOneWithoutJobsInput
  }

  export type JobUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    status: $Enums.JobStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
    integrationId: string
    organizationId: string
  }

  export type JobCreateOrConnectWithoutTasksInput = {
    where: JobWhereUniqueInput
    create: XOR<JobCreateWithoutTasksInput, JobUncheckedCreateWithoutTasksInput>
  }

  export type JobUpsertWithoutTasksInput = {
    update: XOR<JobUpdateWithoutTasksInput, JobUncheckedUpdateWithoutTasksInput>
    create: XOR<JobCreateWithoutTasksInput, JobUncheckedCreateWithoutTasksInput>
    where?: JobWhereInput
  }

  export type JobUpdateToOneWithWhereWithoutTasksInput = {
    where?: JobWhereInput
    data: XOR<JobUpdateWithoutTasksInput, JobUncheckedUpdateWithoutTasksInput>
  }

  export type JobUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    integration?: IntegrationUpdateOneRequiredWithoutJobsNestedInput
  }

  export type JobUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationCreateWithoutWebhooksInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutWebhooksInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutWebhooksInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutWebhooksInput, OrganizationUncheckedCreateWithoutWebhooksInput>
  }

  export type OrganizationUpsertWithoutWebhooksInput = {
    update: XOR<OrganizationUpdateWithoutWebhooksInput, OrganizationUncheckedUpdateWithoutWebhooksInput>
    create: XOR<OrganizationCreateWithoutWebhooksInput, OrganizationUncheckedCreateWithoutWebhooksInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutWebhooksInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutWebhooksInput, OrganizationUncheckedUpdateWithoutWebhooksInput>
  }

  export type OrganizationUpdateWithoutWebhooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutWebhooksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutTemplateInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutTemplateInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    LeadStatus?: LeadStatusUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutTemplateInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutTemplateInput, OrganizationUncheckedCreateWithoutTemplateInput>
  }

  export type UserCreateWithoutTemplatesInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityCreateNestedManyWithoutUserInput
    orgMembers?: OrgMemberCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteCreateNestedManyWithoutInviterInput
    LeadNotes?: LeadNotesCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTemplatesInput = {
    id?: string
    email: string
    authenticationMethod: $Enums.AuthenticationMethod
    name?: string | null
    avatarUrl?: string | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutUserInput
    orgMembers?: OrgMemberUncheckedCreateNestedManyWithoutUserInput
    orgMemberInvites?: OrgMemberInviteUncheckedCreateNestedManyWithoutInviterInput
    LeadNotes?: LeadNotesUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTemplatesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTemplatesInput, UserUncheckedCreateWithoutTemplatesInput>
  }

  export type OrganizationUpsertWithoutTemplateInput = {
    update: XOR<OrganizationUpdateWithoutTemplateInput, OrganizationUncheckedUpdateWithoutTemplateInput>
    create: XOR<OrganizationCreateWithoutTemplateInput, OrganizationUncheckedCreateWithoutTemplateInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutTemplateInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutTemplateInput, OrganizationUncheckedUpdateWithoutTemplateInput>
  }

  export type OrganizationUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutTemplateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadStatus?: LeadStatusUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type UserUpsertWithoutTemplatesInput = {
    update: XOR<UserUpdateWithoutTemplatesInput, UserUncheckedUpdateWithoutTemplatesInput>
    create: XOR<UserCreateWithoutTemplatesInput, UserUncheckedCreateWithoutTemplatesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTemplatesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTemplatesInput, UserUncheckedUpdateWithoutTemplatesInput>
  }

  export type UserUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUpdateManyWithoutUserNestedInput
    orgMembers?: OrgMemberUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUpdateManyWithoutInviterNestedInput
    LeadNotes?: LeadNotesUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    authenticationMethod?: EnumAuthenticationMethodFieldUpdateOperationsInput | $Enums.AuthenticationMethod
    name?: NullableStringFieldUpdateOperationsInput | string | null
    avatarUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutUserNestedInput
    orgMembers?: OrgMemberUncheckedUpdateManyWithoutUserNestedInput
    orgMemberInvites?: OrgMemberInviteUncheckedUpdateManyWithoutInviterNestedInput
    LeadNotes?: LeadNotesUncheckedUpdateManyWithoutUserNestedInput
  }

  export type LeadCreateWithoutStatusInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    Project?: LeadProjectCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesCreateNestedManyWithoutLeadInput
    contacts?: ContactCreateNestedManyWithoutLeadInput
    attachments?: AttachmentCreateNestedManyWithoutLeadInput
    organization: OrganizationCreateNestedOneWithoutLeadInput
    integration?: IntegrationCreateNestedOneWithoutLeadInput
    Email?: EmailCreateNestedManyWithoutLeadInput
  }

  export type LeadUncheckedCreateWithoutStatusInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
    Project?: LeadProjectUncheckedCreateNestedManyWithoutLeadInput
    leadActivities?: LeadActivityUncheckedCreateNestedManyWithoutLeadInput
    leadNotes?: LeadNotesUncheckedCreateNestedManyWithoutLeadInput
    contacts?: ContactUncheckedCreateNestedManyWithoutLeadInput
    attachments?: AttachmentUncheckedCreateNestedManyWithoutLeadInput
    Email?: EmailUncheckedCreateNestedManyWithoutLeadInput
  }

  export type LeadCreateOrConnectWithoutStatusInput = {
    where: LeadWhereUniqueInput
    create: XOR<LeadCreateWithoutStatusInput, LeadUncheckedCreateWithoutStatusInput>
  }

  export type LeadCreateManyStatusInputEnvelope = {
    data: LeadCreateManyStatusInput | LeadCreateManyStatusInput[]
    skipDuplicates?: boolean
  }

  export type OrganizationCreateWithoutLeadStatusInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationCreateNestedManyWithoutOrganizationInput
    Lead?: LeadCreateNestedManyWithoutOrganizationInput
    contact?: ContactCreateNestedManyWithoutOrganizationInput
    Template?: TemplateCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookCreateNestedManyWithoutOrganizationInput
    Email?: EmailCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutLeadStatusInput = {
    id?: string
    name: string
    logo?: string | null
    description?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt: bigint | number
    Project?: ProjectUncheckedCreateNestedManyWithoutOrganizationInput
    members?: OrgMemberUncheckedCreateNestedManyWithoutOrganizationInput
    invites?: OrgMemberInviteUncheckedCreateNestedManyWithoutOrganizationInput
    integrations?: IntegrationUncheckedCreateNestedManyWithoutOrganizationInput
    Lead?: LeadUncheckedCreateNestedManyWithoutOrganizationInput
    contact?: ContactUncheckedCreateNestedManyWithoutOrganizationInput
    Template?: TemplateUncheckedCreateNestedManyWithoutOrganizationInput
    webhooks?: WebhookUncheckedCreateNestedManyWithoutOrganizationInput
    Email?: EmailUncheckedCreateNestedManyWithoutOrganizationInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedCreateNestedManyWithoutOrganizationInput
    LeadProject?: LeadProjectUncheckedCreateNestedManyWithoutOrganizatioonInput
    LeadActivity?: LeadActivityUncheckedCreateNestedManyWithoutOrganizationInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutLeadStatusInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutLeadStatusInput, OrganizationUncheckedCreateWithoutLeadStatusInput>
  }

  export type LeadUpsertWithWhereUniqueWithoutStatusInput = {
    where: LeadWhereUniqueInput
    update: XOR<LeadUpdateWithoutStatusInput, LeadUncheckedUpdateWithoutStatusInput>
    create: XOR<LeadCreateWithoutStatusInput, LeadUncheckedCreateWithoutStatusInput>
  }

  export type LeadUpdateWithWhereUniqueWithoutStatusInput = {
    where: LeadWhereUniqueInput
    data: XOR<LeadUpdateWithoutStatusInput, LeadUncheckedUpdateWithoutStatusInput>
  }

  export type LeadUpdateManyWithWhereWithoutStatusInput = {
    where: LeadScalarWhereInput
    data: XOR<LeadUpdateManyMutationInput, LeadUncheckedUpdateManyWithoutStatusInput>
  }

  export type OrganizationUpsertWithoutLeadStatusInput = {
    update: XOR<OrganizationUpdateWithoutLeadStatusInput, OrganizationUncheckedUpdateWithoutLeadStatusInput>
    create: XOR<OrganizationCreateWithoutLeadStatusInput, OrganizationUncheckedCreateWithoutLeadStatusInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutLeadStatusInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutLeadStatusInput, OrganizationUncheckedUpdateWithoutLeadStatusInput>
  }

  export type OrganizationUpdateWithoutLeadStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutLeadStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    details?: NullableJsonNullValueInput | InputJsonValue
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: ProjectUncheckedUpdateManyWithoutOrganizationNestedInput
    members?: OrgMemberUncheckedUpdateManyWithoutOrganizationNestedInput
    invites?: OrgMemberInviteUncheckedUpdateManyWithoutOrganizationNestedInput
    integrations?: IntegrationUncheckedUpdateManyWithoutOrganizationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutOrganizationNestedInput
    contact?: ContactUncheckedUpdateManyWithoutOrganizationNestedInput
    Template?: TemplateUncheckedUpdateManyWithoutOrganizationNestedInput
    webhooks?: WebhookUncheckedUpdateManyWithoutOrganizationNestedInput
    Email?: EmailUncheckedUpdateManyWithoutOrganizationNestedInput
    MailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutOrganizatioonNestedInput
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutOrganizationNestedInput
    UnsubscribeLink?: UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type LeadActivityCreateManyUserInput = {
    id?: string
    leadId: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    noteId?: string | null
    type: $Enums.LeadActivityType
    orgId: string
  }

  export type OrgMemberCreateManyUserInput = {
    id?: string
    organizationId: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
  }

  export type OrgMemberInviteCreateManyInviterInput = {
    id?: string
    token: string
    email: string
    role?: $Enums.OrgMemberRole
    organizationId: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type TemplateCreateManyUserInput = {
    id?: string
    html: string
    name: string
    createdAt: bigint | number
    isEnabled: boolean
    updatedAt: bigint | number
    deletedAt: bigint | number
    orgId?: string | null
  }

  export type LeadNotesCreateManyUserInput = {
    id?: string
    leadId: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type LeadActivityUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    organization?: OrganizationUpdateOneRequiredWithoutLeadActivityNestedInput
    lead?: LeadUpdateOneRequiredWithoutLeadActivitiesNestedInput
    note?: LeadNotesUpdateOneWithoutLeadActivityNestedInput
  }

  export type LeadActivityUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    orgId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadActivityUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    orgId?: StringFieldUpdateOperationsInput | string
  }

  export type OrgMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
    Integration?: IntegrationUpdateManyWithoutMembersNestedInput
  }

  export type OrgMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    Integration?: IntegrationUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type OrgMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
  }

  export type OrgMemberInviteUpdateWithoutInviterInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organization?: OrganizationUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type OrgMemberInviteUncheckedUpdateWithoutInviterInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OrgMemberInviteUncheckedUpdateManyWithoutInviterInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TemplateUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organization?: OrganizationUpdateOneWithoutTemplateNestedInput
  }

  export type TemplateUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    orgId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TemplateUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    orgId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadNotesUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    lead?: LeadUpdateOneRequiredWithoutLeadNotesNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutNoteNestedInput
  }

  export type LeadNotesUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type LeadNotesUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type ProjectCreateManyOrganizationInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    integrationId: string
  }

  export type OrgMemberCreateManyOrganizationInput = {
    id?: string
    userId: string
    role?: $Enums.OrgMemberRole
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    signature?: string
  }

  export type OrgMemberInviteCreateManyOrganizationInput = {
    id?: string
    token: string
    email: string
    role?: $Enums.OrgMemberRole
    inviterId: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type IntegrationCreateManyOrganizationInput = {
    id?: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    orgMemberId?: string | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
  }

  export type LeadCreateManyOrganizationInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
  }

  export type ContactCreateManyOrganizationInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    leadId: string
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    isPrimay?: boolean
    isUnsubscribed?: boolean
  }

  export type TemplateCreateManyOrganizationInput = {
    id?: string
    html: string
    name: string
    createdAt: bigint | number
    isEnabled: boolean
    updatedAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
  }

  export type LeadStatusCreateManyOrganizationInput = {
    id?: string
    status: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type WebhookCreateManyOrganizationInput = {
    id?: string
    url: string
    type: $Enums.WebhookType
    createdAt?: bigint | number
    data: JsonNullValueInput | InputJsonValue
  }

  export type EmailCreateManyOrganizationInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    leadId?: string | null
    contactId?: string | null
    source: $Enums.IntegrationType
  }

  export type MailServiceFromEmailCreateManyOrganizationInput = {
    id?: string
    fromName: string
    fromEmail: string
    replyTo?: string | null
    type: $Enums.IntegrationType
    integrationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type LeadProjectCreateManyOrganizatioonInput = {
    id?: string
    leadId: string
    projectId: string
    integrationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type LeadActivityCreateManyOrganizationInput = {
    id?: string
    leadId: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    noteId?: string | null
    type: $Enums.LeadActivityType
  }

  export type UnsubscribeLinkCreateManyOrganizationInput = {
    id?: string
    name: string
    message?: string | null
    anchorText: string
    isActive?: boolean
  }

  export type ProjectUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    leadProject?: LeadProjectUpdateManyWithoutProjectNestedInput
    integration?: IntegrationUpdateOneRequiredWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    integrationId?: StringFieldUpdateOperationsInput | string
    leadProject?: LeadProjectUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    integrationId?: StringFieldUpdateOperationsInput | string
  }

  export type OrgMemberUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutOrgMembersNestedInput
    Integration?: IntegrationUpdateManyWithoutMembersNestedInput
  }

  export type OrgMemberUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
    Integration?: IntegrationUncheckedUpdateManyWithoutMembersNestedInput
  }

  export type OrgMemberUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    signature?: StringFieldUpdateOperationsInput | string
  }

  export type OrgMemberInviteUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    inviter?: UserUpdateOneRequiredWithoutOrgMemberInvitesNestedInput
  }

  export type OrgMemberInviteUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    inviterId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type OrgMemberInviteUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgMemberRoleFieldUpdateOperationsInput | $Enums.OrgMemberRole
    inviterId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type IntegrationUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    members?: OrgMemberUpdateOneWithoutIntegrationNestedInput
    Project?: ProjectUpdateManyWithoutIntegrationNestedInput
    Lead?: LeadUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orgMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    Project?: ProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUncheckedUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    orgMemberId?: NullableStringFieldUpdateOperationsInput | string | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
  }

  export type LeadUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: LeadStatusUpdateOneWithoutLeadNestedInput
    Project?: LeadProjectUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUpdateManyWithoutLeadNestedInput
    contacts?: ContactUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUpdateManyWithoutLeadNestedInput
    integration?: IntegrationUpdateOneWithoutLeadNestedInput
    Email?: EmailUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    Project?: LeadProjectUncheckedUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUncheckedUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUncheckedUpdateManyWithoutLeadNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutLeadNestedInput
    Email?: EmailUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ContactUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
    lead?: LeadUpdateOneRequiredWithoutContactsNestedInput
    Email?: EmailUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    leadId?: StringFieldUpdateOperationsInput | string
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
    Email?: EmailUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    leadId?: StringFieldUpdateOperationsInput | string
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TemplateUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneWithoutTemplatesNestedInput
  }

  export type TemplateUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TemplateUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    html?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isEnabled?: BoolFieldUpdateOperationsInput | boolean
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadStatusUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Lead?: LeadUpdateManyWithoutStatusNestedInput
  }

  export type LeadStatusUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Lead?: LeadUncheckedUpdateManyWithoutStatusNestedInput
  }

  export type LeadStatusUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type WebhookUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumWebhookTypeFieldUpdateOperationsInput | $Enums.WebhookType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    data?: JsonNullValueInput | InputJsonValue
  }

  export type WebhookUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumWebhookTypeFieldUpdateOperationsInput | $Enums.WebhookType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    data?: JsonNullValueInput | InputJsonValue
  }

  export type WebhookUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumWebhookTypeFieldUpdateOperationsInput | $Enums.WebhookType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    data?: JsonNullValueInput | InputJsonValue
  }

  export type EmailUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    contact?: ContactUpdateOneWithoutEmailNestedInput
    lead?: LeadUpdateOneWithoutEmailNestedInput
    EmailQueue?: EmailQueueUpdateManyWithoutEmailNestedInput
  }

  export type EmailUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    EmailQueue?: EmailQueueUncheckedUpdateManyWithoutEmailNestedInput
  }

  export type EmailUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
  }

  export type MailServiceFromEmailUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integration?: IntegrationUpdateOneRequiredWithoutMailServiceFromEmailNestedInput
  }

  export type MailServiceFromEmailUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    integrationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MailServiceFromEmailUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    integrationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LeadProjectUpdateWithoutOrganizatioonInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: IntegrationUpdateOneRequiredWithoutLeadProjectNestedInput
    lead?: LeadUpdateOneRequiredWithoutProjectNestedInput
    project?: ProjectUpdateOneRequiredWithoutLeadProjectNestedInput
  }

  export type LeadProjectUncheckedUpdateWithoutOrganizatioonInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadProjectUncheckedUpdateManyWithoutOrganizatioonInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadActivityUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    lead?: LeadUpdateOneRequiredWithoutLeadActivitiesNestedInput
    user?: UserUpdateOneWithoutLeadActivityNestedInput
    note?: LeadNotesUpdateOneWithoutLeadActivityNestedInput
  }

  export type LeadActivityUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
  }

  export type LeadActivityUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
  }

  export type UnsubscribeLinkUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    anchorText?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UnsubscribeLinkUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    anchorText?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UnsubscribeLinkUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    message?: NullableStringFieldUpdateOperationsInput | string | null
    anchorText?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntegrationCreateManyMembersInput = {
    id?: string
    organizationId: string
    name: string
    data: JsonNullValueInput | InputJsonValue
    description?: string | null
    type: $Enums.IntegrationType
    category: $Enums.IntegrationCategory
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
    isSingular?: boolean
    sharedType: $Enums.IntegrationSharingType
  }

  export type IntegrationUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    Project?: ProjectUpdateManyWithoutIntegrationNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutIntegrationsNestedInput
    Lead?: LeadUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
    Project?: ProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Lead?: LeadUncheckedUpdateManyWithoutIntegrationNestedInput
    LeadProject?: LeadProjectUncheckedUpdateManyWithoutIntegrationNestedInput
    Jobs?: JobUncheckedUpdateManyWithoutIntegrationNestedInput
    mailServiceFromEmail?: MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationNestedInput
  }

  export type IntegrationUncheckedUpdateManyWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    description?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    category?: EnumIntegrationCategoryFieldUpdateOperationsInput | $Enums.IntegrationCategory
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    isSingular?: BoolFieldUpdateOperationsInput | boolean
    sharedType?: EnumIntegrationSharingTypeFieldUpdateOperationsInput | $Enums.IntegrationSharingType
  }

  export type LeadProjectCreateManyProjectInput = {
    id?: string
    leadId: string
    integrationId: string
    orgId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type LeadProjectUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: IntegrationUpdateOneRequiredWithoutLeadProjectNestedInput
    lead?: LeadUpdateOneRequiredWithoutProjectNestedInput
    organizatioon?: OrganizationUpdateOneRequiredWithoutLeadProjectNestedInput
  }

  export type LeadProjectUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadProjectUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadActivityCreateManyNoteInput = {
    id?: string
    leadId: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    type: $Enums.LeadActivityType
    orgId: string
  }

  export type LeadActivityUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    organization?: OrganizationUpdateOneRequiredWithoutLeadActivityNestedInput
    lead?: LeadUpdateOneRequiredWithoutLeadActivitiesNestedInput
    user?: UserUpdateOneWithoutLeadActivityNestedInput
  }

  export type LeadActivityUncheckedUpdateWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    orgId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadActivityUncheckedUpdateManyWithoutNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    orgId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadProjectCreateManyLeadInput = {
    id?: string
    projectId: string
    integrationId: string
    orgId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type LeadActivityCreateManyLeadInput = {
    id?: string
    data: JsonNullValueInput | InputJsonValue
    updatedAt: bigint | number
    createdAt: bigint | number
    deletedAt: bigint | number
    userId?: string | null
    noteId?: string | null
    type: $Enums.LeadActivityType
    orgId: string
  }

  export type LeadNotesCreateManyLeadInput = {
    id?: string
    data: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    userId: string
  }

  export type ContactCreateManyLeadInput = {
    id?: string
    firstName?: string | null
    lastName?: string | null
    suffix?: string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: string | null
    email?: string | null
    secondaryEmail?: string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    type?: string | null
    lastContacted?: bigint | number | null
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
    organizationId: string
    isPrimay?: boolean
    isUnsubscribed?: boolean
  }

  export type AttachmentCreateManyLeadInput = {
    id?: string
    attachmentUrl: string
    attachmentType: string
    eTag: string
    attachmentName: string
    createdAt: bigint | number
    updatedAt: bigint | number
    deletedAt: bigint | number
  }

  export type EmailCreateManyLeadInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    organizationId: string
    contactId?: string | null
    source: $Enums.IntegrationType
  }

  export type LeadProjectUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    integration?: IntegrationUpdateOneRequiredWithoutLeadProjectNestedInput
    project?: ProjectUpdateOneRequiredWithoutLeadProjectNestedInput
    organizatioon?: OrganizationUpdateOneRequiredWithoutLeadProjectNestedInput
  }

  export type LeadProjectUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadProjectUncheckedUpdateManyWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    integrationId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadActivityUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    organization?: OrganizationUpdateOneRequiredWithoutLeadActivityNestedInput
    user?: UserUpdateOneWithoutLeadActivityNestedInput
    note?: LeadNotesUpdateOneWithoutLeadActivityNestedInput
  }

  export type LeadActivityUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    orgId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadActivityUncheckedUpdateManyWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    noteId?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumLeadActivityTypeFieldUpdateOperationsInput | $Enums.LeadActivityType
    orgId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadNotesUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutLeadNotesNestedInput
    LeadActivity?: LeadActivityUpdateManyWithoutNoteNestedInput
  }

  export type LeadNotesUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: StringFieldUpdateOperationsInput | string
    LeadActivity?: LeadActivityUncheckedUpdateManyWithoutNoteNestedInput
  }

  export type LeadNotesUncheckedUpdateManyWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ContactUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
    organization?: OrganizationUpdateOneRequiredWithoutContactNestedInput
    Email?: EmailUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
    Email?: EmailUncheckedUpdateManyWithoutContactNestedInput
  }

  export type ContactUncheckedUpdateManyWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableJsonNullValueInput | InputJsonValue
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    secondaryEmail?: NullableStringFieldUpdateOperationsInput | string | null
    primaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    secondaryPhNo?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableStringFieldUpdateOperationsInput | string | null
    lastContacted?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    isPrimay?: BoolFieldUpdateOperationsInput | boolean
    isUnsubscribed?: BoolFieldUpdateOperationsInput | boolean
  }

  export type AttachmentUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: StringFieldUpdateOperationsInput | string
    attachmentType?: StringFieldUpdateOperationsInput | string
    eTag?: StringFieldUpdateOperationsInput | string
    attachmentName?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type AttachmentUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: StringFieldUpdateOperationsInput | string
    attachmentType?: StringFieldUpdateOperationsInput | string
    eTag?: StringFieldUpdateOperationsInput | string
    attachmentName?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type AttachmentUncheckedUpdateManyWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    attachmentUrl?: StringFieldUpdateOperationsInput | string
    attachmentType?: StringFieldUpdateOperationsInput | string
    eTag?: StringFieldUpdateOperationsInput | string
    attachmentName?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type EmailUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    contact?: ContactUpdateOneWithoutEmailNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutEmailNestedInput
    EmailQueue?: EmailQueueUpdateManyWithoutEmailNestedInput
  }

  export type EmailUncheckedUpdateWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    EmailQueue?: EmailQueueUncheckedUpdateManyWithoutEmailNestedInput
  }

  export type EmailUncheckedUpdateManyWithoutLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    contactId?: NullableStringFieldUpdateOperationsInput | string | null
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
  }

  export type EmailCreateManyContactInput = {
    id?: string
    from: JsonNullValueInput | InputJsonValue
    to?: EmailCreatetoInput | string[]
    replyTo?: string | null
    cc?: EmailCreateccInput | string[]
    bcc?: EmailCreatebccInput | string[]
    status?: $Enums.EmailStatus
    subject?: string | null
    body: string
    html?: string | null
    trackingId?: string | null
    messageId?: string | null
    threadId?: string | null
    historyId?: string | null
    labelIds?: EmailCreatelabelIdsInput | string[]
    isOpened?: boolean
    openedAt?: bigint | number
    isClicked?: boolean
    clickedAt?: bigint | number
    sentAt?: bigint | number
    deletedAt?: bigint | number
    integrationId: string
    organizationId: string
    leadId?: string | null
    source: $Enums.IntegrationType
  }

  export type EmailUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    lead?: LeadUpdateOneWithoutEmailNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutEmailNestedInput
    EmailQueue?: EmailQueueUpdateManyWithoutEmailNestedInput
  }

  export type EmailUncheckedUpdateWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    EmailQueue?: EmailQueueUncheckedUpdateManyWithoutEmailNestedInput
  }

  export type EmailUncheckedUpdateManyWithoutContactInput = {
    id?: StringFieldUpdateOperationsInput | string
    from?: JsonNullValueInput | InputJsonValue
    to?: EmailUpdatetoInput | string[]
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    cc?: EmailUpdateccInput | string[]
    bcc?: EmailUpdatebccInput | string[]
    status?: EnumEmailStatusFieldUpdateOperationsInput | $Enums.EmailStatus
    subject?: NullableStringFieldUpdateOperationsInput | string | null
    body?: StringFieldUpdateOperationsInput | string
    html?: NullableStringFieldUpdateOperationsInput | string | null
    trackingId?: NullableStringFieldUpdateOperationsInput | string | null
    messageId?: NullableStringFieldUpdateOperationsInput | string | null
    threadId?: NullableStringFieldUpdateOperationsInput | string | null
    historyId?: NullableStringFieldUpdateOperationsInput | string | null
    labelIds?: EmailUpdatelabelIdsInput | string[]
    isOpened?: BoolFieldUpdateOperationsInput | boolean
    openedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    isClicked?: BoolFieldUpdateOperationsInput | boolean
    clickedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    sentAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    leadId?: NullableStringFieldUpdateOperationsInput | string | null
    source?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
  }

  export type EmailQueueCreateManyEmailInput = {
    id?: string
    scheduledAt: bigint | number
    status: $Enums.QueueStatus
    retryCount?: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type EmailQueueUpdateWithoutEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: EnumQueueStatusFieldUpdateOperationsInput | $Enums.QueueStatus
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailQueueUncheckedUpdateWithoutEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: EnumQueueStatusFieldUpdateOperationsInput | $Enums.QueueStatus
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EmailQueueUncheckedUpdateManyWithoutEmailInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: EnumQueueStatusFieldUpdateOperationsInput | $Enums.QueueStatus
    retryCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateManyIntegrationInput = {
    id?: string
    name: string
    type: string
    data: JsonNullValueInput | InputJsonValue
    cliAccessToken?: string | null
    isSynced?: boolean
    organizationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt?: bigint | number | null
  }

  export type LeadCreateManyIntegrationInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    statusId?: string | null
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    organizationId: string
  }

  export type LeadProjectCreateManyIntegrationInput = {
    id?: string
    leadId: string
    projectId: string
    orgId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    status?: string | null
  }

  export type JobCreateManyIntegrationInput = {
    id?: string
    name: string
    status: $Enums.JobStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
    organizationId: string
  }

  export type MailServiceFromEmailCreateManyIntegrationInput = {
    id?: string
    fromName: string
    fromEmail: string
    replyTo?: string | null
    type: $Enums.IntegrationType
    organizationId: string
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type ProjectUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    organization?: OrganizationUpdateOneRequiredWithoutProjectNestedInput
    leadProject?: LeadProjectUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    leadProject?: LeadProjectUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    data?: JsonNullValueInput | InputJsonValue
    cliAccessToken?: NullableStringFieldUpdateOperationsInput | string | null
    isSynced?: BoolFieldUpdateOperationsInput | boolean
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  }

  export type LeadUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: LeadStatusUpdateOneWithoutLeadNestedInput
    Project?: LeadProjectUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUpdateManyWithoutLeadNestedInput
    contacts?: ContactUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUpdateManyWithoutLeadNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadNestedInput
    Email?: EmailUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    Project?: LeadProjectUncheckedUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUncheckedUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUncheckedUpdateManyWithoutLeadNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutLeadNestedInput
    Email?: EmailUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateManyWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableStringFieldUpdateOperationsInput | string | null
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type LeadProjectUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
    lead?: LeadUpdateOneRequiredWithoutProjectNestedInput
    project?: ProjectUpdateOneRequiredWithoutLeadProjectNestedInput
    organizatioon?: OrganizationUpdateOneRequiredWithoutLeadProjectNestedInput
  }

  export type LeadProjectUncheckedUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LeadProjectUncheckedUpdateManyWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    leadId?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    orgId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    status?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
    tasks?: TaskUncheckedUpdateManyWithoutJobNestedInput
  }

  export type JobUncheckedUpdateManyWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumJobStatusFieldUpdateOperationsInput | $Enums.JobStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organizationId?: StringFieldUpdateOperationsInput | string
  }

  export type MailServiceFromEmailUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    organization?: OrganizationUpdateOneRequiredWithoutMailServiceFromEmailNestedInput
  }

  export type MailServiceFromEmailUncheckedUpdateWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type MailServiceFromEmailUncheckedUpdateManyWithoutIntegrationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromName?: StringFieldUpdateOperationsInput | string
    fromEmail?: StringFieldUpdateOperationsInput | string
    replyTo?: NullableStringFieldUpdateOperationsInput | string | null
    type?: EnumIntegrationTypeFieldUpdateOperationsInput | $Enums.IntegrationType
    organizationId?: StringFieldUpdateOperationsInput | string
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TaskCreateManyJobInput = {
    id?: string
    name: string
    status: $Enums.TaskStatus
    createdAt?: bigint | number
    updatedAt?: bigint | number
  }

  export type TaskUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TaskUncheckedUpdateWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type TaskUncheckedUpdateManyWithoutJobInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type LeadCreateManyStatusInput = {
    id?: string
    shopifyDomain: string
    shopifyStoreId: string
    leadSource?: string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: string | null
    createdAt?: bigint | number
    updatedAt?: bigint | number
    deletedAt: bigint | number
    integrationId?: string | null
    organizationId: string
  }

  export type LeadUpdateWithoutStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    Project?: LeadProjectUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUpdateManyWithoutLeadNestedInput
    contacts?: ContactUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUpdateManyWithoutLeadNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutLeadNestedInput
    integration?: IntegrationUpdateOneWithoutLeadNestedInput
    Email?: EmailUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateWithoutStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
    Project?: LeadProjectUncheckedUpdateManyWithoutLeadNestedInput
    leadActivities?: LeadActivityUncheckedUpdateManyWithoutLeadNestedInput
    leadNotes?: LeadNotesUncheckedUpdateManyWithoutLeadNestedInput
    contacts?: ContactUncheckedUpdateManyWithoutLeadNestedInput
    attachments?: AttachmentUncheckedUpdateManyWithoutLeadNestedInput
    Email?: EmailUncheckedUpdateManyWithoutLeadNestedInput
  }

  export type LeadUncheckedUpdateManyWithoutStatusInput = {
    id?: StringFieldUpdateOperationsInput | string
    shopifyDomain?: StringFieldUpdateOperationsInput | string
    shopifyStoreId?: StringFieldUpdateOperationsInput | string
    leadSource?: NullableStringFieldUpdateOperationsInput | string | null
    shopDetails?: NullableJsonNullValueInput | InputJsonValue
    industry?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: BigIntFieldUpdateOperationsInput | bigint | number
    updatedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    deletedAt?: BigIntFieldUpdateOperationsInput | bigint | number
    integrationId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrganizationCountOutputTypeDefaultArgs instead
     */
    export type OrganizationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrganizationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrgMemberCountOutputTypeDefaultArgs instead
     */
    export type OrgMemberCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrgMemberCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeadNotesCountOutputTypeDefaultArgs instead
     */
    export type LeadNotesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeadNotesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeadCountOutputTypeDefaultArgs instead
     */
    export type LeadCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeadCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactCountOutputTypeDefaultArgs instead
     */
    export type ContactCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailCountOutputTypeDefaultArgs instead
     */
    export type EmailCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmailCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IntegrationCountOutputTypeDefaultArgs instead
     */
    export type IntegrationCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IntegrationCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobCountOutputTypeDefaultArgs instead
     */
    export type JobCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeadStatusCountOutputTypeDefaultArgs instead
     */
    export type LeadStatusCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeadStatusCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrgMemberInviteDefaultArgs instead
     */
    export type OrgMemberInviteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrgMemberInviteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrganizationDefaultArgs instead
     */
    export type OrganizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrganizationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrgMemberDefaultArgs instead
     */
    export type OrgMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrgMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeadNotesDefaultArgs instead
     */
    export type LeadNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeadNotesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeadDefaultArgs instead
     */
    export type LeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeadDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeadProjectDefaultArgs instead
     */
    export type LeadProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeadProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ContactDefaultArgs instead
     */
    export type ContactArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ContactDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AttachmentDefaultArgs instead
     */
    export type AttachmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AttachmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeadActivityDefaultArgs instead
     */
    export type LeadActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeadActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailDefaultArgs instead
     */
    export type EmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EmailQueueDefaultArgs instead
     */
    export type EmailQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EmailQueueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IntegrationDefaultArgs instead
     */
    export type IntegrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IntegrationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MailServiceFromEmailDefaultArgs instead
     */
    export type MailServiceFromEmailArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MailServiceFromEmailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UnsubscribeLinkDefaultArgs instead
     */
    export type UnsubscribeLinkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UnsubscribeLinkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobDefaultArgs instead
     */
    export type JobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskDefaultArgs instead
     */
    export type TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WebhookDefaultArgs instead
     */
    export type WebhookArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WebhookDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TemplateDefaultArgs instead
     */
    export type TemplateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TemplateDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LeadStatusDefaultArgs instead
     */
    export type LeadStatusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LeadStatusDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}